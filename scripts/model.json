{"schemas":{"kjzl6cwe1jw145ux02y6eu5546crh6a7bowcht38tqkhfid5b33fwcz2hc0bdo1":{"alias":"MediaObject","commits":[{"jws":{"payload":"AXESIEATwPkfUI9ueTnfnjOnOeKFm6MePQ-IiaatgddJmW71","signatures":[{"signature":"JBUf_IlL2Ak7U4Vv6BDdlX7DSfy8gWyQod_RwejSxvdxIK2j9L7EQOP44oBfzVnhXoUDoGX2P7DZggk2k9nhDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicacpapsh2qr5xhsoo7tyz2oopcqwn2ghr5b6eitjvnqhlutglo6u"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxlnuokz1lickdp6re4ok3520umv2rgxnyalhqu0h249dn9e8x6v4"},"kjzl6cwe1jw14awl2z9jcw958lxv3tctqp7hkizadb19cvyn3csuntmiiv4yloh":{"alias":"NewsArticle","commits":[{"jws":{"payload":"AXESIFA8IQKmJxBHniBZxuBVo0ExLdhsyXJYYTOjz3IPNmpg","signatures":[{"signature":"xg1rQiINsO9RYC4wVlUgkW3PFkVdmnIeUvBZLr8Yg8fusSfkLwRIzuFLi7k3_czVh3pqRsH74I0Z3OPY8gvTDQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicqhqqqfjrhcbdz4iczy3qfli2bgew5q3gjojmgcm5dz5za6ntkma"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fryljpx6rtnpd1980t74r7hv98xyyxqmgyjnac7v161eo3q5fa260w"},"kjzl6cwe1jw147zq4v0df7ubwilhurqylxobqvwdzv6a90xicynt9f1ys0eylv3":{"alias":"CreativeWork","commits":[{"jws":{"payload":"AXESIJaomI77x0JdCGYjrsYqwtRnXfjGo6wzaJ8m--aCtQ5g","signatures":[{"signature":"QWOTMi0tHi6_uA8FZ74sxjVn_1T8gJPWxfc5Y9ZD3l-Lt45UvK4DG2NouWyr8RjgvFSL1sMqv5z4c1TNONxoCw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiewvcmi566hijoqqzrdv3dcvqwum5o7rrvdvqzwrhzg7ptifnioma"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlbENyZWF0aXZlV29ya2ckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNqcHJvcGVydGllc7hvZHNpemWiZW9uZU9mgqFlYW55T2aEoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm2hZCRyZWZ4GHNjaGVtYTpRdWFudGl0YXRpdmVWYWx1ZaFkJHJlZngYc2NoZW1hOlNpemVTcGVjaWZpY2F0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoShZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybaFkJHJlZngYc2NoZW1hOlF1YW50aXRhdGl2ZVZhbHVloWQkcmVmeBhzY2hlbWE6U2l6ZVNwZWNpZmljYXRpb25rZGVzY3JpcHRpb255AUlBIHN0YW5kYXJkaXplZCBzaXplIG9mIGEgcHJvZHVjdCBvciBjcmVhdGl2ZSB3b3JrLCBzcGVjaWZpZWQgZWl0aGVyIHRocm91Z2ggYSBzaW1wbGUgdGV4dHVhbCBzdHJpbmcgKGZvciBleGFtcGxlICdYTCcsICczMld4MzRMJyksIGEgIFF1YW50aXRhdGl2ZVZhbHVlIHdpdGggYSB1bml0Q29kZSwgb3IgYSBjb21wcmVoZW5zaXZlIGFuZCBzdHJ1Y3R1cmVkIFtbU2l6ZVNwZWNpZmljYXRpb25dXTsgaW4gb3RoZXIgY2FzZXMsIHRoZSBbW3dpZHRoXV0sIFtbaGVpZ2h0XV0sIFtbZGVwdGhdXSBhbmQgW1t3ZWlnaHRdXSBwcm9wZXJ0aWVzIG1heSBiZSBtb3JlIGFwcGxpY2FibGUuIGR0ZXh0omR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngpVGhlIHRleHR1YWwgY29udGVudCBvZiB0aGlzIENyZWF0aXZlV29yay5lYWJvdXSiZCRyZWZsc2NoZW1hOlRoaW5na2Rlc2NyaXB0aW9ueCJUaGUgc3ViamVjdCBtYXR0ZXIgb2YgdGhlIGNvbnRlbnQuZWF1ZGlvomVvbmVPZoKhZWFueU9mg6FkJHJlZnJzY2hlbWE6QXVkaW9PYmplY3ShZCRyZWZrc2NoZW1hOkNsaXChZCRyZWZ1c2NoZW1hOk11c2ljUmVjb3JkaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoOhZCRyZWZyc2NoZW1hOkF1ZGlvT2JqZWN0oWQkcmVma3NjaGVtYTpDbGlwoWQkcmVmdXNjaGVtYTpNdXNpY1JlY29yZGluZ2tkZXNjcmlwdGlvbngZQW4gZW1iZWRkZWQgYXVkaW8gb2JqZWN0LmVhd2FyZKJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254IUFuIGF3YXJkIHdvbiBieSBvciBmb3IgdGhpcyBpdGVtLmVnZW5yZaJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbng3R2VucmUgb2YgdGhlIGNyZWF0aXZlIHdvcmssIGJyb2FkY2FzdCBjaGFubmVsIG9yIGdyb3VwLmV2aWRlb6Jlb25lT2aCoWVhbnlPZoKhZCRyZWZrc2NoZW1hOkNsaXChZCRyZWZyc2NoZW1hOlZpZGVvT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZrc2NoZW1hOkNsaXChZCRyZWZyc2NoZW1hOlZpZGVvT2JqZWN0a2Rlc2NyaXB0aW9ueBlBbiBlbWJlZGRlZCB2aWRlbyBvYmplY3QuZmF1dGhvcqJlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnjbVGhlIGF1dGhvciBvZiB0aGlzIGNvbnRlbnQgb3IgcmF0aW5nLiBQbGVhc2Ugbm90ZSB0aGF0IGF1dGhvciBpcyBzcGVjaWFsIGluIHRoYXQgSFRNTCA1IHByb3ZpZGVzIGEgc3BlY2lhbCBtZWNoYW5pc20gZm9yIGluZGljYXRpbmcgYXV0aG9yc2hpcCB2aWEgdGhlIHJlbCB0YWcuIFRoYXQgaXMgZXF1aXZhbGVudCB0byB0aGlzIGFuZCBtYXkgYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkuZmF3YXJkc6Jlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254H0F3YXJkcyB3b24gYnkgb3IgZm9yIHRoaXMgaXRlbS5mZWRpdG9yomQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254MVNwZWNpZmllcyB0aGUgUGVyc29uIHdobyBlZGl0ZWQgdGhlIENyZWF0aXZlV29yay5mZnVuZGVyomVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb26iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254aEEgcGVyc29uIG9yIG9yZ2FuaXphdGlvbiB0aGF0IHN1cHBvcnRzIChzcG9uc29ycykgc29tZXRoaW5nIHRocm91Z2ggc29tZSBraW5kIG9mIGZpbmFuY2lhbCBjb250cmlidXRpb24uZm9mZmVyc6Jlb25lT2aCoWVhbnlPZoKhZCRyZWZtc2NoZW1hOkRlbWFuZKFkJHJlZmxzY2hlbWE6T2ZmZXKiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZm1zY2hlbWE6RGVtYW5koWQkcmVmbHNjaGVtYTpPZmZlcmtkZXNjcmlwdGlvbnkCBUFuIG9mZmVyIHRvIHByb3ZpZGUgdGhpcyBpdGVt4oCUZm9yIGV4YW1wbGUsIGFuIG9mZmVyIHRvIHNlbGwgYSBwcm9kdWN0LCByZW50IHRoZSBEVkQgb2YgYSBtb3ZpZSwgcGVyZm9ybSBhIHNlcnZpY2UsIG9yIGdpdmUgYXdheSB0aWNrZXRzIHRvIGFuIGV2ZW50LiBVc2UgW1tidXNpbmVzc0Z1bmN0aW9uXV0gdG8gaW5kaWNhdGUgdGhlIGtpbmQgb2YgdHJhbnNhY3Rpb24gb2ZmZXJlZCwgaS5lLiBzZWxsLCBsZWFzZSwgZXRjLiBUaGlzIHByb3BlcnR5IGNhbiBhbHNvIGJlIHVzZWQgdG8gZGVzY3JpYmUgYSBbW0RlbWFuZF1dLiBXaGlsZSB0aGlzIHByb3BlcnR5IGlzIGxpc3RlZCBhcyBleHBlY3RlZCBvbiBhIG51bWJlciBvZiBjb21tb24gdHlwZXMsIGl0IGNhbiBiZSB1c2VkIGluIG90aGVycy4gSW4gdGhhdCBjYXNlLCB1c2luZyBhIHNlY29uZCB0eXBlLCBzdWNoIGFzIFByb2R1Y3Qgb3IgYSBzdWJ0eXBlIG9mIFByb2R1Y3QsIGNhbiBjbGFyaWZ5IHRoZSBuYXR1cmUgb2YgdGhlIG9mZmVyLgogICAgICBmcmV2aWV3omVvbmVPZoKhZCRyZWZtc2NoZW1hOlJldmlld6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6UmV2aWV3a2Rlc2NyaXB0aW9udUEgcmV2aWV3IG9mIHRoZSBpdGVtLmdjb21tZW50omVvbmVPZoKhZCRyZWZuc2NoZW1hOkNvbW1lbnSiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZuc2NoZW1hOkNvbW1lbnRrZGVzY3JpcHRpb254H0NvbW1lbnRzLCB0eXBpY2FsbHkgZnJvbSB1c2Vycy5nY3JlYXRvcqJlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnhiVGhlIGNyZWF0b3IvYXV0aG9yIG9mIHRoaXMgQ3JlYXRpdmVXb3JrLiBUaGlzIGlzIHRoZSBzYW1lIGFzIHRoZSBBdXRob3IgcHJvcGVydHkgZm9yIENyZWF0aXZlV29yay5nZXhwaXJlc6NkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGVrZGVzY3JpcHRpb255AS9EYXRlIHRoZSBjb250ZW50IGV4cGlyZXMgYW5kIGlzIG5vIGxvbmdlciB1c2VmdWwgb3IgYXZhaWxhYmxlLiBGb3IgZXhhbXBsZSBhIFtbVmlkZW9PYmplY3RdXSBvciBbW05ld3NBcnRpY2xlXV0gd2hvc2UgYXZhaWxhYmlsaXR5IG9yIHJlbGV2YW5jZSBpcyB0aW1lLWxpbWl0ZWQsIG9yIGEgW1tDbGFpbVJldmlld11dIGZhY3QgY2hlY2sgd2hvc2UgcHVibGlzaGVyIHdhbnRzIHRvIGluZGljYXRlIHRoYXQgaXQgbWF5IG5vIGxvbmdlciBiZSByZWxldmFudCAob3IgaGVscGZ1bCB0byBoaWdobGlnaHQpIGFmdGVyIHNvbWUgZGF0ZS5naGFzUGFydKJlb25lT2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnhdSW5kaWNhdGVzIGFuIGl0ZW0gb3IgQ3JlYXRpdmVXb3JrIHRoYXQgaXMgcGFydCBvZiB0aGlzIGl0ZW0sIG9yIENyZWF0aXZlV29yayAoaW4gc29tZSBzZW5zZSkuZ2xpY2Vuc2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueExBIGxpY2Vuc2UgZG9jdW1lbnQgdGhhdCBhcHBsaWVzIHRvIHRoaXMgY29udGVudCwgdHlwaWNhbGx5IGluZGljYXRlZCBieSBVUkwuZ3BhdHRlcm6iZW9uZU9mgqFlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm2iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueLlBIHBhdHRlcm4gdGhhdCBzb21ldGhpbmcgaGFzLCBmb3IgZXhhbXBsZSAncG9sa2EgZG90JywgJ3N0cmlwZWQnLCAnQ2FuYWRpYW4gZmxhZycuIFZhbHVlcyBhcmUgdHlwaWNhbGx5IGV4cHJlc3NlZCBhcyB0ZXh0LCBhbHRob3VnaCBsaW5rcyB0byBjb250cm9sbGVkIHZhbHVlIHNjaGVtZXMgYXJlIGFsc28gc3VwcG9ydGVkLmdyZXZpZXdzomVvbmVPZoKhZCRyZWZtc2NoZW1hOlJldmlld6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6UmV2aWV3a2Rlc2NyaXB0aW9uc1JldmlldyBvZiB0aGUgaXRlbS5nc3BhdGlhbKJkJHJlZmxzY2hlbWE6UGxhY2VrZGVzY3JpcHRpb254r1RoZSAic3BhdGlhbCIgcHJvcGVydHkgY2FuIGJlIHVzZWQgaW4gY2FzZXMgd2hlbiBtb3JlIHNwZWNpZmljIHByb3BlcnRpZXMKKGUuZy4gW1tsb2NhdGlvbkNyZWF0ZWRdXSwgW1tzcGF0aWFsQ292ZXJhZ2VdXSwgW1tjb250ZW50TG9jYXRpb25dXSkgYXJlIG5vdCBrbm93biB0byBiZSBhcHByb3ByaWF0ZS5nc3BvbnNvcqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29uomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueKpBIHBlcnNvbiBvciBvcmdhbml6YXRpb24gdGhhdCBzdXBwb3J0cyBhIHRoaW5nIHRocm91Z2ggYSBwbGVkZ2UsIHByb21pc2UsIG9yIGZpbmFuY2lhbCBjb250cmlidXRpb24uIGUuZy4gYSBzcG9uc29yIG9mIGEgTWVkaWNhbCBTdHVkeSBvciBhIGNvcnBvcmF0ZSBzcG9uc29yIG9mIGFuIGV2ZW50Lmd0ZWFjaGVzomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybWtkZXNjcmlwdGlvbnh+VGhlIGl0ZW0gYmVpbmcgZGVzY3JpYmVkIGlzIGludGVuZGVkIHRvIGhlbHAgYSBwZXJzb24gbGVhcm4gdGhlIGNvbXBldGVuY3kgb3IgbGVhcm5pbmcgb3V0Y29tZSBkZWZpbmVkIGJ5IHRoZSByZWZlcmVuY2VkIHRlcm0uZ3ZlcnNpb26iZWFueU9mgqFkdHlwZWZudW1iZXKhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueEFUaGUgdmVyc2lvbiBvZiB0aGUgQ3JlYXRpdmVXb3JrIGVtYm9kaWVkIGJ5IGEgc3BlY2lmaWVkIHJlc291cmNlLmhhYnN0cmFjdKJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254RkFuIGFic3RyYWN0IGlzIGEgc2hvcnQgZGVzY3JpcHRpb24gdGhhdCBzdW1tYXJpemVzIGEgW1tDcmVhdGl2ZVdvcmtdXS5oYXNzZXNzZXOiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueHFUaGUgaXRlbSBiZWluZyBkZXNjcmliZWQgaXMgaW50ZW5kZWQgdG8gYXNzZXNzIHRoZSBjb21wZXRlbmN5IG9yIGxlYXJuaW5nIG91dGNvbWUgZGVmaW5lZCBieSB0aGUgcmVmZXJlbmNlZCB0ZXJtLmhhdWRpZW5jZaJkJHJlZm9zY2hlbWE6QXVkaWVuY2VrZGVzY3JpcHRpb254QkFuIGludGVuZGVkIGF1ZGllbmNlLCBpLmUuIGEgZ3JvdXAgZm9yIHdob20gc29tZXRoaW5nIHdhcyBjcmVhdGVkLmhjaXRhdGlvbqJlb25lT2aCoWVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnhwQSBjaXRhdGlvbiBvciByZWZlcmVuY2UgdG8gYW5vdGhlciBjcmVhdGl2ZSB3b3JrLCBzdWNoIGFzIGFub3RoZXIgcHVibGljYXRpb24sIHdlYiBwYWdlLCBzY2hvbGFybHkgYXJ0aWNsZSwgZXRjLmhlZGl0RUlEUqJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueQJwQW4gW0VJRFJdKGh0dHBzOi8vZWlkci5vcmcvKSAoRW50ZXJ0YWlubWVudCBJZGVudGlmaWVyIFJlZ2lzdHJ5KSBbW2lkZW50aWZpZXJdXSByZXByZXNlbnRpbmcgYSBzcGVjaWZpYyBlZGl0IC8gZWRpdGlvbiBmb3IgYSB3b3JrIG9mIGZpbG0gb3IgdGVsZXZpc2lvbi4KCkZvciBleGFtcGxlLCB0aGUgbW90aW9uIHBpY3R1cmUga25vd24gYXMgIkdob3N0YnVzdGVycyIgd2hvc2UgW1t0aXRsZUVJRFJdXSBpcyAiMTAuNTI0MC83RUM3LTIyOEEtNTEwQS0wNTNFLUNCQjgtSiIsIGhhcyBzZXZlcmFsIGVkaXRzIGUuZy4gIjEwLjUyNDAvMUYyQS1FMUM1LTY4MEEtMTRDNi1FNzZCLUkiIGFuZCAiMTAuNTI0MC84QTM1LTNCRUUtNjQ5Ny01RDEyLTlFNEYtMyIuCgpTaW5jZSBzY2hlbWEub3JnIHR5cGVzIGxpa2UgW1tNb3ZpZV1dIGFuZCBbW1RWRXBpc29kZV1dIGNhbiBiZSB1c2VkIGZvciBib3RoIHdvcmtzIGFuZCB0aGVpciBtdWx0aXBsZSBleHByZXNzaW9ucywgaXQgaXMgcG9zc2libGUgdG8gdXNlIFtbdGl0bGVFSURSXV0gYWxvbmUgKGZvciBhIGdlbmVyYWwgZGVzY3JpcHRpb24pLCBvciBhbG9uZ3NpZGUgW1tlZGl0RUlEUl1dIGZvciBhIG1vcmUgZWRpdC1zcGVjaWZpYyBkZXNjcmlwdGlvbi4KaGVuY29kaW5nomVvbmVPZoKhZCRyZWZyc2NoZW1hOk1lZGlhT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmcnNjaGVtYTpNZWRpYU9iamVjdGtkZXNjcmlwdGlvbnheQSBtZWRpYSBvYmplY3QgdGhhdCBlbmNvZGVzIHRoaXMgQ3JlYXRpdmVXb3JrLiBUaGlzIHByb3BlcnR5IGlzIGEgc3lub255bSBmb3IgYXNzb2NpYXRlZE1lZGlhLmhoZWFkbGluZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GEhlYWRsaW5lIG9mIHRoZSBhcnRpY2xlLmhpc1BhcnRPZqJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254XkluZGljYXRlcyBhbiBpdGVtIG9yIENyZWF0aXZlV29yayB0aGF0IHRoaXMgaXRlbSwgb3IgQ3JlYXRpdmVXb3JrIChpbiBzb21lIHNlbnNlKSwgaXMgcGFydCBvZi5oa2V5d29yZHOiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueHZLZXl3b3JkcyBvciB0YWdzIHVzZWQgdG8gZGVzY3JpYmUgdGhpcyBjb250ZW50LiBNdWx0aXBsZSBlbnRyaWVzIGluIGEga2V5d29yZHMgbGlzdCBhcmUgdHlwaWNhbGx5IGRlbGltaXRlZCBieSBjb21tYXMuaG1hdGVyaWFsomVvbmVPZoKhZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZuc2NoZW1hOlByb2R1Y3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZuc2NoZW1hOlByb2R1Y3RrZGVzY3JpcHRpb254SkEgbWF0ZXJpYWwgdGhhdCBzb21ldGhpbmcgaXMgbWFkZSBmcm9tLCBlLmcuIGxlYXRoZXIsIHdvb2wsIGNvdHRvbiwgcGFwZXIuaG1lbnRpb25zomVvbmVPZoKhZCRyZWZsc2NoZW1hOlRoaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbHNjaGVtYTpUaGluZ2tkZXNjcmlwdGlvbnhgSW5kaWNhdGVzIHRoYXQgdGhlIENyZWF0aXZlV29yayBjb250YWlucyBhIHJlZmVyZW5jZSB0bywgYnV0IGlzIG5vdCBuZWNlc3NhcmlseSBhYm91dCBhIGNvbmNlcHQuaHBvc2l0aW9uomVhbnlPZoKhZHR5cGVnaW50ZWdlcqFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254OVRoZSBwb3NpdGlvbiBvZiBhbiBpdGVtIGluIGEgc2VyaWVzIG9yIHNlcXVlbmNlIG9mIGl0ZW1zLmhwcm9kdWNlcqJlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnhhVGhlIHBlcnNvbiBvciBvcmdhbml6YXRpb24gd2hvIHByb2R1Y2VkIHRoZSB3b3JrIChlLmcuIG11c2ljIGFsYnVtLCBtb3ZpZSwgdHYvcmFkaW8gc2VyaWVzIGV0Yy4pLmhwcm92aWRlcqJlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnjQVGhlIHNlcnZpY2UgcHJvdmlkZXIsIHNlcnZpY2Ugb3BlcmF0b3IsIG9yIHNlcnZpY2UgcGVyZm9ybWVyOyB0aGUgZ29vZHMgcHJvZHVjZXIuIEFub3RoZXIgcGFydHkgKGEgc2VsbGVyKSBtYXkgb2ZmZXIgdGhvc2Ugc2VydmljZXMgb3IgZ29vZHMgb24gYmVoYWxmIG9mIHRoZSBwcm92aWRlci4gQSBwcm92aWRlciBtYXkgYWxzbyBzZXJ2ZSBhcyB0aGUgc2VsbGVyLmh0ZW1wb3JhbKJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1loWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbni+VGhlICJ0ZW1wb3JhbCIgcHJvcGVydHkgY2FuIGJlIHVzZWQgaW4gY2FzZXMgd2hlcmUgbW9yZSBzcGVjaWZpYyBwcm9wZXJ0aWVzCihlLmcuIFtbdGVtcG9yYWxDb3ZlcmFnZV1dLCBbW2RhdGVDcmVhdGVkXV0sIFtbZGF0ZU1vZGlmaWVkXV0sIFtbZGF0ZVB1Ymxpc2hlZF1dKSBhcmUgbm90IGtub3duIHRvIGJlIGFwcHJvcHJpYXRlLmljaGFyYWN0ZXKiZW9uZU9mgqFkJHJlZm1zY2hlbWE6UGVyc29uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254MEZpY3Rpb25hbCBwZXJzb24gY29ubmVjdGVkIHdpdGggYSBjcmVhdGl2ZSB3b3JrLmllbmNvZGluZ3OiZW9uZU9mgqFkJHJlZnJzY2hlbWE6TWVkaWFPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZyc2NoZW1hOk1lZGlhT2JqZWN0a2Rlc2NyaXB0aW9ueC5BIG1lZGlhIG9iamVjdCB0aGF0IGVuY29kZXMgdGhpcyBDcmVhdGl2ZVdvcmsuaWlzQmFzZWRPbqJlb25lT2aCoWVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZm5zY2hlbWE6UHJvZHVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZuc2NoZW1hOlByb2R1Y3RrZGVzY3JpcHRpb254WkEgcmVzb3VyY2UgZnJvbSB3aGljaCB0aGlzIHdvcmsgaXMgZGVyaXZlZCBvciBmcm9tIHdoaWNoIGl0IGlzIGEgbW9kaWZpY2F0aW9uIG9yIGFkYXB0aW9uLmlwdWJsaXNoZXKiZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254I1RoZSBwdWJsaXNoZXIgb2YgdGhlIGNyZWF0aXZlIHdvcmsuaXNkTGljZW5zZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254VEEgbGljZW5zZSBkb2N1bWVudCB0aGF0IGFwcGxpZXMgdG8gdGhpcyBzdHJ1Y3R1cmVkIGRhdGEsIHR5cGljYWxseSBpbmRpY2F0ZWQgYnkgVVJMLml1c2FnZUluZm+iZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueQM3VGhlIHNjaGVtYS5vcmcgW1t1c2FnZUluZm9dXSBwcm9wZXJ0eSBpbmRpY2F0ZXMgZnVydGhlciBpbmZvcm1hdGlvbiBhYm91dCBhIFtbQ3JlYXRpdmVXb3JrXV0uIFRoaXMgcHJvcGVydHkgaXMgYXBwbGljYWJsZSBib3RoIHRvIHdvcmtzIHRoYXQgYXJlIGZyZWVseSBhdmFpbGFibGUgYW5kIHRvIHRob3NlIHRoYXQgcmVxdWlyZSBwYXltZW50IG9yIG90aGVyIHRyYW5zYWN0aW9ucy4gSXQgY2FuIHJlZmVyZW5jZSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGUuZy4gY29tbXVuaXR5IGV4cGVjdGF0aW9ucyBvbiBwcmVmZXJyZWQgbGlua2luZyBhbmQgY2l0YXRpb24gY29udmVudGlvbnMsIGFzIHdlbGwgYXMgcHVyY2hhc2luZyBkZXRhaWxzLiBGb3Igc29tZXRoaW5nIHRoYXQgY2FuIGJlIGNvbW1lcmNpYWxseSBsaWNlbnNlZCwgdXNhZ2VJbmZvIGNhbiBwcm92aWRlIGRldGFpbGVkLCByZXNvdXJjZS1zcGVjaWZpYyBpbmZvcm1hdGlvbiBhYm91dCBsaWNlbnNpbmcgb3B0aW9ucy4KClRoaXMgcHJvcGVydHkgY2FuIGJlIHVzZWQgYWxvbmdzaWRlIHRoZSBsaWNlbnNlIHByb3BlcnR5IHdoaWNoIGluZGljYXRlcyBsaWNlbnNlKHMpIGFwcGxpY2FibGUgdG8gc29tZSBwaWVjZSBvZiBjb250ZW50LiBUaGUgdXNhZ2VJbmZvIHByb3BlcnR5IGNhbiBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IG90aGVyIGxpY2Vuc2luZyBvcHRpb25zLCBlLmcuIGFjcXVpcmluZyBjb21tZXJjaWFsIHVzYWdlIHJpZ2h0cyBmb3IgYW4gaW1hZ2UgdGhhdCBpcyBhbHNvIGF2YWlsYWJsZSB1bmRlciBub24tY29tbWVyY2lhbCBjcmVhdGl2ZSBjb21tb25zIGxpY2Vuc2VzLmphY2Nlc3NNb2RlomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkBIVRoZSBodW1hbiBzZW5zb3J5IHBlcmNlcHR1YWwgc3lzdGVtIG9yIGNvZ25pdGl2ZSBmYWN1bHR5IHRocm91Z2ggd2hpY2ggYSBwZXJzb24gbWF5IHByb2Nlc3Mgb3IgcGVyY2VpdmUgaW5mb3JtYXRpb24uIEV4cGVjdGVkIHZhbHVlcyBpbmNsdWRlOiBhdWRpdG9yeSwgdGFjdGlsZSwgdGV4dHVhbCwgdmlzdWFsLCBjb2xvckRlcGVuZGVudCwgY2hhcnRPblZpc3VhbCwgY2hlbU9uVmlzdWFsLCBkaWFncmFtT25WaXN1YWwsIG1hdGhPblZpc3VhbCwgbXVzaWNPblZpc3VhbCwgdGV4dE9uVmlzdWFsLgogICAgICBqYXJjaGl2ZWRBdKJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZuc2NoZW1hOldlYlBhZ2WiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZm5zY2hlbWE6V2ViUGFnZWtkZXNjcmlwdGlvbnkBTEluZGljYXRlcyBhIHBhZ2Ugb3Igb3RoZXIgbGluayBpbnZvbHZlZCBpbiBhcmNoaXZhbCBvZiBhIFtbQ3JlYXRpdmVXb3JrXV0uIEluIHRoZSBjYXNlIG9mIFtbTWVkaWFSZXZpZXddXSwgdGhlIGl0ZW1zIGluIGEgW1tNZWRpYVJldmlld0l0ZW1dXSBtYXkgb2Z0ZW4gYmVjb21lIGluYWNjZXNzaWJsZSwgYnV0IGJlIGFyY2hpdmVkIGJ5IGFyY2hpdmFsLCBqb3VybmFsaXN0aWMsIGFjdGl2aXN0LCBvciBsYXcgZW5mb3JjZW1lbnQgb3JnYW5pemF0aW9ucy4gSW4gc3VjaCBjYXNlcywgdGhlIHJlZmVyZW5jZWQgcGFnZSBtYXkgbm90IGRpcmVjdGx5IHB1Ymxpc2ggdGhlIGNvbnRlbnQuamNvcnJlY3Rpb26iZW9uZU9mgqFlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZngYc2NoZW1hOkNvcnJlY3Rpb25Db21tZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmeBhzY2hlbWE6Q29ycmVjdGlvbkNvbW1lbnRrZGVzY3JpcHRpb254c0luZGljYXRlcyBhIGNvcnJlY3Rpb24gdG8gYSBbW0NyZWF0aXZlV29ya11dLCBlaXRoZXIgdmlhIGEgW1tDb3JyZWN0aW9uQ29tbWVudF1dLCB0ZXh0dWFsbHkgb3IgaW4gYW5vdGhlciBkb2N1bWVudC5qY3JlZGl0VGV4dKJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254a1RleHQgdGhhdCBjYW4gYmUgdXNlZCB0byBjcmVkaXQgcGVyc29uKHMpIGFuZC9vciBvcmdhbml6YXRpb24ocykgYXNzb2NpYXRlZCB3aXRoIGEgcHVibGlzaGVkIENyZWF0aXZlIFdvcmsuamZpbGVGb3JtYXSiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255AeVNZWRpYSB0eXBlLCB0eXBpY2FsbHkgTUlNRSBmb3JtYXQgKHNlZSBbSUFOQSBzaXRlXShodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL21lZGlhLXR5cGVzL21lZGlhLXR5cGVzLnhodG1sKSkgb2YgdGhlIGNvbnRlbnQgZS5nLiBhcHBsaWNhdGlvbi96aXAgb2YgYSBTb2Z0d2FyZUFwcGxpY2F0aW9uIGJpbmFyeS4gSW4gY2FzZXMgd2hlcmUgYSBDcmVhdGl2ZVdvcmsgaGFzIHNldmVyYWwgbWVkaWEgdHlwZSByZXByZXNlbnRhdGlvbnMsICdlbmNvZGluZycgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgZWFjaCBNZWRpYU9iamVjdCBhbG9uZ3NpZGUgcGFydGljdWxhciBmaWxlRm9ybWF0IGluZm9ybWF0aW9uLiBVbnJlZ2lzdGVyZWQgb3IgbmljaGUgZmlsZSBmb3JtYXRzIGNhbiBiZSBpbmRpY2F0ZWQgaW5zdGVhZCB2aWEgdGhlIG1vc3QgYXBwcm9wcmlhdGUgVVJMLCBlLmcuIGRlZmluaW5nIFdlYiBwYWdlIG9yIGEgV2lraXBlZGlhIGVudHJ5Lmppbkxhbmd1YWdlomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmb3NjaGVtYTpMYW5ndWFnZWtkZXNjcmlwdGlvbnjIVGhlIGxhbmd1YWdlIG9mIHRoZSBjb250ZW50IG9yIHBlcmZvcm1hbmNlIG9yIHVzZWQgaW4gYW4gYWN0aW9uLiBQbGVhc2UgdXNlIG9uZSBvZiB0aGUgbGFuZ3VhZ2UgY29kZXMgZnJvbSB0aGUgW0lFVEYgQkNQIDQ3IHN0YW5kYXJkXShodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9iY3A0NykuIFNlZSBhbHNvIFtbYXZhaWxhYmxlTGFuZ3VhZ2VdXS5qbWFpbkVudGl0eaJlb25lT2aCoWQkcmVmbHNjaGVtYTpUaGluZ6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZmxzY2hlbWE6VGhpbmdrZGVzY3JpcHRpb254SkluZGljYXRlcyB0aGUgcHJpbWFyeSBlbnRpdHkgZGVzY3JpYmVkIGluIHNvbWUgcGFnZSBvciBvdGhlciBDcmVhdGl2ZVdvcmsuam1haW50YWluZXKiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnkDXEEgbWFpbnRhaW5lciBvZiBhIFtbRGF0YXNldF1dLCBzb2Z0d2FyZSBwYWNrYWdlIChbW1NvZnR3YXJlQXBwbGljYXRpb25dXSksIG9yIG90aGVyIFtbUHJvamVjdF1dLiBBIG1haW50YWluZXIgaXMgYSBbW1BlcnNvbl1dIG9yIFtbT3JnYW5pemF0aW9uXV0gdGhhdCBtYW5hZ2VzIGNvbnRyaWJ1dGlvbnMgdG8sIGFuZC9vciBwdWJsaWNhdGlvbiBvZiwgc29tZSAodHlwaWNhbGx5IGNvbXBsZXgpIGFydGlmYWN0LiBJdCBpcyBjb21tb24gZm9yIGRpc3RyaWJ1dGlvbnMgb2Ygc29mdHdhcmUgYW5kIGRhdGEgdG8gYmUgYmFzZWQgb24gInVwc3RyZWFtIiBzb3VyY2VzLiBXaGVuIFtbbWFpbnRhaW5lcl1dIGlzIGFwcGxpZWQgdG8gYSBzcGVjaWZpYyB2ZXJzaW9uIG9mIHNvbWV0aGluZyBlLmcuIGEgcGFydGljdWxhciB2ZXJzaW9uIG9yIHBhY2thZ2luZyBvZiBhIFtbRGF0YXNldF1dLCBpdCBpcyBhbHdheXMgIHBvc3NpYmxlIHRoYXQgdGhlIHVwc3RyZWFtIHNvdXJjZSBoYXMgYSBkaWZmZXJlbnQgbWFpbnRhaW5lci4gVGhlIFtbaXNCYXNlZE9uXV0gcHJvcGVydHkgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgc3VjaCByZWxhdGlvbnNoaXBzIGJldHdlZW4gZGF0YXNldHMgdG8gbWFrZSB0aGUgZGlmZmVyZW50IG1haW50ZW5hbmNlIHJvbGVzIGNsZWFyLiBTaW1pbGFybHkgaW4gdGhlIGNhc2Ugb2Ygc29mdHdhcmUsIGEgcGFja2FnZSBtYXkgaGF2ZSBkZWRpY2F0ZWQgbWFpbnRhaW5lcnMgd29ya2luZyBvbiBpbnRlZ3JhdGlvbiBpbnRvIHNvZnR3YXJlIGRpc3RyaWJ1dGlvbnMgc3VjaCBhcyBVYnVudHUsIGFzIHdlbGwgYXMgdXBzdHJlYW0gbWFpbnRhaW5lcnMgb2YgdGhlIHVuZGVybHlpbmcgd29yay4KICAgICAganJlY29yZGVkQXSiZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueGVUaGUgRXZlbnQgd2hlcmUgdGhlIENyZWF0aXZlV29yayB3YXMgcmVjb3JkZWQuIFRoZSBDcmVhdGl2ZVdvcmsgbWF5IGNhcHR1cmUgYWxsIG9yIHBhcnQgb2YgdGhlIGV2ZW50Lmp0cmFuc2xhdG9yomVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb26iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254s09yZ2FuaXphdGlvbiBvciBwZXJzb24gd2hvIGFkYXB0cyBhIGNyZWF0aXZlIHdvcmsgdG8gZGlmZmVyZW50IGxhbmd1YWdlcywgcmVnaW9uYWwgZGlmZmVyZW5jZXMgYW5kIHRlY2huaWNhbCByZXF1aXJlbWVudHMgb2YgYSB0YXJnZXQgbWFya2V0LCBvciB0aGF0IHRyYW5zbGF0ZXMgZHVyaW5nIHNvbWUgZXZlbnQua2NvbnRyaWJ1dG9yomVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb26iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254NUEgc2Vjb25kYXJ5IGNvbnRyaWJ1dG9yIHRvIHRoZSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQua2RhdGVDcmVhdGVkomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGRkYXRlomR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1la2Rlc2NyaXB0aW9ueFNUaGUgZGF0ZSBvbiB3aGljaCB0aGUgQ3JlYXRpdmVXb3JrIHdhcyBjcmVhdGVkIG9yIHRoZSBpdGVtIHdhcyBhZGRlZCB0byBhIERhdGFGZWVkLmtwdWJsaWNhdGlvbqJlb25lT2aCoWQkcmVmd3NjaGVtYTpQdWJsaWNhdGlvbkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmd3NjaGVtYTpQdWJsaWNhdGlvbkV2ZW50a2Rlc2NyaXB0aW9ueC1BIHB1YmxpY2F0aW9uIGV2ZW50IGFzc29jaWF0ZWQgd2l0aCB0aGUgaXRlbS5rc2RQdWJsaXNoZXKiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnkBtEluZGljYXRlcyB0aGUgcGFydHkgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgYW5kIHB1Ymxpc2hpbmcgdGhlIGN1cnJlbnQgc3RydWN0dXJlZCBkYXRhIG1hcmt1cCwgdHlwaWNhbGx5IGluIGNhc2VzIHdoZXJlIHRoZSBzdHJ1Y3R1cmVkIGRhdGEgaXMgZGVyaXZlZCBhdXRvbWF0aWNhbGx5IGZyb20gZXhpc3RpbmcgcHVibGlzaGVkIGNvbnRlbnQgYnV0IHB1Ymxpc2hlZCBvbiBhIGRpZmZlcmVudCBzaXRlLiBGb3IgZXhhbXBsZSwgc3R1ZGVudCBwcm9qZWN0cyBhbmQgb3BlbiBkYXRhIGluaXRpYXRpdmVzIG9mdGVuIHJlLXB1Ymxpc2ggZXhpc3RpbmcgY29udGVudCB3aXRoIG1vcmUgZXhwbGljaXRseSBzdHJ1Y3R1cmVkIG1ldGFkYXRhLiBUaGUKW1tzZFB1Ymxpc2hlcl1dIHByb3BlcnR5IGhlbHBzIG1ha2Ugc3VjaCBwcmFjdGljZXMgbW9yZSBleHBsaWNpdC5rd29ya0V4YW1wbGWiZW9uZU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254gUV4YW1wbGUvaW5zdGFuY2UvcmVhbGl6YXRpb24vZGVyaXZhdGlvbiBvZiB0aGUgY29uY2VwdCBvZiB0aGlzIGNyZWF0aXZlIHdvcmsuIGVnLiBUaGUgcGFwZXJiYWNrIGVkaXRpb24sIGZpcnN0IGVkaXRpb24sIG9yIGVCb29rLmxjb21tZW50Q291bnSiZHR5cGVnaW50ZWdlcmtkZXNjcmlwdGlvbnjSVGhlIG51bWJlciBvZiBjb21tZW50cyB0aGlzIENyZWF0aXZlV29yayAoZS5nLiBBcnRpY2xlLCBRdWVzdGlvbiBvciBBbnN3ZXIpIGhhcyByZWNlaXZlZC4gVGhpcyBpcyBtb3N0IGFwcGxpY2FibGUgdG8gd29ya3MgcHVibGlzaGVkIGluIFdlYiBzaXRlcyB3aXRoIGNvbW1lbnRpbmcgc3lzdGVtOyBhZGRpdGlvbmFsIGNvbW1lbnRzIG1heSBleGlzdCBlbHNld2hlcmUubGRhdGVNb2RpZmllZKJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZaJkdHlwZWZzdHJpbmdmZm9ybWF0aWRhdGUtdGltZWtkZXNjcmlwdGlvbnh2VGhlIGRhdGUgb24gd2hpY2ggdGhlIENyZWF0aXZlV29yayB3YXMgbW9zdCByZWNlbnRseSBtb2RpZmllZCBvciB3aGVuIHRoZSBpdGVtJ3MgZW50cnkgd2FzIG1vZGlmaWVkIHdpdGhpbiBhIERhdGFGZWVkLmxpc0Jhc2VkT25VcmyiZW9uZU9mgqFlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZuc2NoZW1hOlByb2R1Y3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbnNjaGVtYTpQcm9kdWN0a2Rlc2NyaXB0aW9ueKtBIHJlc291cmNlIHRoYXQgd2FzIHVzZWQgaW4gdGhlIGNyZWF0aW9uIG9mIHRoaXMgcmVzb3VyY2UuIFRoaXMgdGVybSBjYW4gYmUgcmVwZWF0ZWQgZm9yIG11bHRpcGxlIHNvdXJjZXMuIEZvciBleGFtcGxlLCBodHRwOi8vZXhhbXBsZS5jb20vZ3JlYXQtbXVsdGlwbGljYXRpb24taW50cm8uaHRtbC5sdGh1bWJuYWlsVXJsomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254KEEgdGh1bWJuYWlsIGltYWdlIHJlbGV2YW50IHRvIHRoZSBUaGluZy5sdGltZVJlcXVpcmVko2R0eXBlZnN0cmluZ2gkY29tbWVudHgbaHR0cHM6Ly9zY2hlbWEub3JnL0R1cmF0aW9ua2Rlc2NyaXB0aW9ueJZBcHByb3hpbWF0ZSBvciB0eXBpY2FsIHRpbWUgaXQgdGFrZXMgdG8gd29yayB3aXRoIG9yIHRocm91Z2ggdGhpcyBsZWFybmluZyByZXNvdXJjZSBmb3IgdGhlIHR5cGljYWwgaW50ZW5kZWQgdGFyZ2V0IGF1ZGllbmNlLCBlLmcuICdQVDMwTScsICdQVDFIMjVNJy5tY29udGVudFJhdGluZ6Jlb25lT2aCoWVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmbXNjaGVtYTpSYXRpbmeiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZtc2NoZW1hOlJhdGluZ2tkZXNjcmlwdGlvbnhBT2ZmaWNpYWwgcmF0aW5nIG9mIGEgcGllY2Ugb2YgY29udGVudOKAlGZvciBleGFtcGxlLCdNUEFBIFBHLTEzJy5tY29weXJpZ2h0WWVhcqJkdHlwZWZudW1iZXJrZGVzY3JpcHRpb254VFRoZSB5ZWFyIGR1cmluZyB3aGljaCB0aGUgY2xhaW1lZCBjb3B5cmlnaHQgZm9yIHRoZSBDcmVhdGl2ZVdvcmsgd2FzIGZpcnN0IGFzc2VydGVkLm1kYXRlUHVibGlzaGVkomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGRkYXRlomR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1la2Rlc2NyaXB0aW9ueCREYXRlIG9mIGZpcnN0IGJyb2FkY2FzdC9wdWJsaWNhdGlvbi5tZGlzY3Vzc2lvblVybKJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueD9BIGxpbmsgdG8gdGhlIHBhZ2UgY29udGFpbmluZyB0aGUgY29tbWVudHMgb2YgdGhlIENyZWF0aXZlV29yay5tZXhhbXBsZU9mV29ya6Jlb25lT2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnhQQSBjcmVhdGl2ZSB3b3JrIHRoYXQgdGhpcyB3b3JrIGlzIGFuIGV4YW1wbGUvaW5zdGFuY2UvcmVhbGl6YXRpb24vZGVyaXZhdGlvbiBvZi5tcmVsZWFzZWRFdmVudKJkJHJlZndzY2hlbWE6UHVibGljYXRpb25FdmVudGtkZXNjcmlwdGlvbnhLVGhlIHBsYWNlIGFuZCB0aW1lIHRoZSByZWxlYXNlIHdhcyBpc3N1ZWQsIGV4cHJlc3NlZCBhcyBhIFB1YmxpY2F0aW9uRXZlbnQubXNjaGVtYVZlcnNpb26iZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkCB0luZGljYXRlcyAoYnkgVVJMIG9yIHN0cmluZykgYSBwYXJ0aWN1bGFyIHZlcnNpb24gb2YgYSBzY2hlbWEgdXNlZCBpbiBzb21lIENyZWF0aXZlV29yay4gVGhpcyBwcm9wZXJ0eSB3YXMgY3JlYXRlZCBwcmltYXJpbHkgdG8KICAgIGluZGljYXRlIHRoZSB1c2Ugb2YgYSBzcGVjaWZpYyBzY2hlbWEub3JnIHJlbGVhc2UsIGUuZy4gYGBgMTAuMGBgYCBhcyBhIHNpbXBsZSBzdHJpbmcsIG9yIG1vcmUgZXhwbGljaXRseSB2aWEgVVJMLCBgYGBodHRwczovL3NjaGVtYS5vcmcvZG9jcy9yZWxlYXNlcy5odG1sI3YxMC4wYGBgLiBUaGVyZSBtYXkgYmUgc2l0dWF0aW9ucyBpbiB3aGljaCBvdGhlciBzY2hlbWFzIG1pZ2h0IHVzZWZ1bGx5IGJlIHJlZmVyZW5jZWQgdGhpcyB3YXksIGUuZy4gYGBgaHR0cDovL2R1YmxpbmNvcmUub3JnL3NwZWNpZmljYXRpb25zL2R1Ymxpbi1jb3JlL2RjZXMvMTk5OS0wNy0wMi9gYGAgYnV0IHRoaXMgaGFzIG5vdCBiZWVuIGNhcmVmdWxseSBleHBsb3JlZCBpbiB0aGUgY29tbXVuaXR5Lm5lZHVjYXRpb25hbFVzZaJlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm1rZGVzY3JpcHRpb254W1RoZSBwdXJwb3NlIG9mIGEgd29yayBpbiB0aGUgY29udGV4dCBvZiBlZHVjYXRpb247IGZvciBleGFtcGxlLCAnYXNzaWdubWVudCcsICdncm91cCB3b3JrJy5uZW5jb2RpbmdGb3JtYXSiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255Ao5NZWRpYSB0eXBlIHR5cGljYWxseSBleHByZXNzZWQgdXNpbmcgYSBNSU1FIGZvcm1hdCAoc2VlIFtJQU5BIHNpdGVdKGh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvbWVkaWEtdHlwZXMvbWVkaWEtdHlwZXMueGh0bWwpIGFuZCBbTUROIHJlZmVyZW5jZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9CYXNpY3Nfb2ZfSFRUUC9NSU1FX3R5cGVzKSkgZS5nLiBhcHBsaWNhdGlvbi96aXAgZm9yIGEgU29mdHdhcmVBcHBsaWNhdGlvbiBiaW5hcnksIGF1ZGlvL21wZWcgZm9yIC5tcDMgZXRjLikuCgpJbiBjYXNlcyB3aGVyZSBhIFtbQ3JlYXRpdmVXb3JrXV0gaGFzIHNldmVyYWwgbWVkaWEgdHlwZSByZXByZXNlbnRhdGlvbnMsIFtbZW5jb2RpbmddXSBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBlYWNoIFtbTWVkaWFPYmplY3RdXSBhbG9uZ3NpZGUgcGFydGljdWxhciBbW2VuY29kaW5nRm9ybWF0XV0gaW5mb3JtYXRpb24uCgpVbnJlZ2lzdGVyZWQgb3IgbmljaGUgZW5jb2RpbmcgYW5kIGZpbGUgZm9ybWF0cyBjYW4gYmUgaW5kaWNhdGVkIGluc3RlYWQgdmlhIHRoZSBtb3N0IGFwcHJvcHJpYXRlIFVSTCwgZS5nLiBkZWZpbmluZyBXZWIgcGFnZSBvciBhIFdpa2lwZWRpYS9XaWtpZGF0YSBlbnRyeS5vW29iamVjdCBPYmplY3RdomVvbmVPZoKhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZ4GHNjaGVtYTpRdWFudGl0YXRpdmVWYWx1ZaJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZngYc2NoZW1hOlF1YW50aXRhdGl2ZVZhbHVla2Rlc2NyaXB0aW9uYG9hZ2dyZWdhdGVSYXRpbmeiZCRyZWZ2c2NoZW1hOkFnZ3JlZ2F0ZVJhdGluZ2tkZXNjcmlwdGlvbnhNVGhlIG92ZXJhbGwgcmF0aW5nLCBiYXNlZCBvbiBhIGNvbGxlY3Rpb24gb2YgcmV2aWV3cyBvciByYXRpbmdzLCBvZiB0aGUgaXRlbS5vYXNzb2NpYXRlZE1lZGlhomQkcmVmcnNjaGVtYTpNZWRpYU9iamVjdGtkZXNjcmlwdGlvbnhXQSBtZWRpYSBvYmplY3QgdGhhdCBlbmNvZGVzIHRoaXMgQ3JlYXRpdmVXb3JrLiBUaGlzIHByb3BlcnR5IGlzIGEgc3lub255bSBmb3IgZW5jb2Rpbmcub2NvbnRlbnRMb2NhdGlvbqJkJHJlZmxzY2hlbWE6UGxhY2VrZGVzY3JpcHRpb254aVRoZSBsb2NhdGlvbiBkZXBpY3RlZCBvciBkZXNjcmliZWQgaW4gdGhlIGNvbnRlbnQuIEZvciBleGFtcGxlLCB0aGUgbG9jYXRpb24gaW4gYSBwaG90b2dyYXBoIG9yIHBhaW50aW5nLm9jb3B5cmlnaHRIb2xkZXKiZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254OlRoZSBwYXJ0eSBob2xkaW5nIHRoZSBsZWdhbCBjb3B5cmlnaHQgdG8gdGhlIENyZWF0aXZlV29yay5vY29weXJpZ2h0Tm90aWNlomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbniUVGV4dCBvZiBhIG5vdGljZSBhcHByb3ByaWF0ZSBmb3IgZGVzY3JpYmluZyB0aGUgY29weXJpZ2h0IGFzcGVjdHMgb2YgdGhpcyBDcmVhdGl2ZSBXb3JrLCBpZGVhbGx5IGluZGljYXRpbmcgdGhlIG93bmVyIG9mIHRoZSBjb3B5cmlnaHQgZm9yIHRoZSBXb3JrLm9jb3VudHJ5T2ZPcmlnaW6iZCRyZWZuc2NoZW1hOkNvdW50cnlrZGVzY3JpcHRpb255AmFUaGUgY291bnRyeSBvZiBvcmlnaW4gb2Ygc29tZXRoaW5nLCBpbmNsdWRpbmcgcHJvZHVjdHMgYXMgd2VsbCBhcyBjcmVhdGl2ZSAgd29ya3Mgc3VjaCBhcyBtb3ZpZSBhbmQgVFYgY29udGVudC4KCkluIHRoZSBjYXNlIG9mIFRWIGFuZCBtb3ZpZSwgdGhpcyB3b3VsZCBiZSB0aGUgY291bnRyeSBvZiB0aGUgcHJpbmNpcGxlIG9mZmljZXMgb2YgdGhlIHByb2R1Y3Rpb24gY29tcGFueSBvciBpbmRpdmlkdWFsIHJlc3BvbnNpYmxlIGZvciB0aGUgbW92aWUuIEZvciBvdGhlciBraW5kcyBvZiBbW0NyZWF0aXZlV29ya11dIGl0IGlzIGRpZmZpY3VsdCB0byBwcm92aWRlIGZ1bGx5IGdlbmVyYWwgZ3VpZGFuY2UsIGFuZCBwcm9wZXJ0aWVzIHN1Y2ggYXMgW1tjb250ZW50TG9jYXRpb25dXSBhbmQgW1tsb2NhdGlvbkNyZWF0ZWRdXSBtYXkgYmUgbW9yZSBhcHBsaWNhYmxlLgoKSW4gdGhlIGNhc2Ugb2YgcHJvZHVjdHMsIHRoZSBjb3VudHJ5IG9mIG9yaWdpbiBvZiB0aGUgcHJvZHVjdC4gVGhlIGV4YWN0IGludGVycHJldGF0aW9uIG9mIHRoaXMgbWF5IHZhcnkgYnkgY29udGV4dCBhbmQgcHJvZHVjdCB0eXBlLCBhbmQgY2Fubm90IGJlIGZ1bGx5IGVudW1lcmF0ZWQgaGVyZS5vbG9jYXRpb25DcmVhdGVkomQkcmVmbHNjaGVtYTpQbGFjZWtkZXNjcmlwdGlvbnh4VGhlIGxvY2F0aW9uIHdoZXJlIHRoZSBDcmVhdGl2ZVdvcmsgd2FzIGNyZWF0ZWQsIHdoaWNoIG1heSBub3QgYmUgdGhlIHNhbWUgYXMgdGhlIGxvY2F0aW9uIGRlcGljdGVkIGluIHRoZSBDcmVhdGl2ZVdvcmsub3NkRGF0ZVB1Ymxpc2hlZKJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGVrZGVzY3JpcHRpb254e0luZGljYXRlcyB0aGUgZGF0ZSBvbiB3aGljaCB0aGUgY3VycmVudCBzdHJ1Y3R1cmVkIGRhdGEgd2FzIGdlbmVyYXRlZCAvIHB1Ymxpc2hlZC4gVHlwaWNhbGx5IHVzZWQgYWxvbmdzaWRlIFtbc2RQdWJsaXNoZXJdXW9zcGF0aWFsQ292ZXJhZ2WiZCRyZWZsc2NoZW1hOlBsYWNla2Rlc2NyaXB0aW9ueQGBVGhlIHNwYXRpYWxDb3ZlcmFnZSBvZiBhIENyZWF0aXZlV29yayBpbmRpY2F0ZXMgdGhlIHBsYWNlKHMpIHdoaWNoIGFyZSB0aGUgZm9jdXMgb2YgdGhlIGNvbnRlbnQuIEl0IGlzIGEgc3VicHJvcGVydHkgb2YKICAgICAgY29udGVudExvY2F0aW9uIGludGVuZGVkIHByaW1hcmlseSBmb3IgbW9yZSB0ZWNobmljYWwgYW5kIGRldGFpbGVkIG1hdGVyaWFscy4gRm9yIGV4YW1wbGUgd2l0aCBhIERhdGFzZXQsIGl0IGluZGljYXRlcwogICAgICBhcmVhcyB0aGF0IHRoZSBkYXRhc2V0IGRlc2NyaWJlczogYSBkYXRhc2V0IG9mIE5ldyBZb3JrIHdlYXRoZXIgd291bGQgaGF2ZSBzcGF0aWFsQ292ZXJhZ2Ugd2hpY2ggd2FzIHRoZSBwbGFjZTogdGhlIHN0YXRlIG9mIE5ldyBZb3JrLm90eXBpY2FsQWdlUmFuZ2WiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueDJUaGUgdHlwaWNhbCBleHBlY3RlZCBhZ2UgcmFuZ2UsIGUuZy4gJzctOScsICcxMS0nLm93b3JrVHJhbnNsYXRpb26iZW9uZU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb2547EEgd29yayB0aGF0IGlzIGEgdHJhbnNsYXRpb24gb2YgdGhlIGNvbnRlbnQgb2YgdGhpcyB3b3JrLiBlLmcuIOilv+mBiuiomCBoYXMgYW4gRW5nbGlzaCB3b3JrVHJhbnNsYXRpb24g4oCcSm91cm5leSB0byB0aGUgV2VzdOKAnSxhIEdlcm1hbiB3b3JrVHJhbnNsYXRpb24g4oCcTW9ua2V5cyBQaWxnZXJmYWhydOKAnSBhbmQgYSBWaWV0bmFtZXNlICB0cmFuc2xhdGlvbiBUw6J5IGR1IGvDvSBiw6xuaCBraOG6o28ucGFjY2Vzc2liaWxpdHlBUEmiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueKtJbmRpY2F0ZXMgdGhhdCB0aGUgcmVzb3VyY2UgaXMgY29tcGF0aWJsZSB3aXRoIHRoZSByZWZlcmVuY2VkIGFjY2Vzc2liaWxpdHkgQVBJIChbV2ViU2NoZW1hcyB3aWtpIGxpc3RzIHBvc3NpYmxlIHZhbHVlc10oaHR0cDovL3d3dy53My5vcmcvd2lraS9XZWJTY2hlbWFzL0FjY2Vzc2liaWxpdHkpKS5wZWR1Y2F0aW9uYWxMZXZlbKJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm1rZGVzY3JpcHRpb254w1RoZSBsZXZlbCBpbiB0ZXJtcyBvZiBwcm9ncmVzc2lvbiB0aHJvdWdoIGFuIGVkdWNhdGlvbmFsIG9yIHRyYWluaW5nIGNvbnRleHQuIEV4YW1wbGVzIG9mIGVkdWNhdGlvbmFsIGxldmVscyBpbmNsdWRlICdiZWdpbm5lcicsICdpbnRlcm1lZGlhdGUnIG9yICdhZHZhbmNlZCcsIGFuZCBmb3JtYWwgc2V0cyBvZiBsZXZlbCBpbmRpY2F0b3JzLnBpc0ZhbWlseUZyaWVuZGx5omR0eXBlZ2Jvb2xlYW5rZGVzY3JpcHRpb254MkluZGljYXRlcyB3aGV0aGVyIHRoaXMgY29udGVudCBpcyBmYW1pbHkgZnJpZW5kbHkucHB1Ymxpc2hlckltcHJpbnSiZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbmtkZXNjcmlwdGlvbngyVGhlIHB1Ymxpc2hpbmcgZGl2aXNpb24gd2hpY2ggcHVibGlzaGVkIHRoZSBjb21pYy5wdGVtcG9yYWxDb3ZlcmFnZaJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1lomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkEK1RoZSB0ZW1wb3JhbENvdmVyYWdlIG9mIGEgQ3JlYXRpdmVXb3JrIGluZGljYXRlcyB0aGUgcGVyaW9kIHRoYXQgdGhlIGNvbnRlbnQgYXBwbGllcyB0bywgaS5lLiB0aGF0IGl0IGRlc2NyaWJlcywgZWl0aGVyIGFzIGEgRGF0ZVRpbWUgb3IgYXMgYSB0ZXh0dWFsIHN0cmluZyBpbmRpY2F0aW5nIGEgdGltZSBwZXJpb2QgaW4gW0lTTyA4NjAxIHRpbWUgaW50ZXJ2YWwgZm9ybWF0XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lX2ludGVydmFscykuIEluCiAgICAgIHRoZSBjYXNlIG9mIGEgRGF0YXNldCBpdCB3aWxsIHR5cGljYWxseSBpbmRpY2F0ZSB0aGUgcmVsZXZhbnQgdGltZSBwZXJpb2QgaW4gYSBwcmVjaXNlIG5vdGF0aW9uIChlLmcuIGZvciBhIDIwMTEgY2Vuc3VzIGRhdGFzZXQsIHRoZSB5ZWFyIDIwMTEgd291bGQgYmUgd3JpdHRlbiAiMjAxMS8yMDEyIikuIE90aGVyIGZvcm1zIG9mIGNvbnRlbnQgZS5nLiBTY2hvbGFybHlBcnRpY2xlLCBCb29rLCBUVlNlcmllcyBvciBUVkVwaXNvZGUgbWF5IGluZGljYXRlIHRoZWlyIHRlbXBvcmFsQ292ZXJhZ2UgaW4gYnJvYWRlciB0ZXJtcyAtIHRleHR1YWxseSBvciB2aWEgd2VsbC1rbm93biBVUkwuCiAgICAgIFdyaXR0ZW4gd29ya3Mgc3VjaCBhcyBib29rcyBtYXkgc29tZXRpbWVzIGhhdmUgcHJlY2lzZSB0ZW1wb3JhbCBjb3ZlcmFnZSB0b28sIGUuZy4gYSB3b3JrIHNldCBpbiAxOTM5IC0gMTk0NSBjYW4gYmUgaW5kaWNhdGVkIGluIElTTyA4NjAxIGludGVydmFsIGZvcm1hdCBmb3JtYXQgdmlhICIxOTM5LzE5NDUiLgoKT3Blbi1lbmRlZCBkYXRlIHJhbmdlcyBjYW4gYmUgd3JpdHRlbiB3aXRoICIuLiIgaW4gcGxhY2Ugb2YgdGhlIGVuZCBkYXRlLiBGb3IgZXhhbXBsZSwgIjIwMTUtMTEvLi4iIGluZGljYXRlcyBhIHJhbmdlIGJlZ2lubmluZyBpbiBOb3ZlbWJlciAyMDE1IGFuZCB3aXRoIG5vIHNwZWNpZmllZCBmaW5hbCBkYXRlLiBUaGlzIGlzIHRlbnRhdGl2ZSBhbmQgbWlnaHQgYmUgdXBkYXRlZCBpbiBmdXR1cmUgd2hlbiBJU08gODYwMSBpcyBvZmZpY2lhbGx5IHVwZGF0ZWQucWFjY291bnRhYmxlUGVyc29uomQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254RlNwZWNpZmllcyB0aGUgUGVyc29uIHRoYXQgaXMgbGVnYWxseSBhY2NvdW50YWJsZSBmb3IgdGhlIENyZWF0aXZlV29yay5xaW50ZXJhY3Rpdml0eVR5cGWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueH5UaGUgcHJlZG9taW5hbnQgbW9kZSBvZiBsZWFybmluZyBzdXBwb3J0ZWQgYnkgdGhlIGxlYXJuaW5nIHJlc291cmNlLiBBY2NlcHRhYmxlIHZhbHVlcyBhcmUgJ2FjdGl2ZScsICdleHBvc2l0aXZlJywgb3IgJ21peGVkJy5xdHJhbnNsYXRpb25PZldvcmuiZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnh1VGhlIHdvcmsgdGhhdCB0aGlzIHdvcmsgaGFzIGJlZW4gdHJhbnNsYXRlZCBmcm9tLiBlLmcuIOeJqeenjei1t+a6kCBpcyBhIHRyYW5zbGF0aW9uT2Yg4oCcT24gdGhlIE9yaWdpbiBvZiBTcGVjaWVz4oCdcmFjcXVpcmVMaWNlbnNlUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254Z0luZGljYXRlcyBhIHBhZ2UgZG9jdW1lbnRpbmcgaG93IGxpY2Vuc2VzIGNhbiBiZSBwdXJjaGFzZWQgb3Igb3RoZXJ3aXNlIGFjcXVpcmVkLCBmb3IgdGhlIGN1cnJlbnQgaXRlbS5yY29uZGl0aW9uc09mQWNjZXNzomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkBokNvbmRpdGlvbnMgdGhhdCBhZmZlY3QgdGhlIGF2YWlsYWJpbGl0eSBvZiwgb3IgbWV0aG9kKHMpIG9mIGFjY2VzcyB0bywgYW4gaXRlbS4gVHlwaWNhbGx5IHVzZWQgZm9yIHJlYWwgd29ybGQgaXRlbXMgc3VjaCBhcyBhbiBbW0FyY2hpdmVDb21wb25lbnRdXSBoZWxkIGJ5IGFuIFtbQXJjaGl2ZU9yZ2FuaXphdGlvbl1dLiBUaGlzIHByb3BlcnR5IGlzIG5vdCBzdWl0YWJsZSBmb3IgdXNlIGFzIGEgZ2VuZXJhbCBXZWIgYWNjZXNzIGNvbnRyb2wgbWVjaGFuaXNtLiBJdCBpcyBleHByZXNzZWQgb25seSBpbiBuYXR1cmFsIGxhbmd1YWdlLlxuXG5Gb3IgZXhhbXBsZSAiQXZhaWxhYmxlIGJ5IGFwcG9pbnRtZW50IGZyb20gdGhlIFJlYWRpbmcgUm9vbSIgb3IgIkFjY2Vzc2libGUgb25seSBmcm9tIGxvZ2dlZC1pbiBhY2NvdW50cyAiLiByY3JlYXRpdmVXb3JrU3RhdHVzomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybWtkZXNjcmlwdGlvbnjZVGhlIHN0YXR1cyBvZiBhIGNyZWF0aXZlIHdvcmsgaW4gdGVybXMgb2YgaXRzIHN0YWdlIGluIGEgbGlmZWN5Y2xlLiBFeGFtcGxlIHRlcm1zIGluY2x1ZGUgSW5jb21wbGV0ZSwgRHJhZnQsIFB1Ymxpc2hlZCwgT2Jzb2xldGUuIFNvbWUgb3JnYW5pemF0aW9ucyBkZWZpbmUgYSBzZXQgb2YgdGVybXMgZm9yIHRoZSBzdGFnZXMgb2YgdGhlaXIgcHVibGljYXRpb24gbGlmZWN5Y2xlLnJpbnRlcnByZXRlZEFzQ2xhaW2iZW9uZU9mgqFkJHJlZmxzY2hlbWE6Q2xhaW2iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZsc2NoZW1hOkNsYWlta2Rlc2NyaXB0aW9ueNBVc2VkIHRvIGluZGljYXRlIGEgc3BlY2lmaWMgY2xhaW0gY29udGFpbmVkLCBpbXBsaWVkLCB0cmFuc2xhdGVkIG9yIHJlZmluZWQgZnJvbSB0aGUgY29udGVudCBvZiBhIFtbTWVkaWFPYmplY3RdXSBvciBvdGhlciBbW0NyZWF0aXZlV29ya11dLiBUaGUgaW50ZXJwcmV0aW5nIHBhcnR5IGNhbiBiZSBpbmRpY2F0ZWQgdXNpbmcgW1tjbGFpbUludGVycHJldGVyXV0ucnNvdXJjZU9yZ2FuaXphdGlvbqJkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9ua2Rlc2NyaXB0aW9ueDlUaGUgT3JnYW5pemF0aW9uIG9uIHdob3NlIGJlaGFsZiB0aGUgY3JlYXRvciB3YXMgd29ya2luZy5zYWNjZXNzaWJpbGl0eUhhemFyZKJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2542UEgY2hhcmFjdGVyaXN0aWMgb2YgdGhlIGRlc2NyaWJlZCByZXNvdXJjZSB0aGF0IGlzIHBoeXNpb2xvZ2ljYWxseSBkYW5nZXJvdXMgdG8gc29tZSB1c2Vycy4gUmVsYXRlZCB0byBXQ0FHIDIuMCBndWlkZWxpbmUgMi4zIChbV2ViU2NoZW1hcyB3aWtpIGxpc3RzIHBvc3NpYmxlIHZhbHVlc10oaHR0cDovL3d3dy53My5vcmcvd2lraS9XZWJTY2hlbWFzL0FjY2Vzc2liaWxpdHkpKS5zYWx0ZXJuYXRpdmVIZWFkbGluZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254JkEgc2Vjb25kYXJ5IHRpdGxlIG9mIHRoZSBDcmVhdGl2ZVdvcmsuc2lzQWNjZXNzaWJsZUZvckZyZWWiZHR5cGVnYm9vbGVhbmtkZXNjcmlwdGlvbnhHQSBmbGFnIHRvIHNpZ25hbCB0aGF0IHRoZSBpdGVtLCBldmVudCwgb3IgcGxhY2UgaXMgYWNjZXNzaWJsZSBmb3IgZnJlZS50YWNjZXNzTW9kZVN1ZmZpY2llbnSiZW9uZU9mgqFkJHJlZm9zY2hlbWE6SXRlbUxpc3SiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZvc2NoZW1hOkl0ZW1MaXN0a2Rlc2NyaXB0aW9ueLtBIGxpc3Qgb2Ygc2luZ2xlIG9yIGNvbWJpbmVkIGFjY2Vzc01vZGVzIHRoYXQgYXJlIHN1ZmZpY2llbnQgdG8gdW5kZXJzdGFuZCBhbGwgdGhlIGludGVsbGVjdHVhbCBjb250ZW50IG9mIGEgcmVzb3VyY2UuIEV4cGVjdGVkIHZhbHVlcyBpbmNsdWRlOiAgYXVkaXRvcnksIHRhY3RpbGUsIHRleHR1YWwsIHZpc3VhbC4KICAgICAgdGFjY2Vzc2liaWxpdHlDb250cm9somVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbniwSWRlbnRpZmllcyBpbnB1dCBtZXRob2RzIHRoYXQgYXJlIHN1ZmZpY2llbnQgdG8gZnVsbHkgY29udHJvbCB0aGUgZGVzY3JpYmVkIHJlc291cmNlIChbV2ViU2NoZW1hcyB3aWtpIGxpc3RzIHBvc3NpYmxlIHZhbHVlc10oaHR0cDovL3d3dy53My5vcmcvd2lraS9XZWJTY2hlbWFzL0FjY2Vzc2liaWxpdHkpKS50YWNjZXNzaWJpbGl0eUZlYXR1cmWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueNFDb250ZW50IGZlYXR1cmVzIG9mIHRoZSByZXNvdXJjZSwgc3VjaCBhcyBhY2Nlc3NpYmxlIG1lZGlhLCBhbHRlcm5hdGl2ZXMgYW5kIHN1cHBvcnRlZCBlbmhhbmNlbWVudHMgZm9yIGFjY2Vzc2liaWxpdHkgKFtXZWJTY2hlbWFzIHdpa2kgbGlzdHMgcG9zc2libGUgdmFsdWVzXShodHRwOi8vd3d3LnczLm9yZy93aWtpL1dlYlNjaGVtYXMvQWNjZXNzaWJpbGl0eSkpLnRhY2Nlc3NpYmlsaXR5U3VtbWFyeaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255AUNBIGh1bWFuLXJlYWRhYmxlIHN1bW1hcnkgb2Ygc3BlY2lmaWMgYWNjZXNzaWJpbGl0eSBmZWF0dXJlcyBvciBkZWZpY2llbmNpZXMsIGNvbnNpc3RlbnQgd2l0aCB0aGUgb3RoZXIgYWNjZXNzaWJpbGl0eSBtZXRhZGF0YSBidXQgZXhwcmVzc2luZyBzdWJ0bGV0aWVzIHN1Y2ggYXMgInNob3J0IGRlc2NyaXB0aW9ucyBhcmUgcHJlc2VudCBidXQgbG9uZyBkZXNjcmlwdGlvbnMgd2lsbCBiZSBuZWVkZWQgZm9yIG5vbi12aXN1YWwgdXNlcnMiIG9yICJzaG9ydCBkZXNjcmlwdGlvbnMgYXJlIHByZXNlbnQgYW5kIG5vIGxvbmcgZGVzY3JpcHRpb25zIGFyZSBuZWVkZWQuInRjb250ZW50UmVmZXJlbmNlVGltZaNkdHlwZWZzdHJpbmdmZm9ybWF0aWRhdGUtdGltZWtkZXNjcmlwdGlvbniRVGhlIHNwZWNpZmljIHRpbWUgZGVzY3JpYmVkIGJ5IGEgY3JlYXRpdmUgd29yaywgZm9yIHdvcmtzIChlLmcuIGFydGljbGVzLCB2aWRlbyBvYmplY3RzIGV0Yy4pIHRoYXQgZW1waGFzaXNlIGEgcGFydGljdWxhciBtb21lbnQgd2l0aGluIGFuIEV2ZW50LnRlZHVjYXRpb25hbEFsaWdubWVudKJlb25lT2aCoWQkcmVmdnNjaGVtYTpBbGlnbm1lbnRPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ2c2NoZW1hOkFsaWdubWVudE9iamVjdGtkZXNjcmlwdGlvbnj0QW4gYWxpZ25tZW50IHRvIGFuIGVzdGFibGlzaGVkIGVkdWNhdGlvbmFsIGZyYW1ld29yay4KClRoaXMgcHJvcGVydHkgc2hvdWxkIG5vdCBiZSB1c2VkIHdoZXJlIHRoZSBuYXR1cmUgb2YgdGhlIGFsaWdubWVudCBjYW4gYmUgZGVzY3JpYmVkIHVzaW5nIGEgc2ltcGxlIHByb3BlcnR5LCBmb3IgZXhhbXBsZSB0byBleHByZXNzIHRoYXQgYSByZXNvdXJjZSBbW3RlYWNoZXNdXSBvciBbW2Fzc2Vzc2VzXV0gYSBjb21wZXRlbmN5LnRpbnRlcmFjdGlvblN0YXRpc3RpY6JkJHJlZngZc2NoZW1hOkludGVyYWN0aW9uQ291bnRlcmtkZXNjcmlwdGlvbnicVGhlIG51bWJlciBvZiBpbnRlcmFjdGlvbnMgZm9yIHRoZSBDcmVhdGl2ZVdvcmsgdXNpbmcgdGhlIFdlYlNpdGUgb3IgU29mdHdhcmVBcHBsaWNhdGlvbi4gVGhlIG1vc3Qgc3BlY2lmaWMgY2hpbGQgdHlwZSBvZiBJbnRlcmFjdGlvbkNvdW50ZXIgc2hvdWxkIGJlIHVzZWQudGxlYXJuaW5nUmVzb3VyY2VUeXBlomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybWtkZXNjcmlwdGlvbnhqVGhlIHByZWRvbWluYW50IHR5cGUgb3Iga2luZCBjaGFyYWN0ZXJpemluZyB0aGUgbGVhcm5pbmcgcmVzb3VyY2UuIEZvciBleGFtcGxlLCAncHJlc2VudGF0aW9uJywgJ2hhbmRvdXQnLnRwdWJsaXNoaW5nUHJpbmNpcGxlc6JlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb255AmFUaGUgcHVibGlzaGluZ1ByaW5jaXBsZXMgcHJvcGVydHkgaW5kaWNhdGVzICh0eXBpY2FsbHkgdmlhIFtbVVJMXV0pIGEgZG9jdW1lbnQgZGVzY3JpYmluZyB0aGUgZWRpdG9yaWFsIHByaW5jaXBsZXMgb2YgYW4gW1tPcmdhbml6YXRpb25dXSAob3IgaW5kaXZpZHVhbCBlLmcuIGEgW1tQZXJzb25dXSB3cml0aW5nIGEgYmxvZykgdGhhdCByZWxhdGUgdG8gdGhlaXIgYWN0aXZpdGllcyBhcyBhIHB1Ymxpc2hlciwgZS5nLiBldGhpY3Mgb3IgZGl2ZXJzaXR5IHBvbGljaWVzLiBXaGVuIGFwcGxpZWQgdG8gYSBbW0NyZWF0aXZlV29ya11dIChlLmcuIFtbTmV3c0FydGljbGVdXSkgdGhlIHByaW5jaXBsZXMgYXJlIHRob3NlIG9mIHRoZSBwYXJ0eSBwcmltYXJpbHkgcmVzcG9uc2libGUgZm9yIHRoZSBjcmVhdGlvbiBvZiB0aGUgW1tDcmVhdGl2ZVdvcmtdXS4KCldoaWxlIHN1Y2ggcG9saWNpZXMgYXJlIG1vc3QgdHlwaWNhbGx5IGV4cHJlc3NlZCBpbiBuYXR1cmFsIGxhbmd1YWdlLCBzb21ldGltZXMgcmVsYXRlZCBpbmZvcm1hdGlvbiAoZS5nLiBpbmRpY2F0aW5nIGEgW1tmdW5kZXJdXSkgY2FuIGJlIGV4cHJlc3NlZCB1c2luZyBzY2hlbWEub3JnIHRlcm1pbm9sb2d5LgprZGVmaW5pdGlvbnOhZVRoaW5npGR0eXBlZm9iamVjdGV0aXRsZWVUaGluZ2pwcm9wZXJ0aWVzrmN1cmyjZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb25wVVJMIG9mIHRoZSBpdGVtLmRuYW1lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnVUaGUgbmFtZSBvZiB0aGUgaXRlbS5lQHR5cGWhZHR5cGVmc3RyaW5nZWltYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb254UUFuIGltYWdlIG9mIHRoZSBpdGVtLiBUaGlzIGNhbiBiZSBhIFtbVVJMXV0gb3IgYSBmdWxseSBkZXNjcmliZWQgW1tJbWFnZU9iamVjdF1dLmZzYW1lQXOiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnidVVJMIG9mIGEgcmVmZXJlbmNlIFdlYiBwYWdlIHRoYXQgdW5hbWJpZ3VvdXNseSBpbmRpY2F0ZXMgdGhlIGl0ZW0ncyBpZGVudGl0eS4gRS5nLiB0aGUgVVJMIG9mIHRoZSBpdGVtJ3MgV2lraXBlZGlhIHBhZ2UsIFdpa2lkYXRhIGVudHJ5LCBvciBvZmZpY2lhbCB3ZWJzaXRlLmhAY29udGV4dKFkdHlwZWZzdHJpbmdpc3ViamVjdE9momVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueClBIENyZWF0aXZlV29yayBvciBFdmVudCBhYm91dCB0aGlzIFRoaW5nLmppZGVudGlmaWVyomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVla2Rlc2NyaXB0aW9ueQFJVGhlIGlkZW50aWZpZXIgcHJvcGVydHkgcmVwcmVzZW50cyBhbnkga2luZCBvZiBpZGVudGlmaWVyIGZvciBhbnkga2luZCBvZiBbW1RoaW5nXV0sIHN1Y2ggYXMgSVNCTnMsIEdUSU4gY29kZXMsIFVVSURzIGV0Yy4gU2NoZW1hLm9yZyBwcm92aWRlcyBkZWRpY2F0ZWQgcHJvcGVydGllcyBmb3IgcmVwcmVzZW50aW5nIG1hbnkgb2YgdGhlc2UsIGVpdGhlciBhcyB0ZXh0dWFsIHN0cmluZ3Mgb3IgYXMgVVJMIChVUkkpIGxpbmtzLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI2lkZW50aWZpZXJCZykgZm9yIG1vcmUgZGV0YWlscy4KICAgICAgICBrZGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueBpBIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtLm1hbHRlcm5hdGVOYW1lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnZBbiBhbGlhcyBmb3IgdGhlIGl0ZW0ubmFkZGl0aW9uYWxUeXBlomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb255AZ9BbiBhZGRpdGlvbmFsIHR5cGUgZm9yIHRoZSBpdGVtLCB0eXBpY2FsbHkgdXNlZCBmb3IgYWRkaW5nIG1vcmUgc3BlY2lmaWMgdHlwZXMgZnJvbSBleHRlcm5hbCB2b2NhYnVsYXJpZXMgaW4gbWljcm9kYXRhIHN5bnRheC4gVGhpcyBpcyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHNvbWV0aGluZyBhbmQgYSBjbGFzcyB0aGF0IHRoZSB0aGluZyBpcyBpbi4gSW4gUkRGYSBzeW50YXgsIGl0IGlzIGJldHRlciB0byB1c2UgdGhlIG5hdGl2ZSBSREZhIHN5bnRheCAtIHRoZSAndHlwZW9mJyBhdHRyaWJ1dGUgLSBmb3IgbXVsdGlwbGUgdHlwZXMuIFNjaGVtYS5vcmcgdG9vbHMgbWF5IGhhdmUgb25seSB3ZWFrZXIgdW5kZXJzdGFuZGluZyBvZiBleHRyYSB0eXBlcywgaW4gcGFydGljdWxhciB0aG9zZSBkZWZpbmVkIGV4dGVybmFsbHkub3BvdGVudGlhbEFjdGlvbqJlb25lT2aCoWQkcmVmbXNjaGVtYTpBY3Rpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOkFjdGlvbmtkZXNjcmlwdGlvbnhySW5kaWNhdGVzIGEgcG90ZW50aWFsIEFjdGlvbiwgd2hpY2ggZGVzY3JpYmVzIGFuIGlkZWFsaXplZCBhY3Rpb24gaW4gd2hpY2ggdGhpcyB0aGluZyB3b3VsZCBwbGF5IGFuICdvYmplY3QnIHJvbGUucG1haW5FbnRpdHlPZlBhZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueLBJbmRpY2F0ZXMgYSBwYWdlIChvciBvdGhlciBDcmVhdGl2ZVdvcmspIGZvciB3aGljaCB0aGlzIHRoaW5nIGlzIHRoZSBtYWluIGVudGl0eSBiZWluZyBkZXNjcmliZWQuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjbWFpbkVudGl0eUJhY2tncm91bmQpIGZvciBkZXRhaWxzLngZZGlzYW1iaWd1YXRpbmdEZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2547EEgc3ViIHByb3BlcnR5IG9mIGRlc2NyaXB0aW9uLiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGZyb20gb3RoZXIsIHNpbWlsYXIgaXRlbXMuIEluZm9ybWF0aW9uIGZyb20gb3RoZXIgcHJvcGVydGllcyAoaW4gcGFydGljdWxhciwgbmFtZSkgbWF5IGJlIG5lY2Vzc2FyeSBmb3IgdGhlIGRlc2NyaXB0aW9uIHRvIGJlIHVzZWZ1bCBmb3IgZGlzYW1iaWd1YXRpb24ua2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5rZGVzY3JpcHRpb254ZVRoZSBtb3N0IGdlbmVyaWMga2luZCBvZiBjcmVhdGl2ZSB3b3JrLCBpbmNsdWRpbmcgYm9va3MsIG1vdmllcywgcGhvdG9ncmFwaHMsIHNvZnR3YXJlIHByb2dyYW1zLCBldGMuZmhlYWRlcqJmdW5pcXVlcG42NEhiYUdqZlBuUHZ0dWtrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1fry0u1uking7ron88uytbq3zgzj6ubj1oow6mak6hc2z1zb6ye3h1c"},"kjzl6cwe1jw148auur9kah2xf1qoqakgoclzatnobb5tpnh3xozksfrot5hyqf8":{"alias":"QuantitativeValue","commits":[{"jws":{"payload":"AXESILLu0y-Ufk4qgkcul3zwYt06kBN_J3XelvpJqM-cdA_P","signatures":[{"signature":"G3OossxlGpSA_P0LuNBg_zSFtxfJC4Bi3c8oKl5hjgiLU0fvUzO-g5nZMi1ck8bOQr86zCaUVGhxb-D_EfCdCg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifs53js7fd6jyvierzos56payw5hkibg7zhoxpjn6sjvdhzy5apz4"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fry317epw0ahgtn0druz5il5ob0ywcwfdfaexnzlozu84wfb3qzw8w"},"kjzl6cwe1jw149h6ftaw43h2brf8ra5b2xgxpy946rlr962xchea4pplaftzm3x":{"alias":"PropertyValue","commits":[{"jws":{"payload":"AXESIKBQkLCqSTlfGsT2XJsOrUmT6c23_DuWd73AmFWmeevB","signatures":[{"signature":"qUKD8mA-pu1U3pm22ZAmL3fnEGKAru44eW7BlVFOz4SgmYjYxkBkQOewR390dyYdombg0aCMdwcQcRXwlF8ZCg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifakcilbksjhfprvrhwlsnq5lkjspu43n74holhppoatbk2m6plye"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frybe5sgdgd4pcjn0ea05qsu0fsjkts4apt78t4rpk1itze8l997uo"},"kjzl6cwe1jw145uxx6wzi1667aqbkhmaj8wcwj88zqm7zovz0hpzwshr89mot0q":{"alias":"StructuredValue","commits":[{"jws":{"payload":"AXESIAjyi7aZQ33PrWH942hRj9VI5lwuEQMQo89eYNT-3UtF","signatures":[{"signature":"F0PLjM06hWEXYAjc6d1u5N2is8xFjvYwZ9820n7vRZbg95f69wIdytu81kXen9P4GeDbJBo1EmvXkcgjZ6vRAQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiai6kf3ngkdpxh22yp54nufdd6vjdtfylqramikht26mdkp5xkliu"},"linkedBlock":"omRkYXRhpmR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlb1N0cnVjdHVyZWRWYWx1ZWckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNrZGVmaW5pdGlvbnOiZVRoaW5npGR0eXBlZm9iamVjdGV0aXRsZWVUaGluZ2pwcm9wZXJ0aWVzrmN1cmyjZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb25wVVJMIG9mIHRoZSBpdGVtLmRuYW1lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnVUaGUgbmFtZSBvZiB0aGUgaXRlbS5lQHR5cGWhZHR5cGVmc3RyaW5nZWltYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb254UUFuIGltYWdlIG9mIHRoZSBpdGVtLiBUaGlzIGNhbiBiZSBhIFtbVVJMXV0gb3IgYSBmdWxseSBkZXNjcmliZWQgW1tJbWFnZU9iamVjdF1dLmZzYW1lQXOiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnidVVJMIG9mIGEgcmVmZXJlbmNlIFdlYiBwYWdlIHRoYXQgdW5hbWJpZ3VvdXNseSBpbmRpY2F0ZXMgdGhlIGl0ZW0ncyBpZGVudGl0eS4gRS5nLiB0aGUgVVJMIG9mIHRoZSBpdGVtJ3MgV2lraXBlZGlhIHBhZ2UsIFdpa2lkYXRhIGVudHJ5LCBvciBvZmZpY2lhbCB3ZWJzaXRlLmhAY29udGV4dKFkdHlwZWZzdHJpbmdpc3ViamVjdE9momVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueClBIENyZWF0aXZlV29yayBvciBFdmVudCBhYm91dCB0aGlzIFRoaW5nLmppZGVudGlmaWVyomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVla2Rlc2NyaXB0aW9ueQFJVGhlIGlkZW50aWZpZXIgcHJvcGVydHkgcmVwcmVzZW50cyBhbnkga2luZCBvZiBpZGVudGlmaWVyIGZvciBhbnkga2luZCBvZiBbW1RoaW5nXV0sIHN1Y2ggYXMgSVNCTnMsIEdUSU4gY29kZXMsIFVVSURzIGV0Yy4gU2NoZW1hLm9yZyBwcm92aWRlcyBkZWRpY2F0ZWQgcHJvcGVydGllcyBmb3IgcmVwcmVzZW50aW5nIG1hbnkgb2YgdGhlc2UsIGVpdGhlciBhcyB0ZXh0dWFsIHN0cmluZ3Mgb3IgYXMgVVJMIChVUkkpIGxpbmtzLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI2lkZW50aWZpZXJCZykgZm9yIG1vcmUgZGV0YWlscy4KICAgICAgICBrZGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueBpBIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtLm1hbHRlcm5hdGVOYW1lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnZBbiBhbGlhcyBmb3IgdGhlIGl0ZW0ubmFkZGl0aW9uYWxUeXBlomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb255AZ9BbiBhZGRpdGlvbmFsIHR5cGUgZm9yIHRoZSBpdGVtLCB0eXBpY2FsbHkgdXNlZCBmb3IgYWRkaW5nIG1vcmUgc3BlY2lmaWMgdHlwZXMgZnJvbSBleHRlcm5hbCB2b2NhYnVsYXJpZXMgaW4gbWljcm9kYXRhIHN5bnRheC4gVGhpcyBpcyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHNvbWV0aGluZyBhbmQgYSBjbGFzcyB0aGF0IHRoZSB0aGluZyBpcyBpbi4gSW4gUkRGYSBzeW50YXgsIGl0IGlzIGJldHRlciB0byB1c2UgdGhlIG5hdGl2ZSBSREZhIHN5bnRheCAtIHRoZSAndHlwZW9mJyBhdHRyaWJ1dGUgLSBmb3IgbXVsdGlwbGUgdHlwZXMuIFNjaGVtYS5vcmcgdG9vbHMgbWF5IGhhdmUgb25seSB3ZWFrZXIgdW5kZXJzdGFuZGluZyBvZiBleHRyYSB0eXBlcywgaW4gcGFydGljdWxhciB0aG9zZSBkZWZpbmVkIGV4dGVybmFsbHkub3BvdGVudGlhbEFjdGlvbqJlb25lT2aCoWQkcmVmbXNjaGVtYTpBY3Rpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOkFjdGlvbmtkZXNjcmlwdGlvbnhySW5kaWNhdGVzIGEgcG90ZW50aWFsIEFjdGlvbiwgd2hpY2ggZGVzY3JpYmVzIGFuIGlkZWFsaXplZCBhY3Rpb24gaW4gd2hpY2ggdGhpcyB0aGluZyB3b3VsZCBwbGF5IGFuICdvYmplY3QnIHJvbGUucG1haW5FbnRpdHlPZlBhZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueLBJbmRpY2F0ZXMgYSBwYWdlIChvciBvdGhlciBDcmVhdGl2ZVdvcmspIGZvciB3aGljaCB0aGlzIHRoaW5nIGlzIHRoZSBtYWluIGVudGl0eSBiZWluZyBkZXNjcmliZWQuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjbWFpbkVudGl0eUJhY2tncm91bmQpIGZvciBkZXRhaWxzLngZZGlzYW1iaWd1YXRpbmdEZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2547EEgc3ViIHByb3BlcnR5IG9mIGRlc2NyaXB0aW9uLiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGZyb20gb3RoZXIsIHNpbWlsYXIgaXRlbXMuIEluZm9ybWF0aW9uIGZyb20gb3RoZXIgcHJvcGVydGllcyAoaW4gcGFydGljdWxhciwgbmFtZSkgbWF5IGJlIG5lY2Vzc2FyeSBmb3IgdGhlIGRlc2NyaXB0aW9uIHRvIGJlIHVzZWZ1bCBmb3IgZGlzYW1iaWd1YXRpb24ua2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5qSW50YW5naWJsZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmcyMvZGVmaW5pdGlvbnMvVGhpbmdrZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmV0aXRsZWpJbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5rZGVzY3JpcHRpb254l1N0cnVjdHVyZWQgdmFsdWVzIGFyZSB1c2VkIHdoZW4gdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgaGFzIGEgbW9yZSBjb21wbGV4IHN0cnVjdHVyZSB0aGFuIHNpbXBseSBiZWluZyBhIHRleHR1YWwgdmFsdWUgb3IgYSByZWZlcmVuY2UgdG8gYW5vdGhlciB0aGluZy5maGVhZGVyomZ1bmlxdWVwL2ROZmlOY2ZKSGdPaWR6M2tjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frxlo1816kg8bw3wb69paiwva3rcqny5a0tszczi0vd6m9mshced4w"},"kjzl6cwe1jw149yz384sdnug2dciklwfiw312uqrc9mbbgkiygweiahky49jsy0":{"alias":"ImageObject","commits":[{"jws":{"payload":"AXESILbSbd67bYY_DLStfn_GGNoXhP_EaHKTJntKA5-k480G","signatures":[{"signature":"FH7atGFfMkQgzYpdEzlGKY6BYoEbaEobLpsSLe1zLO4Nc1DOleqq6gNlLm4MpC0yItLyqGZi57HkZYxGTeMiDQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifw2jw55o3nqy7qznfnpz74mgg2c6cp7rdiokjsm62kaop2jy6nay"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GSMvZGVmaW5pdGlvbnMvTWVkaWFPYmplY3RrZGVzY3JpcHRpb255AXdBIG1lZGlhIG9iamVjdCwgc3VjaCBhcyBhbiBpbWFnZSwgdmlkZW8sIG9yIGF1ZGlvIG9iamVjdCBlbWJlZGRlZCBpbiBhIHdlYiBwYWdlIG9yIGEgZG93bmxvYWRhYmxlIGRhdGFzZXQgaS5lLiBEYXRhRG93bmxvYWQuIE5vdGUgdGhhdCBhIGNyZWF0aXZlIHdvcmsgbWF5IGhhdmUgbWFueSBtZWRpYSBvYmplY3RzIGFzc29jaWF0ZWQgd2l0aCBpdCBvbiB0aGUgc2FtZSB3ZWIgcGFnZS4gRm9yIGV4YW1wbGUsIGEgcGFnZSBhYm91dCBhIHNpbmdsZSBzb25nIChNdXNpY1JlY29yZGluZykgbWF5IGhhdmUgYSBtdXNpYyB2aWRlbyAoVmlkZW9PYmplY3QpLCBhbmQgYSBoaWdoIGFuZCBsb3cgYmFuZHdpZHRoIGF1ZGlvIHN0cmVhbSAoMiBBdWRpb09iamVjdCdzKS5ldGl0bGVrSW1hZ2VPYmplY3RnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjanByb3BlcnRpZXOlZ2NhcHRpb26iZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOk1lZGlhT2JqZWN0a2Rlc2NyaXB0aW9ueJNUaGUgY2FwdGlvbiBmb3IgdGhpcyBvYmplY3QuIEZvciBkb3dubG9hZGFibGUgbWFjaGluZSBmb3JtYXRzIChjbG9zZWQgY2FwdGlvbiwgc3VidGl0bGVzIGV0Yy4pIHVzZSBNZWRpYU9iamVjdCBhbmQgaW5kaWNhdGUgdGhlIFtbZW5jb2RpbmdGb3JtYXRdXS5oZXhpZkRhdGGiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb254GmV4aWYgZGF0YSBmb3IgdGhpcyBvYmplY3QuaXRodW1ibmFpbKJkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb254JlRodW1ibmFpbCBpbWFnZSBmb3IgYW4gaW1hZ2Ugb3IgdmlkZW8uc2VtYmVkZGVkVGV4dENhcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueExSZXByZXNlbnRzIHRleHR1YWwgY2FwdGlvbmluZyBmcm9tIGEgW1tNZWRpYU9iamVjdF1dLCBlLmcuIHRleHQgb2YgYSAnbWVtZScudHJlcHJlc2VudGF0aXZlT2ZQYWdlomR0eXBlZ2Jvb2xlYW5rZGVzY3JpcHRpb254SkluZGljYXRlcyB3aGV0aGVyIHRoaXMgaW1hZ2UgaXMgcmVwcmVzZW50YXRpdmUgb2YgdGhlIGNvbnRlbnQgb2YgdGhlIHBhZ2Uua2RlZmluaXRpb25zo2VUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0ua01lZGlhT2JqZWN0pWR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GiMvZGVmaW5pdGlvbnMvQ3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueGVUaGUgbW9zdCBnZW5lcmljIGtpbmQgb2YgY3JlYXRpdmUgd29yaywgaW5jbHVkaW5nIGJvb2tzLCBtb3ZpZXMsIHBob3RvZ3JhcGhzLCBzb2Z0d2FyZSBwcm9ncmFtcywgZXRjLmV0aXRsZWtNZWRpYU9iamVjdGpwcm9wZXJ0aWVztGV3aWR0aKJlYW55T2aComR0eXBlZnN0cmluZ2gkY29tbWVudHgbaHR0cHM6Ly9zY2hlbWEub3JnL0Rpc3RhbmNloWQkcmVmeBhzY2hlbWE6UXVhbnRpdGF0aXZlVmFsdWVrZGVzY3JpcHRpb252VGhlIHdpZHRoIG9mIHRoZSBpdGVtLmZoZWlnaHSiZWFueU9mgqJkdHlwZWZzdHJpbmdoJGNvbW1lbnR4G2h0dHBzOi8vc2NoZW1hLm9yZy9EaXN0YW5jZaFkJHJlZngYc2NoZW1hOlF1YW50aXRhdGl2ZVZhbHVla2Rlc2NyaXB0aW9ud1RoZSBoZWlnaHQgb2YgdGhlIGl0ZW0uZnNoYTI1NqJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254xlRoZSBbU0hBLTJdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NIQS0yKSBTSEEyNTYgaGFzaCBvZiB0aGUgY29udGVudCBvZiB0aGUgaXRlbS4gRm9yIGV4YW1wbGUsIGEgemVyby1sZW5ndGggaW5wdXQgaGFzIHZhbHVlICdlM2IwYzQ0Mjk4ZmMxYzE0OWFmYmY0Yzg5OTZmYjkyNDI3YWU0MWU0NjQ5YjkzNGNhNDk1OTkxYjc4NTJiODU1J2diaXRyYXRlomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnggVGhlIGJpdHJhdGUgb2YgdGhlIG1lZGlhIG9iamVjdC5nZW5kVGltZaJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1lomR0eXBlZnN0cmluZ2Zmb3JtYXRkdGltZWtkZXNjcmlwdGlvbnkCB1RoZSBlbmRUaW1lIG9mIHNvbWV0aGluZy4gRm9yIGEgcmVzZXJ2ZWQgZXZlbnQgb3Igc2VydmljZSAoZS5nLiBGb29kRXN0YWJsaXNobWVudFJlc2VydmF0aW9uKSwgdGhlIHRpbWUgdGhhdCBpdCBpcyBleHBlY3RlZCB0byBlbmQuIEZvciBhY3Rpb25zIHRoYXQgc3BhbiBhIHBlcmlvZCBvZiB0aW1lLCB3aGVuIHRoZSBhY3Rpb24gd2FzIHBlcmZvcm1lZC4gZS5nLiBKb2huIHdyb3RlIGEgYm9vayBmcm9tIEphbnVhcnkgdG8gKkRlY2VtYmVyKi4gRm9yIG1lZGlhLCBpbmNsdWRpbmcgYXVkaW8gYW5kIHZpZGVvLCBpdCdzIHRoZSB0aW1lIG9mZnNldCBvZiB0aGUgZW5kIG9mIGEgY2xpcCB3aXRoaW4gYSBsYXJnZXIgZmlsZS5cblxuTm90ZSB0aGF0IEV2ZW50IHVzZXMgc3RhcnREYXRlL2VuZERhdGUgaW5zdGVhZCBvZiBzdGFydFRpbWUvZW5kVGltZSwgZXZlbiB3aGVuIGRlc2NyaWJpbmcgZGF0ZXMgd2l0aCB0aW1lcy4gVGhpcyBzaXR1YXRpb24gbWF5IGJlIGNsYXJpZmllZCBpbiBmdXR1cmUgcmV2aXNpb25zLmhkdXJhdGlvbqNkdHlwZWZzdHJpbmdoJGNvbW1lbnR4G2h0dHBzOi8vc2NoZW1hLm9yZy9EdXJhdGlvbmtkZXNjcmlwdGlvbniAVGhlIGR1cmF0aW9uIG9mIHRoZSBpdGVtIChtb3ZpZSwgYXVkaW8gcmVjb3JkaW5nLCBldmVudCwgZXRjLikgaW4gW0lTTyA4NjAxIGRhdGUgZm9ybWF0XShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxKS5oZW1iZWRVcmyjZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254w0EgVVJMIHBvaW50aW5nIHRvIGEgcGxheWVyIGZvciBhIHNwZWNpZmljIHZpZGVvLiBJbiBnZW5lcmFsLCB0aGlzIGlzIHRoZSBpbmZvcm1hdGlvbiBpbiB0aGUgYGBgc3JjYGBgIGVsZW1lbnQgb2YgYW4gYGBgZW1iZWRgYGAgdGFnIGFuZCBzaG91bGQgbm90IGJlIHRoZSBzYW1lIGFzIHRoZSBjb250ZW50IG9mIHRoZSBgYGBsb2NgYGAgdGFnLmlzdGFydFRpbWWiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0aWRhdGUtdGltZaJkdHlwZWZzdHJpbmdmZm9ybWF0ZHRpbWVrZGVzY3JpcHRpb255Ag1UaGUgc3RhcnRUaW1lIG9mIHNvbWV0aGluZy4gRm9yIGEgcmVzZXJ2ZWQgZXZlbnQgb3Igc2VydmljZSAoZS5nLiBGb29kRXN0YWJsaXNobWVudFJlc2VydmF0aW9uKSwgdGhlIHRpbWUgdGhhdCBpdCBpcyBleHBlY3RlZCB0byBzdGFydC4gRm9yIGFjdGlvbnMgdGhhdCBzcGFuIGEgcGVyaW9kIG9mIHRpbWUsIHdoZW4gdGhlIGFjdGlvbiB3YXMgcGVyZm9ybWVkLiBlLmcuIEpvaG4gd3JvdGUgYSBib29rIGZyb20gKkphbnVhcnkqIHRvIERlY2VtYmVyLiBGb3IgbWVkaWEsIGluY2x1ZGluZyBhdWRpbyBhbmQgdmlkZW8sIGl0J3MgdGhlIHRpbWUgb2Zmc2V0IG9mIHRoZSBzdGFydCBvZiBhIGNsaXAgd2l0aGluIGEgbGFyZ2VyIGZpbGUuXG5cbk5vdGUgdGhhdCBFdmVudCB1c2VzIHN0YXJ0RGF0ZS9lbmREYXRlIGluc3RlYWQgb2Ygc3RhcnRUaW1lL2VuZFRpbWUsIGV2ZW4gd2hlbiBkZXNjcmliaW5nIGRhdGVzIHdpdGggdGltZXMuIFRoaXMgc2l0dWF0aW9uIG1heSBiZSBjbGFyaWZpZWQgaW4gZnV0dXJlIHJldmlzaW9ucy5qY29udGVudFVybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnhLQWN0dWFsIGJ5dGVzIG9mIHRoZSBtZWRpYSBvYmplY3QsIGZvciBleGFtcGxlIHRoZSBpbWFnZSBmaWxlIG9yIHZpZGVvIGZpbGUuanBsYXllclR5cGWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueDlQbGF5ZXIgdHlwZSByZXF1aXJlZOKAlGZvciBleGFtcGxlLCBGbGFzaCBvciBTaWx2ZXJsaWdodC5qdXBsb2FkRGF0ZaNkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGVrZGVzY3JpcHRpb254NkRhdGUgd2hlbiB0aGlzIG1lZGlhIG9iamVjdCB3YXMgdXBsb2FkZWQgdG8gdGhpcyBzaXRlLmtjb250ZW50U2l6ZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254H0ZpbGUgc2l6ZSBpbiAobWVnYS9raWxvKSBieXRlcy5uZW5jb2RpbmdGb3JtYXSiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255Ao5NZWRpYSB0eXBlIHR5cGljYWxseSBleHByZXNzZWQgdXNpbmcgYSBNSU1FIGZvcm1hdCAoc2VlIFtJQU5BIHNpdGVdKGh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvbWVkaWEtdHlwZXMvbWVkaWEtdHlwZXMueGh0bWwpIGFuZCBbTUROIHJlZmVyZW5jZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9CYXNpY3Nfb2ZfSFRUUC9NSU1FX3R5cGVzKSkgZS5nLiBhcHBsaWNhdGlvbi96aXAgZm9yIGEgU29mdHdhcmVBcHBsaWNhdGlvbiBiaW5hcnksIGF1ZGlvL21wZWcgZm9yIC5tcDMgZXRjLikuCgpJbiBjYXNlcyB3aGVyZSBhIFtbQ3JlYXRpdmVXb3JrXV0gaGFzIHNldmVyYWwgbWVkaWEgdHlwZSByZXByZXNlbnRhdGlvbnMsIFtbZW5jb2RpbmddXSBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBlYWNoIFtbTWVkaWFPYmplY3RdXSBhbG9uZ3NpZGUgcGFydGljdWxhciBbW2VuY29kaW5nRm9ybWF0XV0gaW5mb3JtYXRpb24uCgpVbnJlZ2lzdGVyZWQgb3IgbmljaGUgZW5jb2RpbmcgYW5kIGZpbGUgZm9ybWF0cyBjYW4gYmUgaW5kaWNhdGVkIGluc3RlYWQgdmlhIHRoZSBtb3N0IGFwcHJvcHJpYXRlIFVSTCwgZS5nLiBkZWZpbmluZyBXZWIgcGFnZSBvciBhIFdpa2lwZWRpYS9XaWtpZGF0YSBlbnRyeS5ucmVnaW9uc0FsbG93ZWSiZCRyZWZsc2NoZW1hOlBsYWNla2Rlc2NyaXB0aW9ueLhUaGUgcmVnaW9ucyB3aGVyZSB0aGUgbWVkaWEgaXMgYWxsb3dlZC4gSWYgbm90IHNwZWNpZmllZCwgdGhlbiBpdCdzIGFzc3VtZWQgdG8gYmUgYWxsb3dlZCBldmVyeXdoZXJlLiBTcGVjaWZ5IHRoZSBjb3VudHJpZXMgaW4gW0lTTyAzMTY2IGZvcm1hdF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fMzE2NikucGluZWxpZ2libGVSZWdpb26iZWFueU9mg6FkdHlwZWZzdHJpbmehZCRyZWZvc2NoZW1hOkdlb1NoYXBloWQkcmVmbHNjaGVtYTpQbGFjZWtkZXNjcmlwdGlvbnkBEFRoZSBJU08gMzE2Ni0xIChJU08gMzE2Ni0xIGFscGhhLTIpIG9yIElTTyAzMTY2LTIgY29kZSwgdGhlIHBsYWNlLCBvciB0aGUgR2VvU2hhcGUgZm9yIHRoZSBnZW8tcG9saXRpY2FsIHJlZ2lvbihzKSBmb3Igd2hpY2ggdGhlIG9mZmVyIG9yIGRlbGl2ZXJ5IGNoYXJnZSBzcGVjaWZpY2F0aW9uIGlzIG5vdCB2YWxpZCwgZS5nLiBhIHJlZ2lvbiB3aGVyZSB0aGUgdHJhbnNhY3Rpb24gaXMgbm90IGFsbG93ZWQuXG5cblNlZSBhbHNvIFtbZWxpZ2libGVSZWdpb25dXS4KICAgICAgcWFzc29jaWF0ZWRBcnRpY2xlomVvbmVPZoKhZCRyZWZyc2NoZW1hOk5ld3NBcnRpY2xlomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmcnNjaGVtYTpOZXdzQXJ0aWNsZWtkZXNjcmlwdGlvbngvQSBOZXdzQXJ0aWNsZSBhc3NvY2lhdGVkIHdpdGggdGhlIE1lZGlhIE9iamVjdC5xcHJvZHVjdGlvbkNvbXBhbnmiZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbmtkZXNjcmlwdGlvbnhfVGhlIHByb2R1Y3Rpb24gY29tcGFueSBvciBzdHVkaW8gcmVzcG9uc2libGUgZm9yIHRoZSBpdGVtIGUuZy4gc2VyaWVzLCB2aWRlbyBnYW1lLCBlcGlzb2RlIGV0Yy5yaW50ZXJwcmV0ZWRBc0NsYWltomVvbmVPZoKhZCRyZWZsc2NoZW1hOkNsYWltomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbHNjaGVtYTpDbGFpbWtkZXNjcmlwdGlvbnjQVXNlZCB0byBpbmRpY2F0ZSBhIHNwZWNpZmljIGNsYWltIGNvbnRhaW5lZCwgaW1wbGllZCwgdHJhbnNsYXRlZCBvciByZWZpbmVkIGZyb20gdGhlIGNvbnRlbnQgb2YgYSBbW01lZGlhT2JqZWN0XV0gb3Igb3RoZXIgW1tDcmVhdGl2ZVdvcmtdXS4gVGhlIGludGVycHJldGluZyBwYXJ0eSBjYW4gYmUgaW5kaWNhdGVkIHVzaW5nIFtbY2xhaW1JbnRlcnByZXRlcl1dLnNlbmNvZGVzQ3JlYXRpdmVXb3JromQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254LlRoZSBDcmVhdGl2ZVdvcmsgZW5jb2RlZCBieSB0aGlzIG1lZGlhIG9iamVjdC50cmVxdWlyZXNTdWJzY3JpcHRpb26iZWFueU9mgqFkdHlwZWdib29sZWFuoWQkcmVmeBhzY2hlbWE6TWVkaWFTdWJzY3JpcHRpb25rZGVzY3JpcHRpb254qUluZGljYXRlcyBpZiB1c2Ugb2YgdGhlIG1lZGlhIHJlcXVpcmUgYSBzdWJzY3JpcHRpb24gIChlaXRoZXIgcGFpZCBvciBmcmVlKS4gQWxsb3dlZCB2YWx1ZXMgYXJlIGBgYHRydWVgYGAgb3IgYGBgZmFsc2VgYGAgKG5vdGUgdGhhdCBhbiBlYXJsaWVyIHZlcnNpb24gaGFkICd5ZXMnLCAnbm8nKS5rZGVzY3JpcHRpb255AXdBIG1lZGlhIG9iamVjdCwgc3VjaCBhcyBhbiBpbWFnZSwgdmlkZW8sIG9yIGF1ZGlvIG9iamVjdCBlbWJlZGRlZCBpbiBhIHdlYiBwYWdlIG9yIGEgZG93bmxvYWRhYmxlIGRhdGFzZXQgaS5lLiBEYXRhRG93bmxvYWQuIE5vdGUgdGhhdCBhIGNyZWF0aXZlIHdvcmsgbWF5IGhhdmUgbWFueSBtZWRpYSBvYmplY3RzIGFzc29jaWF0ZWQgd2l0aCBpdCBvbiB0aGUgc2FtZSB3ZWIgcGFnZS4gRm9yIGV4YW1wbGUsIGEgcGFnZSBhYm91dCBhIHNpbmdsZSBzb25nIChNdXNpY1JlY29yZGluZykgbWF5IGhhdmUgYSBtdXNpYyB2aWRlbyAoVmlkZW9PYmplY3QpLCBhbmQgYSBoaWdoIGFuZCBsb3cgYmFuZHdpZHRoIGF1ZGlvIHN0cmVhbSAoMiBBdWRpb09iamVjdCdzKS5sQ3JlYXRpdmVXb3JrpWR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlbENyZWF0aXZlV29ya2pwcm9wZXJ0aWVzuG9kc2l6ZaJlb25lT2aCoWVhbnlPZoShZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybaFkJHJlZngYc2NoZW1hOlF1YW50aXRhdGl2ZVZhbHVloWQkcmVmeBhzY2hlbWE6U2l6ZVNwZWNpZmljYXRpb26iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mhKFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJtoWQkcmVmeBhzY2hlbWE6UXVhbnRpdGF0aXZlVmFsdWWhZCRyZWZ4GHNjaGVtYTpTaXplU3BlY2lmaWNhdGlvbmtkZXNjcmlwdGlvbnkBSUEgc3RhbmRhcmRpemVkIHNpemUgb2YgYSBwcm9kdWN0IG9yIGNyZWF0aXZlIHdvcmssIHNwZWNpZmllZCBlaXRoZXIgdGhyb3VnaCBhIHNpbXBsZSB0ZXh0dWFsIHN0cmluZyAoZm9yIGV4YW1wbGUgJ1hMJywgJzMyV3gzNEwnKSwgYSAgUXVhbnRpdGF0aXZlVmFsdWUgd2l0aCBhIHVuaXRDb2RlLCBvciBhIGNvbXByZWhlbnNpdmUgYW5kIHN0cnVjdHVyZWQgW1tTaXplU3BlY2lmaWNhdGlvbl1dOyBpbiBvdGhlciBjYXNlcywgdGhlIFtbd2lkdGhdXSwgW1toZWlnaHRdXSwgW1tkZXB0aF1dIGFuZCBbW3dlaWdodF1dIHByb3BlcnRpZXMgbWF5IGJlIG1vcmUgYXBwbGljYWJsZS4gZHRleHSiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueClUaGUgdGV4dHVhbCBjb250ZW50IG9mIHRoaXMgQ3JlYXRpdmVXb3JrLmVhYm91dKJkJHJlZmxzY2hlbWE6VGhpbmdrZGVzY3JpcHRpb254IlRoZSBzdWJqZWN0IG1hdHRlciBvZiB0aGUgY29udGVudC5lYXVkaW+iZW9uZU9mgqFlYW55T2aDoWQkcmVmcnNjaGVtYTpBdWRpb09iamVjdKFkJHJlZmtzY2hlbWE6Q2xpcKFkJHJlZnVzY2hlbWE6TXVzaWNSZWNvcmRpbmeiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mg6FkJHJlZnJzY2hlbWE6QXVkaW9PYmplY3ShZCRyZWZrc2NoZW1hOkNsaXChZCRyZWZ1c2NoZW1hOk11c2ljUmVjb3JkaW5na2Rlc2NyaXB0aW9ueBlBbiBlbWJlZGRlZCBhdWRpbyBvYmplY3QuZWF3YXJkomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnghQW4gYXdhcmQgd29uIGJ5IG9yIGZvciB0aGlzIGl0ZW0uZWdlbnJlomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueDdHZW5yZSBvZiB0aGUgY3JlYXRpdmUgd29yaywgYnJvYWRjYXN0IGNoYW5uZWwgb3IgZ3JvdXAuZXZpZGVvomVvbmVPZoKhZWFueU9mgqFkJHJlZmtzY2hlbWE6Q2xpcKFkJHJlZnJzY2hlbWE6VmlkZW9PYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZmtzY2hlbWE6Q2xpcKFkJHJlZnJzY2hlbWE6VmlkZW9PYmplY3RrZGVzY3JpcHRpb254GUFuIGVtYmVkZGVkIHZpZGVvIG9iamVjdC5mYXV0aG9yomVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueNtUaGUgYXV0aG9yIG9mIHRoaXMgY29udGVudCBvciByYXRpbmcuIFBsZWFzZSBub3RlIHRoYXQgYXV0aG9yIGlzIHNwZWNpYWwgaW4gdGhhdCBIVE1MIDUgcHJvdmlkZXMgYSBzcGVjaWFsIG1lY2hhbmlzbSBmb3IgaW5kaWNhdGluZyBhdXRob3JzaGlwIHZpYSB0aGUgcmVsIHRhZy4gVGhhdCBpcyBlcXVpdmFsZW50IHRvIHRoaXMgYW5kIG1heSBiZSB1c2VkIGludGVyY2hhbmdlYWJseS5mYXdhcmRzomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngfQXdhcmRzIHdvbiBieSBvciBmb3IgdGhpcyBpdGVtLmZlZGl0b3KiZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbngxU3BlY2lmaWVzIHRoZSBQZXJzb24gd2hvIGVkaXRlZCB0aGUgQ3JlYXRpdmVXb3JrLmZmdW5kZXKiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnhoQSBwZXJzb24gb3Igb3JnYW5pemF0aW9uIHRoYXQgc3VwcG9ydHMgKHNwb25zb3JzKSBzb21ldGhpbmcgdGhyb3VnaCBzb21lIGtpbmQgb2YgZmluYW5jaWFsIGNvbnRyaWJ1dGlvbi5mb2ZmZXJzomVvbmVPZoKhZWFueU9mgqFkJHJlZm1zY2hlbWE6RGVtYW5koWQkcmVmbHNjaGVtYTpPZmZlcqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmbXNjaGVtYTpEZW1hbmShZCRyZWZsc2NoZW1hOk9mZmVya2Rlc2NyaXB0aW9ueQIFQW4gb2ZmZXIgdG8gcHJvdmlkZSB0aGlzIGl0ZW3igJRmb3IgZXhhbXBsZSwgYW4gb2ZmZXIgdG8gc2VsbCBhIHByb2R1Y3QsIHJlbnQgdGhlIERWRCBvZiBhIG1vdmllLCBwZXJmb3JtIGEgc2VydmljZSwgb3IgZ2l2ZSBhd2F5IHRpY2tldHMgdG8gYW4gZXZlbnQuIFVzZSBbW2J1c2luZXNzRnVuY3Rpb25dXSB0byBpbmRpY2F0ZSB0aGUga2luZCBvZiB0cmFuc2FjdGlvbiBvZmZlcmVkLCBpLmUuIHNlbGwsIGxlYXNlLCBldGMuIFRoaXMgcHJvcGVydHkgY2FuIGFsc28gYmUgdXNlZCB0byBkZXNjcmliZSBhIFtbRGVtYW5kXV0uIFdoaWxlIHRoaXMgcHJvcGVydHkgaXMgbGlzdGVkIGFzIGV4cGVjdGVkIG9uIGEgbnVtYmVyIG9mIGNvbW1vbiB0eXBlcywgaXQgY2FuIGJlIHVzZWQgaW4gb3RoZXJzLiBJbiB0aGF0IGNhc2UsIHVzaW5nIGEgc2Vjb25kIHR5cGUsIHN1Y2ggYXMgUHJvZHVjdCBvciBhIHN1YnR5cGUgb2YgUHJvZHVjdCwgY2FuIGNsYXJpZnkgdGhlIG5hdHVyZSBvZiB0aGUgb2ZmZXIuCiAgICAgIGZyZXZpZXeiZW9uZU9mgqFkJHJlZm1zY2hlbWE6UmV2aWV3omR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpSZXZpZXdrZGVzY3JpcHRpb251QSByZXZpZXcgb2YgdGhlIGl0ZW0uZ2NvbW1lbnSiZW9uZU9mgqFkJHJlZm5zY2hlbWE6Q29tbWVudKJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm5zY2hlbWE6Q29tbWVudGtkZXNjcmlwdGlvbngfQ29tbWVudHMsIHR5cGljYWxseSBmcm9tIHVzZXJzLmdjcmVhdG9yomVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueGJUaGUgY3JlYXRvci9hdXRob3Igb2YgdGhpcyBDcmVhdGl2ZVdvcmsuIFRoaXMgaXMgdGhlIHNhbWUgYXMgdGhlIEF1dGhvciBwcm9wZXJ0eSBmb3IgQ3JlYXRpdmVXb3JrLmdleHBpcmVzo2R0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZWtkZXNjcmlwdGlvbnkBL0RhdGUgdGhlIGNvbnRlbnQgZXhwaXJlcyBhbmQgaXMgbm8gbG9uZ2VyIHVzZWZ1bCBvciBhdmFpbGFibGUuIEZvciBleGFtcGxlIGEgW1tWaWRlb09iamVjdF1dIG9yIFtbTmV3c0FydGljbGVdXSB3aG9zZSBhdmFpbGFiaWxpdHkgb3IgcmVsZXZhbmNlIGlzIHRpbWUtbGltaXRlZCwgb3IgYSBbW0NsYWltUmV2aWV3XV0gZmFjdCBjaGVjayB3aG9zZSBwdWJsaXNoZXIgd2FudHMgdG8gaW5kaWNhdGUgdGhhdCBpdCBtYXkgbm8gbG9uZ2VyIGJlIHJlbGV2YW50IChvciBoZWxwZnVsIHRvIGhpZ2hsaWdodCkgYWZ0ZXIgc29tZSBkYXRlLmdoYXNQYXJ0omVvbmVPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueF1JbmRpY2F0ZXMgYW4gaXRlbSBvciBDcmVhdGl2ZVdvcmsgdGhhdCBpcyBwYXJ0IG9mIHRoaXMgaXRlbSwgb3IgQ3JlYXRpdmVXb3JrIChpbiBzb21lIHNlbnNlKS5nbGljZW5zZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254TEEgbGljZW5zZSBkb2N1bWVudCB0aGF0IGFwcGxpZXMgdG8gdGhpcyBjb250ZW50LCB0eXBpY2FsbHkgaW5kaWNhdGVkIGJ5IFVSTC5ncGF0dGVybqJlb25lT2aCoWVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybaJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm1rZGVzY3JpcHRpb254uUEgcGF0dGVybiB0aGF0IHNvbWV0aGluZyBoYXMsIGZvciBleGFtcGxlICdwb2xrYSBkb3QnLCAnc3RyaXBlZCcsICdDYW5hZGlhbiBmbGFnJy4gVmFsdWVzIGFyZSB0eXBpY2FsbHkgZXhwcmVzc2VkIGFzIHRleHQsIGFsdGhvdWdoIGxpbmtzIHRvIGNvbnRyb2xsZWQgdmFsdWUgc2NoZW1lcyBhcmUgYWxzbyBzdXBwb3J0ZWQuZ3Jldmlld3OiZW9uZU9mgqFkJHJlZm1zY2hlbWE6UmV2aWV3omR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpSZXZpZXdrZGVzY3JpcHRpb25zUmV2aWV3IG9mIHRoZSBpdGVtLmdzcGF0aWFsomQkcmVmbHNjaGVtYTpQbGFjZWtkZXNjcmlwdGlvbnivVGhlICJzcGF0aWFsIiBwcm9wZXJ0eSBjYW4gYmUgdXNlZCBpbiBjYXNlcyB3aGVuIG1vcmUgc3BlY2lmaWMgcHJvcGVydGllcwooZS5nLiBbW2xvY2F0aW9uQ3JlYXRlZF1dLCBbW3NwYXRpYWxDb3ZlcmFnZV1dLCBbW2NvbnRlbnRMb2NhdGlvbl1dKSBhcmUgbm90IGtub3duIHRvIGJlIGFwcHJvcHJpYXRlLmdzcG9uc29yomVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb26iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254qkEgcGVyc29uIG9yIG9yZ2FuaXphdGlvbiB0aGF0IHN1cHBvcnRzIGEgdGhpbmcgdGhyb3VnaCBhIHBsZWRnZSwgcHJvbWlzZSwgb3IgZmluYW5jaWFsIGNvbnRyaWJ1dGlvbi4gZS5nLiBhIHNwb25zb3Igb2YgYSBNZWRpY2FsIFN0dWR5IG9yIGEgY29ycG9yYXRlIHNwb25zb3Igb2YgYW4gZXZlbnQuZ3RlYWNoZXOiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueH5UaGUgaXRlbSBiZWluZyBkZXNjcmliZWQgaXMgaW50ZW5kZWQgdG8gaGVscCBhIHBlcnNvbiBsZWFybiB0aGUgY29tcGV0ZW5jeSBvciBsZWFybmluZyBvdXRjb21lIGRlZmluZWQgYnkgdGhlIHJlZmVyZW5jZWQgdGVybS5ndmVyc2lvbqJlYW55T2aCoWR0eXBlZm51bWJlcqFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254QVRoZSB2ZXJzaW9uIG9mIHRoZSBDcmVhdGl2ZVdvcmsgZW1ib2RpZWQgYnkgYSBzcGVjaWZpZWQgcmVzb3VyY2UuaGFic3RyYWN0omVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnhGQW4gYWJzdHJhY3QgaXMgYSBzaG9ydCBkZXNjcmlwdGlvbiB0aGF0IHN1bW1hcml6ZXMgYSBbW0NyZWF0aXZlV29ya11dLmhhc3Nlc3Nlc6JlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm1rZGVzY3JpcHRpb254cVRoZSBpdGVtIGJlaW5nIGRlc2NyaWJlZCBpcyBpbnRlbmRlZCB0byBhc3Nlc3MgdGhlIGNvbXBldGVuY3kgb3IgbGVhcm5pbmcgb3V0Y29tZSBkZWZpbmVkIGJ5IHRoZSByZWZlcmVuY2VkIHRlcm0uaGF1ZGllbmNlomQkcmVmb3NjaGVtYTpBdWRpZW5jZWtkZXNjcmlwdGlvbnhCQW4gaW50ZW5kZWQgYXVkaWVuY2UsIGkuZS4gYSBncm91cCBmb3Igd2hvbSBzb21ldGhpbmcgd2FzIGNyZWF0ZWQuaGNpdGF0aW9uomVvbmVPZoKhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueHBBIGNpdGF0aW9uIG9yIHJlZmVyZW5jZSB0byBhbm90aGVyIGNyZWF0aXZlIHdvcmssIHN1Y2ggYXMgYW5vdGhlciBwdWJsaWNhdGlvbiwgd2ViIHBhZ2UsIHNjaG9sYXJseSBhcnRpY2xlLCBldGMuaGVkaXRFSURSomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255AnBBbiBbRUlEUl0oaHR0cHM6Ly9laWRyLm9yZy8pIChFbnRlcnRhaW5tZW50IElkZW50aWZpZXIgUmVnaXN0cnkpIFtbaWRlbnRpZmllcl1dIHJlcHJlc2VudGluZyBhIHNwZWNpZmljIGVkaXQgLyBlZGl0aW9uIGZvciBhIHdvcmsgb2YgZmlsbSBvciB0ZWxldmlzaW9uLgoKRm9yIGV4YW1wbGUsIHRoZSBtb3Rpb24gcGljdHVyZSBrbm93biBhcyAiR2hvc3RidXN0ZXJzIiB3aG9zZSBbW3RpdGxlRUlEUl1dIGlzICIxMC41MjQwLzdFQzctMjI4QS01MTBBLTA1M0UtQ0JCOC1KIiwgaGFzIHNldmVyYWwgZWRpdHMgZS5nLiAiMTAuNTI0MC8xRjJBLUUxQzUtNjgwQS0xNEM2LUU3NkItSSIgYW5kICIxMC41MjQwLzhBMzUtM0JFRS02NDk3LTVEMTItOUU0Ri0zIi4KClNpbmNlIHNjaGVtYS5vcmcgdHlwZXMgbGlrZSBbW01vdmllXV0gYW5kIFtbVFZFcGlzb2RlXV0gY2FuIGJlIHVzZWQgZm9yIGJvdGggd29ya3MgYW5kIHRoZWlyIG11bHRpcGxlIGV4cHJlc3Npb25zLCBpdCBpcyBwb3NzaWJsZSB0byB1c2UgW1t0aXRsZUVJRFJdXSBhbG9uZSAoZm9yIGEgZ2VuZXJhbCBkZXNjcmlwdGlvbiksIG9yIGFsb25nc2lkZSBbW2VkaXRFSURSXV0gZm9yIGEgbW9yZSBlZGl0LXNwZWNpZmljIGRlc2NyaXB0aW9uLgpoZW5jb2RpbmeiZW9uZU9mgqFkJHJlZnJzY2hlbWE6TWVkaWFPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZyc2NoZW1hOk1lZGlhT2JqZWN0a2Rlc2NyaXB0aW9ueF5BIG1lZGlhIG9iamVjdCB0aGF0IGVuY29kZXMgdGhpcyBDcmVhdGl2ZVdvcmsuIFRoaXMgcHJvcGVydHkgaXMgYSBzeW5vbnltIGZvciBhc3NvY2lhdGVkTWVkaWEuaGhlYWRsaW5lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngYSGVhZGxpbmUgb2YgdGhlIGFydGljbGUuaGlzUGFydE9momVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnheSW5kaWNhdGVzIGFuIGl0ZW0gb3IgQ3JlYXRpdmVXb3JrIHRoYXQgdGhpcyBpdGVtLCBvciBDcmVhdGl2ZVdvcmsgKGluIHNvbWUgc2Vuc2UpLCBpcyBwYXJ0IG9mLmhrZXl3b3Jkc6JlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm1rZGVzY3JpcHRpb254dktleXdvcmRzIG9yIHRhZ3MgdXNlZCB0byBkZXNjcmliZSB0aGlzIGNvbnRlbnQuIE11bHRpcGxlIGVudHJpZXMgaW4gYSBrZXl3b3JkcyBsaXN0IGFyZSB0eXBpY2FsbHkgZGVsaW1pdGVkIGJ5IGNvbW1hcy5obWF0ZXJpYWyiZW9uZU9mgqFlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZm5zY2hlbWE6UHJvZHVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZm5zY2hlbWE6UHJvZHVjdGtkZXNjcmlwdGlvbnhKQSBtYXRlcmlhbCB0aGF0IHNvbWV0aGluZyBpcyBtYWRlIGZyb20sIGUuZy4gbGVhdGhlciwgd29vbCwgY290dG9uLCBwYXBlci5obWVudGlvbnOiZW9uZU9mgqFkJHJlZmxzY2hlbWE6VGhpbmeiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZsc2NoZW1hOlRoaW5na2Rlc2NyaXB0aW9ueGBJbmRpY2F0ZXMgdGhhdCB0aGUgQ3JlYXRpdmVXb3JrIGNvbnRhaW5zIGEgcmVmZXJlbmNlIHRvLCBidXQgaXMgbm90IG5lY2Vzc2FyaWx5IGFib3V0IGEgY29uY2VwdC5ocG9zaXRpb26iZWFueU9mgqFkdHlwZWdpbnRlZ2VyoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbng5VGhlIHBvc2l0aW9uIG9mIGFuIGl0ZW0gaW4gYSBzZXJpZXMgb3Igc2VxdWVuY2Ugb2YgaXRlbXMuaHByb2R1Y2VyomVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueGFUaGUgcGVyc29uIG9yIG9yZ2FuaXphdGlvbiB3aG8gcHJvZHVjZWQgdGhlIHdvcmsgKGUuZy4gbXVzaWMgYWxidW0sIG1vdmllLCB0di9yYWRpbyBzZXJpZXMgZXRjLikuaHByb3ZpZGVyomVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueNBUaGUgc2VydmljZSBwcm92aWRlciwgc2VydmljZSBvcGVyYXRvciwgb3Igc2VydmljZSBwZXJmb3JtZXI7IHRoZSBnb29kcyBwcm9kdWNlci4gQW5vdGhlciBwYXJ0eSAoYSBzZWxsZXIpIG1heSBvZmZlciB0aG9zZSBzZXJ2aWNlcyBvciBnb29kcyBvbiBiZWhhbGYgb2YgdGhlIHByb3ZpZGVyLiBBIHByb3ZpZGVyIG1heSBhbHNvIHNlcnZlIGFzIHRoZSBzZWxsZXIuaHRlbXBvcmFsomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGlkYXRlLXRpbWWhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueL5UaGUgInRlbXBvcmFsIiBwcm9wZXJ0eSBjYW4gYmUgdXNlZCBpbiBjYXNlcyB3aGVyZSBtb3JlIHNwZWNpZmljIHByb3BlcnRpZXMKKGUuZy4gW1t0ZW1wb3JhbENvdmVyYWdlXV0sIFtbZGF0ZUNyZWF0ZWRdXSwgW1tkYXRlTW9kaWZpZWRdXSwgW1tkYXRlUHVibGlzaGVkXV0pIGFyZSBub3Qga25vd24gdG8gYmUgYXBwcm9wcmlhdGUuaWNoYXJhY3RlcqJlb25lT2aCoWQkcmVmbXNjaGVtYTpQZXJzb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbngwRmljdGlvbmFsIHBlcnNvbiBjb25uZWN0ZWQgd2l0aCBhIGNyZWF0aXZlIHdvcmsuaWVuY29kaW5nc6Jlb25lT2aCoWQkcmVmcnNjaGVtYTpNZWRpYU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZnJzY2hlbWE6TWVkaWFPYmplY3RrZGVzY3JpcHRpb254LkEgbWVkaWEgb2JqZWN0IHRoYXQgZW5jb2RlcyB0aGlzIENyZWF0aXZlV29yay5paXNCYXNlZE9uomVvbmVPZoKhZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbnNjaGVtYTpQcm9kdWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZm5zY2hlbWE6UHJvZHVjdGtkZXNjcmlwdGlvbnhaQSByZXNvdXJjZSBmcm9tIHdoaWNoIHRoaXMgd29yayBpcyBkZXJpdmVkIG9yIGZyb20gd2hpY2ggaXQgaXMgYSBtb2RpZmljYXRpb24gb3IgYWRhcHRpb24uaXB1Ymxpc2hlcqJlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbngjVGhlIHB1Ymxpc2hlciBvZiB0aGUgY3JlYXRpdmUgd29yay5pc2RMaWNlbnNlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnhUQSBsaWNlbnNlIGRvY3VtZW50IHRoYXQgYXBwbGllcyB0byB0aGlzIHN0cnVjdHVyZWQgZGF0YSwgdHlwaWNhbGx5IGluZGljYXRlZCBieSBVUkwuaXVzYWdlSW5mb6JlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb255AzdUaGUgc2NoZW1hLm9yZyBbW3VzYWdlSW5mb11dIHByb3BlcnR5IGluZGljYXRlcyBmdXJ0aGVyIGluZm9ybWF0aW9uIGFib3V0IGEgW1tDcmVhdGl2ZVdvcmtdXS4gVGhpcyBwcm9wZXJ0eSBpcyBhcHBsaWNhYmxlIGJvdGggdG8gd29ya3MgdGhhdCBhcmUgZnJlZWx5IGF2YWlsYWJsZSBhbmQgdG8gdGhvc2UgdGhhdCByZXF1aXJlIHBheW1lbnQgb3Igb3RoZXIgdHJhbnNhY3Rpb25zLiBJdCBjYW4gcmVmZXJlbmNlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gZS5nLiBjb21tdW5pdHkgZXhwZWN0YXRpb25zIG9uIHByZWZlcnJlZCBsaW5raW5nIGFuZCBjaXRhdGlvbiBjb252ZW50aW9ucywgYXMgd2VsbCBhcyBwdXJjaGFzaW5nIGRldGFpbHMuIEZvciBzb21ldGhpbmcgdGhhdCBjYW4gYmUgY29tbWVyY2lhbGx5IGxpY2Vuc2VkLCB1c2FnZUluZm8gY2FuIHByb3ZpZGUgZGV0YWlsZWQsIHJlc291cmNlLXNwZWNpZmljIGluZm9ybWF0aW9uIGFib3V0IGxpY2Vuc2luZyBvcHRpb25zLgoKVGhpcyBwcm9wZXJ0eSBjYW4gYmUgdXNlZCBhbG9uZ3NpZGUgdGhlIGxpY2Vuc2UgcHJvcGVydHkgd2hpY2ggaW5kaWNhdGVzIGxpY2Vuc2UocykgYXBwbGljYWJsZSB0byBzb21lIHBpZWNlIG9mIGNvbnRlbnQuIFRoZSB1c2FnZUluZm8gcHJvcGVydHkgY2FuIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgb3RoZXIgbGljZW5zaW5nIG9wdGlvbnMsIGUuZy4gYWNxdWlyaW5nIGNvbW1lcmNpYWwgdXNhZ2UgcmlnaHRzIGZvciBhbiBpbWFnZSB0aGF0IGlzIGFsc28gYXZhaWxhYmxlIHVuZGVyIG5vbi1jb21tZXJjaWFsIGNyZWF0aXZlIGNvbW1vbnMgbGljZW5zZXMuamFjY2Vzc01vZGWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueQEhVGhlIGh1bWFuIHNlbnNvcnkgcGVyY2VwdHVhbCBzeXN0ZW0gb3IgY29nbml0aXZlIGZhY3VsdHkgdGhyb3VnaCB3aGljaCBhIHBlcnNvbiBtYXkgcHJvY2VzcyBvciBwZXJjZWl2ZSBpbmZvcm1hdGlvbi4gRXhwZWN0ZWQgdmFsdWVzIGluY2x1ZGU6IGF1ZGl0b3J5LCB0YWN0aWxlLCB0ZXh0dWFsLCB2aXN1YWwsIGNvbG9yRGVwZW5kZW50LCBjaGFydE9uVmlzdWFsLCBjaGVtT25WaXN1YWwsIGRpYWdyYW1PblZpc3VhbCwgbWF0aE9uVmlzdWFsLCBtdXNpY09uVmlzdWFsLCB0ZXh0T25WaXN1YWwuCiAgICAgIGphcmNoaXZlZEF0omVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZm5zY2hlbWE6V2ViUGFnZaJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmbnNjaGVtYTpXZWJQYWdla2Rlc2NyaXB0aW9ueQFMSW5kaWNhdGVzIGEgcGFnZSBvciBvdGhlciBsaW5rIGludm9sdmVkIGluIGFyY2hpdmFsIG9mIGEgW1tDcmVhdGl2ZVdvcmtdXS4gSW4gdGhlIGNhc2Ugb2YgW1tNZWRpYVJldmlld11dLCB0aGUgaXRlbXMgaW4gYSBbW01lZGlhUmV2aWV3SXRlbV1dIG1heSBvZnRlbiBiZWNvbWUgaW5hY2Nlc3NpYmxlLCBidXQgYmUgYXJjaGl2ZWQgYnkgYXJjaGl2YWwsIGpvdXJuYWxpc3RpYywgYWN0aXZpc3QsIG9yIGxhdyBlbmZvcmNlbWVudCBvcmdhbml6YXRpb25zLiBJbiBzdWNoIGNhc2VzLCB0aGUgcmVmZXJlbmNlZCBwYWdlIG1heSBub3QgZGlyZWN0bHkgcHVibGlzaCB0aGUgY29udGVudC5qY29ycmVjdGlvbqJlb25lT2aCoWVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmeBhzY2hlbWE6Q29ycmVjdGlvbkNvbW1lbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ4GHNjaGVtYTpDb3JyZWN0aW9uQ29tbWVudGtkZXNjcmlwdGlvbnhzSW5kaWNhdGVzIGEgY29ycmVjdGlvbiB0byBhIFtbQ3JlYXRpdmVXb3JrXV0sIGVpdGhlciB2aWEgYSBbW0NvcnJlY3Rpb25Db21tZW50XV0sIHRleHR1YWxseSBvciBpbiBhbm90aGVyIGRvY3VtZW50LmpjcmVkaXRUZXh0omVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnhrVGV4dCB0aGF0IGNhbiBiZSB1c2VkIHRvIGNyZWRpdCBwZXJzb24ocykgYW5kL29yIG9yZ2FuaXphdGlvbihzKSBhc3NvY2lhdGVkIHdpdGggYSBwdWJsaXNoZWQgQ3JlYXRpdmUgV29yay5qZmlsZUZvcm1hdKJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkB5U1lZGlhIHR5cGUsIHR5cGljYWxseSBNSU1FIGZvcm1hdCAoc2VlIFtJQU5BIHNpdGVdKGh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvbWVkaWEtdHlwZXMvbWVkaWEtdHlwZXMueGh0bWwpKSBvZiB0aGUgY29udGVudCBlLmcuIGFwcGxpY2F0aW9uL3ppcCBvZiBhIFNvZnR3YXJlQXBwbGljYXRpb24gYmluYXJ5LiBJbiBjYXNlcyB3aGVyZSBhIENyZWF0aXZlV29yayBoYXMgc2V2ZXJhbCBtZWRpYSB0eXBlIHJlcHJlc2VudGF0aW9ucywgJ2VuY29kaW5nJyBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBlYWNoIE1lZGlhT2JqZWN0IGFsb25nc2lkZSBwYXJ0aWN1bGFyIGZpbGVGb3JtYXQgaW5mb3JtYXRpb24uIFVucmVnaXN0ZXJlZCBvciBuaWNoZSBmaWxlIGZvcm1hdHMgY2FuIGJlIGluZGljYXRlZCBpbnN0ZWFkIHZpYSB0aGUgbW9zdCBhcHByb3ByaWF0ZSBVUkwsIGUuZy4gZGVmaW5pbmcgV2ViIHBhZ2Ugb3IgYSBXaWtpcGVkaWEgZW50cnkuamluTGFuZ3VhZ2WiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZvc2NoZW1hOkxhbmd1YWdla2Rlc2NyaXB0aW9ueMhUaGUgbGFuZ3VhZ2Ugb2YgdGhlIGNvbnRlbnQgb3IgcGVyZm9ybWFuY2Ugb3IgdXNlZCBpbiBhbiBhY3Rpb24uIFBsZWFzZSB1c2Ugb25lIG9mIHRoZSBsYW5ndWFnZSBjb2RlcyBmcm9tIHRoZSBbSUVURiBCQ1AgNDcgc3RhbmRhcmRdKGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL2JjcDQ3KS4gU2VlIGFsc28gW1thdmFpbGFibGVMYW5ndWFnZV1dLmptYWluRW50aXR5omVvbmVPZoKhZCRyZWZsc2NoZW1hOlRoaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbHNjaGVtYTpUaGluZ2tkZXNjcmlwdGlvbnhKSW5kaWNhdGVzIHRoZSBwcmltYXJ5IGVudGl0eSBkZXNjcmliZWQgaW4gc29tZSBwYWdlIG9yIG90aGVyIENyZWF0aXZlV29yay5qbWFpbnRhaW5lcqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29uomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueQNcQSBtYWludGFpbmVyIG9mIGEgW1tEYXRhc2V0XV0sIHNvZnR3YXJlIHBhY2thZ2UgKFtbU29mdHdhcmVBcHBsaWNhdGlvbl1dKSwgb3Igb3RoZXIgW1tQcm9qZWN0XV0uIEEgbWFpbnRhaW5lciBpcyBhIFtbUGVyc29uXV0gb3IgW1tPcmdhbml6YXRpb25dXSB0aGF0IG1hbmFnZXMgY29udHJpYnV0aW9ucyB0bywgYW5kL29yIHB1YmxpY2F0aW9uIG9mLCBzb21lICh0eXBpY2FsbHkgY29tcGxleCkgYXJ0aWZhY3QuIEl0IGlzIGNvbW1vbiBmb3IgZGlzdHJpYnV0aW9ucyBvZiBzb2Z0d2FyZSBhbmQgZGF0YSB0byBiZSBiYXNlZCBvbiAidXBzdHJlYW0iIHNvdXJjZXMuIFdoZW4gW1ttYWludGFpbmVyXV0gaXMgYXBwbGllZCB0byBhIHNwZWNpZmljIHZlcnNpb24gb2Ygc29tZXRoaW5nIGUuZy4gYSBwYXJ0aWN1bGFyIHZlcnNpb24gb3IgcGFja2FnaW5nIG9mIGEgW1tEYXRhc2V0XV0sIGl0IGlzIGFsd2F5cyAgcG9zc2libGUgdGhhdCB0aGUgdXBzdHJlYW0gc291cmNlIGhhcyBhIGRpZmZlcmVudCBtYWludGFpbmVyLiBUaGUgW1tpc0Jhc2VkT25dXSBwcm9wZXJ0eSBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBzdWNoIHJlbGF0aW9uc2hpcHMgYmV0d2VlbiBkYXRhc2V0cyB0byBtYWtlIHRoZSBkaWZmZXJlbnQgbWFpbnRlbmFuY2Ugcm9sZXMgY2xlYXIuIFNpbWlsYXJseSBpbiB0aGUgY2FzZSBvZiBzb2Z0d2FyZSwgYSBwYWNrYWdlIG1heSBoYXZlIGRlZGljYXRlZCBtYWludGFpbmVycyB3b3JraW5nIG9uIGludGVncmF0aW9uIGludG8gc29mdHdhcmUgZGlzdHJpYnV0aW9ucyBzdWNoIGFzIFVidW50dSwgYXMgd2VsbCBhcyB1cHN0cmVhbSBtYWludGFpbmVycyBvZiB0aGUgdW5kZXJseWluZyB3b3JrLgogICAgICBqcmVjb3JkZWRBdKJkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254ZVRoZSBFdmVudCB3aGVyZSB0aGUgQ3JlYXRpdmVXb3JrIHdhcyByZWNvcmRlZC4gVGhlIENyZWF0aXZlV29yayBtYXkgY2FwdHVyZSBhbGwgb3IgcGFydCBvZiB0aGUgZXZlbnQuanRyYW5zbGF0b3KiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnizT3JnYW5pemF0aW9uIG9yIHBlcnNvbiB3aG8gYWRhcHRzIGEgY3JlYXRpdmUgd29yayB0byBkaWZmZXJlbnQgbGFuZ3VhZ2VzLCByZWdpb25hbCBkaWZmZXJlbmNlcyBhbmQgdGVjaG5pY2FsIHJlcXVpcmVtZW50cyBvZiBhIHRhcmdldCBtYXJrZXQsIG9yIHRoYXQgdHJhbnNsYXRlcyBkdXJpbmcgc29tZSBldmVudC5rY29udHJpYnV0b3KiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbng1QSBzZWNvbmRhcnkgY29udHJpYnV0b3IgdG8gdGhlIENyZWF0aXZlV29yayBvciBFdmVudC5rZGF0ZUNyZWF0ZWSiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGWiZHR5cGVmc3RyaW5nZmZvcm1hdGlkYXRlLXRpbWVrZGVzY3JpcHRpb254U1RoZSBkYXRlIG9uIHdoaWNoIHRoZSBDcmVhdGl2ZVdvcmsgd2FzIGNyZWF0ZWQgb3IgdGhlIGl0ZW0gd2FzIGFkZGVkIHRvIGEgRGF0YUZlZWQua3B1YmxpY2F0aW9uomVvbmVPZoKhZCRyZWZ3c2NoZW1hOlB1YmxpY2F0aW9uRXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ3c2NoZW1hOlB1YmxpY2F0aW9uRXZlbnRrZGVzY3JpcHRpb254LUEgcHVibGljYXRpb24gZXZlbnQgYXNzb2NpYXRlZCB3aXRoIHRoZSBpdGVtLmtzZFB1Ymxpc2hlcqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29uomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueQG0SW5kaWNhdGVzIHRoZSBwYXJ0eSByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyBhbmQgcHVibGlzaGluZyB0aGUgY3VycmVudCBzdHJ1Y3R1cmVkIGRhdGEgbWFya3VwLCB0eXBpY2FsbHkgaW4gY2FzZXMgd2hlcmUgdGhlIHN0cnVjdHVyZWQgZGF0YSBpcyBkZXJpdmVkIGF1dG9tYXRpY2FsbHkgZnJvbSBleGlzdGluZyBwdWJsaXNoZWQgY29udGVudCBidXQgcHVibGlzaGVkIG9uIGEgZGlmZmVyZW50IHNpdGUuIEZvciBleGFtcGxlLCBzdHVkZW50IHByb2plY3RzIGFuZCBvcGVuIGRhdGEgaW5pdGlhdGl2ZXMgb2Z0ZW4gcmUtcHVibGlzaCBleGlzdGluZyBjb250ZW50IHdpdGggbW9yZSBleHBsaWNpdGx5IHN0cnVjdHVyZWQgbWV0YWRhdGEuIFRoZQpbW3NkUHVibGlzaGVyXV0gcHJvcGVydHkgaGVscHMgbWFrZSBzdWNoIHByYWN0aWNlcyBtb3JlIGV4cGxpY2l0Lmt3b3JrRXhhbXBsZaJlb25lT2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniBRXhhbXBsZS9pbnN0YW5jZS9yZWFsaXphdGlvbi9kZXJpdmF0aW9uIG9mIHRoZSBjb25jZXB0IG9mIHRoaXMgY3JlYXRpdmUgd29yay4gZWcuIFRoZSBwYXBlcmJhY2sgZWRpdGlvbiwgZmlyc3QgZWRpdGlvbiwgb3IgZUJvb2subGNvbW1lbnRDb3VudKJkdHlwZWdpbnRlZ2Vya2Rlc2NyaXB0aW9ueNJUaGUgbnVtYmVyIG9mIGNvbW1lbnRzIHRoaXMgQ3JlYXRpdmVXb3JrIChlLmcuIEFydGljbGUsIFF1ZXN0aW9uIG9yIEFuc3dlcikgaGFzIHJlY2VpdmVkLiBUaGlzIGlzIG1vc3QgYXBwbGljYWJsZSB0byB3b3JrcyBwdWJsaXNoZWQgaW4gV2ViIHNpdGVzIHdpdGggY29tbWVudGluZyBzeXN0ZW07IGFkZGl0aW9uYWwgY29tbWVudHMgbWF5IGV4aXN0IGVsc2V3aGVyZS5sZGF0ZU1vZGlmaWVkomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGRkYXRlomR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1la2Rlc2NyaXB0aW9ueHZUaGUgZGF0ZSBvbiB3aGljaCB0aGUgQ3JlYXRpdmVXb3JrIHdhcyBtb3N0IHJlY2VudGx5IG1vZGlmaWVkIG9yIHdoZW4gdGhlIGl0ZW0ncyBlbnRyeSB3YXMgbW9kaWZpZWQgd2l0aGluIGEgRGF0YUZlZWQubGlzQmFzZWRPblVybKJlb25lT2aCoWVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZm5zY2hlbWE6UHJvZHVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZuc2NoZW1hOlByb2R1Y3RrZGVzY3JpcHRpb254q0EgcmVzb3VyY2UgdGhhdCB3YXMgdXNlZCBpbiB0aGUgY3JlYXRpb24gb2YgdGhpcyByZXNvdXJjZS4gVGhpcyB0ZXJtIGNhbiBiZSByZXBlYXRlZCBmb3IgbXVsdGlwbGUgc291cmNlcy4gRm9yIGV4YW1wbGUsIGh0dHA6Ly9leGFtcGxlLmNvbS9ncmVhdC1tdWx0aXBsaWNhdGlvbi1pbnRyby5odG1sLmx0aHVtYm5haWxVcmyiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbngoQSB0aHVtYm5haWwgaW1hZ2UgcmVsZXZhbnQgdG8gdGhlIFRoaW5nLmx0aW1lUmVxdWlyZWSjZHR5cGVmc3RyaW5naCRjb21tZW50eBtodHRwczovL3NjaGVtYS5vcmcvRHVyYXRpb25rZGVzY3JpcHRpb254lkFwcHJveGltYXRlIG9yIHR5cGljYWwgdGltZSBpdCB0YWtlcyB0byB3b3JrIHdpdGggb3IgdGhyb3VnaCB0aGlzIGxlYXJuaW5nIHJlc291cmNlIGZvciB0aGUgdHlwaWNhbCBpbnRlbmRlZCB0YXJnZXQgYXVkaWVuY2UsIGUuZy4gJ1BUMzBNJywgJ1BUMUgyNU0nLm1jb250ZW50UmF0aW5nomVvbmVPZoKhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZtc2NoZW1hOlJhdGluZ6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZm1zY2hlbWE6UmF0aW5na2Rlc2NyaXB0aW9ueEFPZmZpY2lhbCByYXRpbmcgb2YgYSBwaWVjZSBvZiBjb250ZW504oCUZm9yIGV4YW1wbGUsJ01QQUEgUEctMTMnLm1jb3B5cmlnaHRZZWFyomR0eXBlZm51bWJlcmtkZXNjcmlwdGlvbnhUVGhlIHllYXIgZHVyaW5nIHdoaWNoIHRoZSBjbGFpbWVkIGNvcHlyaWdodCBmb3IgdGhlIENyZWF0aXZlV29yayB3YXMgZmlyc3QgYXNzZXJ0ZWQubWRhdGVQdWJsaXNoZWSiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGWiZHR5cGVmc3RyaW5nZmZvcm1hdGlkYXRlLXRpbWVrZGVzY3JpcHRpb254JERhdGUgb2YgZmlyc3QgYnJvYWRjYXN0L3B1YmxpY2F0aW9uLm1kaXNjdXNzaW9uVXJsomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254P0EgbGluayB0byB0aGUgcGFnZSBjb250YWluaW5nIHRoZSBjb21tZW50cyBvZiB0aGUgQ3JlYXRpdmVXb3JrLm1leGFtcGxlT2ZXb3JromVvbmVPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueFBBIGNyZWF0aXZlIHdvcmsgdGhhdCB0aGlzIHdvcmsgaXMgYW4gZXhhbXBsZS9pbnN0YW5jZS9yZWFsaXphdGlvbi9kZXJpdmF0aW9uIG9mLm1yZWxlYXNlZEV2ZW50omQkcmVmd3NjaGVtYTpQdWJsaWNhdGlvbkV2ZW50a2Rlc2NyaXB0aW9ueEtUaGUgcGxhY2UgYW5kIHRpbWUgdGhlIHJlbGVhc2Ugd2FzIGlzc3VlZCwgZXhwcmVzc2VkIGFzIGEgUHVibGljYXRpb25FdmVudC5tc2NoZW1hVmVyc2lvbqJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueQIHSW5kaWNhdGVzIChieSBVUkwgb3Igc3RyaW5nKSBhIHBhcnRpY3VsYXIgdmVyc2lvbiBvZiBhIHNjaGVtYSB1c2VkIGluIHNvbWUgQ3JlYXRpdmVXb3JrLiBUaGlzIHByb3BlcnR5IHdhcyBjcmVhdGVkIHByaW1hcmlseSB0bwogICAgaW5kaWNhdGUgdGhlIHVzZSBvZiBhIHNwZWNpZmljIHNjaGVtYS5vcmcgcmVsZWFzZSwgZS5nLiBgYGAxMC4wYGBgIGFzIGEgc2ltcGxlIHN0cmluZywgb3IgbW9yZSBleHBsaWNpdGx5IHZpYSBVUkwsIGBgYGh0dHBzOi8vc2NoZW1hLm9yZy9kb2NzL3JlbGVhc2VzLmh0bWwjdjEwLjBgYGAuIFRoZXJlIG1heSBiZSBzaXR1YXRpb25zIGluIHdoaWNoIG90aGVyIHNjaGVtYXMgbWlnaHQgdXNlZnVsbHkgYmUgcmVmZXJlbmNlZCB0aGlzIHdheSwgZS5nLiBgYGBodHRwOi8vZHVibGluY29yZS5vcmcvc3BlY2lmaWNhdGlvbnMvZHVibGluLWNvcmUvZGNlcy8xOTk5LTA3LTAyL2BgYCBidXQgdGhpcyBoYXMgbm90IGJlZW4gY2FyZWZ1bGx5IGV4cGxvcmVkIGluIHRoZSBjb21tdW5pdHkubmVkdWNhdGlvbmFsVXNlomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybWtkZXNjcmlwdGlvbnhbVGhlIHB1cnBvc2Ugb2YgYSB3b3JrIGluIHRoZSBjb250ZXh0IG9mIGVkdWNhdGlvbjsgZm9yIGV4YW1wbGUsICdhc3NpZ25tZW50JywgJ2dyb3VwIHdvcmsnLm5lbmNvZGluZ0Zvcm1hdKJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkCjk1lZGlhIHR5cGUgdHlwaWNhbGx5IGV4cHJlc3NlZCB1c2luZyBhIE1JTUUgZm9ybWF0IChzZWUgW0lBTkEgc2l0ZV0oaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9tZWRpYS10eXBlcy9tZWRpYS10eXBlcy54aHRtbCkgYW5kIFtNRE4gcmVmZXJlbmNlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0Jhc2ljc19vZl9IVFRQL01JTUVfdHlwZXMpKSBlLmcuIGFwcGxpY2F0aW9uL3ppcCBmb3IgYSBTb2Z0d2FyZUFwcGxpY2F0aW9uIGJpbmFyeSwgYXVkaW8vbXBlZyBmb3IgLm1wMyBldGMuKS4KCkluIGNhc2VzIHdoZXJlIGEgW1tDcmVhdGl2ZVdvcmtdXSBoYXMgc2V2ZXJhbCBtZWRpYSB0eXBlIHJlcHJlc2VudGF0aW9ucywgW1tlbmNvZGluZ11dIGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIGVhY2ggW1tNZWRpYU9iamVjdF1dIGFsb25nc2lkZSBwYXJ0aWN1bGFyIFtbZW5jb2RpbmdGb3JtYXRdXSBpbmZvcm1hdGlvbi4KClVucmVnaXN0ZXJlZCBvciBuaWNoZSBlbmNvZGluZyBhbmQgZmlsZSBmb3JtYXRzIGNhbiBiZSBpbmRpY2F0ZWQgaW5zdGVhZCB2aWEgdGhlIG1vc3QgYXBwcm9wcmlhdGUgVVJMLCBlLmcuIGRlZmluaW5nIFdlYiBwYWdlIG9yIGEgV2lraXBlZGlhL1dpa2lkYXRhIGVudHJ5Lm9bb2JqZWN0IE9iamVjdF2iZW9uZU9mgqFlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZngYc2NoZW1hOlF1YW50aXRhdGl2ZVZhbHVlomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmeBhzY2hlbWE6UXVhbnRpdGF0aXZlVmFsdWVrZGVzY3JpcHRpb25gb2FnZ3JlZ2F0ZVJhdGluZ6JkJHJlZnZzY2hlbWE6QWdncmVnYXRlUmF0aW5na2Rlc2NyaXB0aW9ueE1UaGUgb3ZlcmFsbCByYXRpbmcsIGJhc2VkIG9uIGEgY29sbGVjdGlvbiBvZiByZXZpZXdzIG9yIHJhdGluZ3MsIG9mIHRoZSBpdGVtLm9hc3NvY2lhdGVkTWVkaWGiZCRyZWZyc2NoZW1hOk1lZGlhT2JqZWN0a2Rlc2NyaXB0aW9ueFdBIG1lZGlhIG9iamVjdCB0aGF0IGVuY29kZXMgdGhpcyBDcmVhdGl2ZVdvcmsuIFRoaXMgcHJvcGVydHkgaXMgYSBzeW5vbnltIGZvciBlbmNvZGluZy5vY29udGVudExvY2F0aW9uomQkcmVmbHNjaGVtYTpQbGFjZWtkZXNjcmlwdGlvbnhpVGhlIGxvY2F0aW9uIGRlcGljdGVkIG9yIGRlc2NyaWJlZCBpbiB0aGUgY29udGVudC4gRm9yIGV4YW1wbGUsIHRoZSBsb2NhdGlvbiBpbiBhIHBob3RvZ3JhcGggb3IgcGFpbnRpbmcub2NvcHlyaWdodEhvbGRlcqJlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbng6VGhlIHBhcnR5IGhvbGRpbmcgdGhlIGxlZ2FsIGNvcHlyaWdodCB0byB0aGUgQ3JlYXRpdmVXb3JrLm9jb3B5cmlnaHROb3RpY2WiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueJRUZXh0IG9mIGEgbm90aWNlIGFwcHJvcHJpYXRlIGZvciBkZXNjcmliaW5nIHRoZSBjb3B5cmlnaHQgYXNwZWN0cyBvZiB0aGlzIENyZWF0aXZlIFdvcmssIGlkZWFsbHkgaW5kaWNhdGluZyB0aGUgb3duZXIgb2YgdGhlIGNvcHlyaWdodCBmb3IgdGhlIFdvcmsub2NvdW50cnlPZk9yaWdpbqJkJHJlZm5zY2hlbWE6Q291bnRyeWtkZXNjcmlwdGlvbnkCYVRoZSBjb3VudHJ5IG9mIG9yaWdpbiBvZiBzb21ldGhpbmcsIGluY2x1ZGluZyBwcm9kdWN0cyBhcyB3ZWxsIGFzIGNyZWF0aXZlICB3b3JrcyBzdWNoIGFzIG1vdmllIGFuZCBUViBjb250ZW50LgoKSW4gdGhlIGNhc2Ugb2YgVFYgYW5kIG1vdmllLCB0aGlzIHdvdWxkIGJlIHRoZSBjb3VudHJ5IG9mIHRoZSBwcmluY2lwbGUgb2ZmaWNlcyBvZiB0aGUgcHJvZHVjdGlvbiBjb21wYW55IG9yIGluZGl2aWR1YWwgcmVzcG9uc2libGUgZm9yIHRoZSBtb3ZpZS4gRm9yIG90aGVyIGtpbmRzIG9mIFtbQ3JlYXRpdmVXb3JrXV0gaXQgaXMgZGlmZmljdWx0IHRvIHByb3ZpZGUgZnVsbHkgZ2VuZXJhbCBndWlkYW5jZSwgYW5kIHByb3BlcnRpZXMgc3VjaCBhcyBbW2NvbnRlbnRMb2NhdGlvbl1dIGFuZCBbW2xvY2F0aW9uQ3JlYXRlZF1dIG1heSBiZSBtb3JlIGFwcGxpY2FibGUuCgpJbiB0aGUgY2FzZSBvZiBwcm9kdWN0cywgdGhlIGNvdW50cnkgb2Ygb3JpZ2luIG9mIHRoZSBwcm9kdWN0LiBUaGUgZXhhY3QgaW50ZXJwcmV0YXRpb24gb2YgdGhpcyBtYXkgdmFyeSBieSBjb250ZXh0IGFuZCBwcm9kdWN0IHR5cGUsIGFuZCBjYW5ub3QgYmUgZnVsbHkgZW51bWVyYXRlZCBoZXJlLm9sb2NhdGlvbkNyZWF0ZWSiZCRyZWZsc2NoZW1hOlBsYWNla2Rlc2NyaXB0aW9ueHhUaGUgbG9jYXRpb24gd2hlcmUgdGhlIENyZWF0aXZlV29yayB3YXMgY3JlYXRlZCwgd2hpY2ggbWF5IG5vdCBiZSB0aGUgc2FtZSBhcyB0aGUgbG9jYXRpb24gZGVwaWN0ZWQgaW4gdGhlIENyZWF0aXZlV29yay5vc2REYXRlUHVibGlzaGVkomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGRkYXRlomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZWtkZXNjcmlwdGlvbnh7SW5kaWNhdGVzIHRoZSBkYXRlIG9uIHdoaWNoIHRoZSBjdXJyZW50IHN0cnVjdHVyZWQgZGF0YSB3YXMgZ2VuZXJhdGVkIC8gcHVibGlzaGVkLiBUeXBpY2FsbHkgdXNlZCBhbG9uZ3NpZGUgW1tzZFB1Ymxpc2hlcl1db3NwYXRpYWxDb3ZlcmFnZaJkJHJlZmxzY2hlbWE6UGxhY2VrZGVzY3JpcHRpb255AYFUaGUgc3BhdGlhbENvdmVyYWdlIG9mIGEgQ3JlYXRpdmVXb3JrIGluZGljYXRlcyB0aGUgcGxhY2Uocykgd2hpY2ggYXJlIHRoZSBmb2N1cyBvZiB0aGUgY29udGVudC4gSXQgaXMgYSBzdWJwcm9wZXJ0eSBvZgogICAgICBjb250ZW50TG9jYXRpb24gaW50ZW5kZWQgcHJpbWFyaWx5IGZvciBtb3JlIHRlY2huaWNhbCBhbmQgZGV0YWlsZWQgbWF0ZXJpYWxzLiBGb3IgZXhhbXBsZSB3aXRoIGEgRGF0YXNldCwgaXQgaW5kaWNhdGVzCiAgICAgIGFyZWFzIHRoYXQgdGhlIGRhdGFzZXQgZGVzY3JpYmVzOiBhIGRhdGFzZXQgb2YgTmV3IFlvcmsgd2VhdGhlciB3b3VsZCBoYXZlIHNwYXRpYWxDb3ZlcmFnZSB3aGljaCB3YXMgdGhlIHBsYWNlOiB0aGUgc3RhdGUgb2YgTmV3IFlvcmsub3R5cGljYWxBZ2VSYW5nZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254MlRoZSB0eXBpY2FsIGV4cGVjdGVkIGFnZSByYW5nZSwgZS5nLiAnNy05JywgJzExLScub3dvcmtUcmFuc2xhdGlvbqJlb25lT2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnjsQSB3b3JrIHRoYXQgaXMgYSB0cmFuc2xhdGlvbiBvZiB0aGUgY29udGVudCBvZiB0aGlzIHdvcmsuIGUuZy4g6KW/6YGK6KiYIGhhcyBhbiBFbmdsaXNoIHdvcmtUcmFuc2xhdGlvbiDigJxKb3VybmV5IHRvIHRoZSBXZXN04oCdLGEgR2VybWFuIHdvcmtUcmFuc2xhdGlvbiDigJxNb25rZXlzIFBpbGdlcmZhaHJ04oCdIGFuZCBhIFZpZXRuYW1lc2UgIHRyYW5zbGF0aW9uIFTDonkgZHUga8O9IGLDrG5oIGto4bqjby5wYWNjZXNzaWJpbGl0eUFQSaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254q0luZGljYXRlcyB0aGF0IHRoZSByZXNvdXJjZSBpcyBjb21wYXRpYmxlIHdpdGggdGhlIHJlZmVyZW5jZWQgYWNjZXNzaWJpbGl0eSBBUEkgKFtXZWJTY2hlbWFzIHdpa2kgbGlzdHMgcG9zc2libGUgdmFsdWVzXShodHRwOi8vd3d3LnczLm9yZy93aWtpL1dlYlNjaGVtYXMvQWNjZXNzaWJpbGl0eSkpLnBlZHVjYXRpb25hbExldmVsomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybWtkZXNjcmlwdGlvbnjDVGhlIGxldmVsIGluIHRlcm1zIG9mIHByb2dyZXNzaW9uIHRocm91Z2ggYW4gZWR1Y2F0aW9uYWwgb3IgdHJhaW5pbmcgY29udGV4dC4gRXhhbXBsZXMgb2YgZWR1Y2F0aW9uYWwgbGV2ZWxzIGluY2x1ZGUgJ2JlZ2lubmVyJywgJ2ludGVybWVkaWF0ZScgb3IgJ2FkdmFuY2VkJywgYW5kIGZvcm1hbCBzZXRzIG9mIGxldmVsIGluZGljYXRvcnMucGlzRmFtaWx5RnJpZW5kbHmiZHR5cGVnYm9vbGVhbmtkZXNjcmlwdGlvbngySW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBjb250ZW50IGlzIGZhbWlseSBmcmllbmRseS5wcHVibGlzaGVySW1wcmludKJkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9ua2Rlc2NyaXB0aW9ueDJUaGUgcHVibGlzaGluZyBkaXZpc2lvbiB3aGljaCBwdWJsaXNoZWQgdGhlIGNvbWljLnB0ZW1wb3JhbENvdmVyYWdlomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGlkYXRlLXRpbWWiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueQQrVGhlIHRlbXBvcmFsQ292ZXJhZ2Ugb2YgYSBDcmVhdGl2ZVdvcmsgaW5kaWNhdGVzIHRoZSBwZXJpb2QgdGhhdCB0aGUgY29udGVudCBhcHBsaWVzIHRvLCBpLmUuIHRoYXQgaXQgZGVzY3JpYmVzLCBlaXRoZXIgYXMgYSBEYXRlVGltZSBvciBhcyBhIHRleHR1YWwgc3RyaW5nIGluZGljYXRpbmcgYSB0aW1lIHBlcmlvZCBpbiBbSVNPIDg2MDEgdGltZSBpbnRlcnZhbCBmb3JtYXRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI1RpbWVfaW50ZXJ2YWxzKS4gSW4KICAgICAgdGhlIGNhc2Ugb2YgYSBEYXRhc2V0IGl0IHdpbGwgdHlwaWNhbGx5IGluZGljYXRlIHRoZSByZWxldmFudCB0aW1lIHBlcmlvZCBpbiBhIHByZWNpc2Ugbm90YXRpb24gKGUuZy4gZm9yIGEgMjAxMSBjZW5zdXMgZGF0YXNldCwgdGhlIHllYXIgMjAxMSB3b3VsZCBiZSB3cml0dGVuICIyMDExLzIwMTIiKS4gT3RoZXIgZm9ybXMgb2YgY29udGVudCBlLmcuIFNjaG9sYXJseUFydGljbGUsIEJvb2ssIFRWU2VyaWVzIG9yIFRWRXBpc29kZSBtYXkgaW5kaWNhdGUgdGhlaXIgdGVtcG9yYWxDb3ZlcmFnZSBpbiBicm9hZGVyIHRlcm1zIC0gdGV4dHVhbGx5IG9yIHZpYSB3ZWxsLWtub3duIFVSTC4KICAgICAgV3JpdHRlbiB3b3JrcyBzdWNoIGFzIGJvb2tzIG1heSBzb21ldGltZXMgaGF2ZSBwcmVjaXNlIHRlbXBvcmFsIGNvdmVyYWdlIHRvbywgZS5nLiBhIHdvcmsgc2V0IGluIDE5MzkgLSAxOTQ1IGNhbiBiZSBpbmRpY2F0ZWQgaW4gSVNPIDg2MDEgaW50ZXJ2YWwgZm9ybWF0IGZvcm1hdCB2aWEgIjE5MzkvMTk0NSIuCgpPcGVuLWVuZGVkIGRhdGUgcmFuZ2VzIGNhbiBiZSB3cml0dGVuIHdpdGggIi4uIiBpbiBwbGFjZSBvZiB0aGUgZW5kIGRhdGUuIEZvciBleGFtcGxlLCAiMjAxNS0xMS8uLiIgaW5kaWNhdGVzIGEgcmFuZ2UgYmVnaW5uaW5nIGluIE5vdmVtYmVyIDIwMTUgYW5kIHdpdGggbm8gc3BlY2lmaWVkIGZpbmFsIGRhdGUuIFRoaXMgaXMgdGVudGF0aXZlIGFuZCBtaWdodCBiZSB1cGRhdGVkIGluIGZ1dHVyZSB3aGVuIElTTyA4NjAxIGlzIG9mZmljaWFsbHkgdXBkYXRlZC5xYWNjb3VudGFibGVQZXJzb26iZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnhGU3BlY2lmaWVzIHRoZSBQZXJzb24gdGhhdCBpcyBsZWdhbGx5IGFjY291bnRhYmxlIGZvciB0aGUgQ3JlYXRpdmVXb3JrLnFpbnRlcmFjdGl2aXR5VHlwZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254flRoZSBwcmVkb21pbmFudCBtb2RlIG9mIGxlYXJuaW5nIHN1cHBvcnRlZCBieSB0aGUgbGVhcm5pbmcgcmVzb3VyY2UuIEFjY2VwdGFibGUgdmFsdWVzIGFyZSAnYWN0aXZlJywgJ2V4cG9zaXRpdmUnLCBvciAnbWl4ZWQnLnF0cmFuc2xhdGlvbk9mV29ya6JkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueHVUaGUgd29yayB0aGF0IHRoaXMgd29yayBoYXMgYmVlbiB0cmFuc2xhdGVkIGZyb20uIGUuZy4g54mp56eN6LW35rqQIGlzIGEgdHJhbnNsYXRpb25PZiDigJxPbiB0aGUgT3JpZ2luIG9mIFNwZWNpZXPigJ1yYWNxdWlyZUxpY2Vuc2VQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnhnSW5kaWNhdGVzIGEgcGFnZSBkb2N1bWVudGluZyBob3cgbGljZW5zZXMgY2FuIGJlIHB1cmNoYXNlZCBvciBvdGhlcndpc2UgYWNxdWlyZWQsIGZvciB0aGUgY3VycmVudCBpdGVtLnJjb25kaXRpb25zT2ZBY2Nlc3OiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueQGiQ29uZGl0aW9ucyB0aGF0IGFmZmVjdCB0aGUgYXZhaWxhYmlsaXR5IG9mLCBvciBtZXRob2Qocykgb2YgYWNjZXNzIHRvLCBhbiBpdGVtLiBUeXBpY2FsbHkgdXNlZCBmb3IgcmVhbCB3b3JsZCBpdGVtcyBzdWNoIGFzIGFuIFtbQXJjaGl2ZUNvbXBvbmVudF1dIGhlbGQgYnkgYW4gW1tBcmNoaXZlT3JnYW5pemF0aW9uXV0uIFRoaXMgcHJvcGVydHkgaXMgbm90IHN1aXRhYmxlIGZvciB1c2UgYXMgYSBnZW5lcmFsIFdlYiBhY2Nlc3MgY29udHJvbCBtZWNoYW5pc20uIEl0IGlzIGV4cHJlc3NlZCBvbmx5IGluIG5hdHVyYWwgbGFuZ3VhZ2UuXG5cbkZvciBleGFtcGxlICJBdmFpbGFibGUgYnkgYXBwb2ludG1lbnQgZnJvbSB0aGUgUmVhZGluZyBSb29tIiBvciAiQWNjZXNzaWJsZSBvbmx5IGZyb20gbG9nZ2VkLWluIGFjY291bnRzICIuIHJjcmVhdGl2ZVdvcmtTdGF0dXOiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueNlUaGUgc3RhdHVzIG9mIGEgY3JlYXRpdmUgd29yayBpbiB0ZXJtcyBvZiBpdHMgc3RhZ2UgaW4gYSBsaWZlY3ljbGUuIEV4YW1wbGUgdGVybXMgaW5jbHVkZSBJbmNvbXBsZXRlLCBEcmFmdCwgUHVibGlzaGVkLCBPYnNvbGV0ZS4gU29tZSBvcmdhbml6YXRpb25zIGRlZmluZSBhIHNldCBvZiB0ZXJtcyBmb3IgdGhlIHN0YWdlcyBvZiB0aGVpciBwdWJsaWNhdGlvbiBsaWZlY3ljbGUucmludGVycHJldGVkQXNDbGFpbaJlb25lT2aCoWQkcmVmbHNjaGVtYTpDbGFpbaJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZmxzY2hlbWE6Q2xhaW1rZGVzY3JpcHRpb2540FVzZWQgdG8gaW5kaWNhdGUgYSBzcGVjaWZpYyBjbGFpbSBjb250YWluZWQsIGltcGxpZWQsIHRyYW5zbGF0ZWQgb3IgcmVmaW5lZCBmcm9tIHRoZSBjb250ZW50IG9mIGEgW1tNZWRpYU9iamVjdF1dIG9yIG90aGVyIFtbQ3JlYXRpdmVXb3JrXV0uIFRoZSBpbnRlcnByZXRpbmcgcGFydHkgY2FuIGJlIGluZGljYXRlZCB1c2luZyBbW2NsYWltSW50ZXJwcmV0ZXJdXS5yc291cmNlT3JnYW5pemF0aW9uomQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb25rZGVzY3JpcHRpb254OVRoZSBPcmdhbml6YXRpb24gb24gd2hvc2UgYmVoYWxmIHRoZSBjcmVhdG9yIHdhcyB3b3JraW5nLnNhY2Nlc3NpYmlsaXR5SGF6YXJkomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjZQSBjaGFyYWN0ZXJpc3RpYyBvZiB0aGUgZGVzY3JpYmVkIHJlc291cmNlIHRoYXQgaXMgcGh5c2lvbG9naWNhbGx5IGRhbmdlcm91cyB0byBzb21lIHVzZXJzLiBSZWxhdGVkIHRvIFdDQUcgMi4wIGd1aWRlbGluZSAyLjMgKFtXZWJTY2hlbWFzIHdpa2kgbGlzdHMgcG9zc2libGUgdmFsdWVzXShodHRwOi8vd3d3LnczLm9yZy93aWtpL1dlYlNjaGVtYXMvQWNjZXNzaWJpbGl0eSkpLnNhbHRlcm5hdGl2ZUhlYWRsaW5lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngmQSBzZWNvbmRhcnkgdGl0bGUgb2YgdGhlIENyZWF0aXZlV29yay5zaXNBY2Nlc3NpYmxlRm9yRnJlZaJkdHlwZWdib29sZWFua2Rlc2NyaXB0aW9ueEdBIGZsYWcgdG8gc2lnbmFsIHRoYXQgdGhlIGl0ZW0sIGV2ZW50LCBvciBwbGFjZSBpcyBhY2Nlc3NpYmxlIGZvciBmcmVlLnRhY2Nlc3NNb2RlU3VmZmljaWVudKJlb25lT2aCoWQkcmVmb3NjaGVtYTpJdGVtTGlzdKJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm9zY2hlbWE6SXRlbUxpc3RrZGVzY3JpcHRpb254u0EgbGlzdCBvZiBzaW5nbGUgb3IgY29tYmluZWQgYWNjZXNzTW9kZXMgdGhhdCBhcmUgc3VmZmljaWVudCB0byB1bmRlcnN0YW5kIGFsbCB0aGUgaW50ZWxsZWN0dWFsIGNvbnRlbnQgb2YgYSByZXNvdXJjZS4gRXhwZWN0ZWQgdmFsdWVzIGluY2x1ZGU6ICBhdWRpdG9yeSwgdGFjdGlsZSwgdGV4dHVhbCwgdmlzdWFsLgogICAgICB0YWNjZXNzaWJpbGl0eUNvbnRyb2yiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueLBJZGVudGlmaWVzIGlucHV0IG1ldGhvZHMgdGhhdCBhcmUgc3VmZmljaWVudCB0byBmdWxseSBjb250cm9sIHRoZSBkZXNjcmliZWQgcmVzb3VyY2UgKFtXZWJTY2hlbWFzIHdpa2kgbGlzdHMgcG9zc2libGUgdmFsdWVzXShodHRwOi8vd3d3LnczLm9yZy93aWtpL1dlYlNjaGVtYXMvQWNjZXNzaWJpbGl0eSkpLnRhY2Nlc3NpYmlsaXR5RmVhdHVyZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2540UNvbnRlbnQgZmVhdHVyZXMgb2YgdGhlIHJlc291cmNlLCBzdWNoIGFzIGFjY2Vzc2libGUgbWVkaWEsIGFsdGVybmF0aXZlcyBhbmQgc3VwcG9ydGVkIGVuaGFuY2VtZW50cyBmb3IgYWNjZXNzaWJpbGl0eSAoW1dlYlNjaGVtYXMgd2lraSBsaXN0cyBwb3NzaWJsZSB2YWx1ZXNdKGh0dHA6Ly93d3cudzMub3JnL3dpa2kvV2ViU2NoZW1hcy9BY2Nlc3NpYmlsaXR5KSkudGFjY2Vzc2liaWxpdHlTdW1tYXJ5omR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkBQ0EgaHVtYW4tcmVhZGFibGUgc3VtbWFyeSBvZiBzcGVjaWZpYyBhY2Nlc3NpYmlsaXR5IGZlYXR1cmVzIG9yIGRlZmljaWVuY2llcywgY29uc2lzdGVudCB3aXRoIHRoZSBvdGhlciBhY2Nlc3NpYmlsaXR5IG1ldGFkYXRhIGJ1dCBleHByZXNzaW5nIHN1YnRsZXRpZXMgc3VjaCBhcyAic2hvcnQgZGVzY3JpcHRpb25zIGFyZSBwcmVzZW50IGJ1dCBsb25nIGRlc2NyaXB0aW9ucyB3aWxsIGJlIG5lZWRlZCBmb3Igbm9uLXZpc3VhbCB1c2VycyIgb3IgInNob3J0IGRlc2NyaXB0aW9ucyBhcmUgcHJlc2VudCBhbmQgbm8gbG9uZyBkZXNjcmlwdGlvbnMgYXJlIG5lZWRlZC4idGNvbnRlbnRSZWZlcmVuY2VUaW1lo2R0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1la2Rlc2NyaXB0aW9ueJFUaGUgc3BlY2lmaWMgdGltZSBkZXNjcmliZWQgYnkgYSBjcmVhdGl2ZSB3b3JrLCBmb3Igd29ya3MgKGUuZy4gYXJ0aWNsZXMsIHZpZGVvIG9iamVjdHMgZXRjLikgdGhhdCBlbXBoYXNpc2UgYSBwYXJ0aWN1bGFyIG1vbWVudCB3aXRoaW4gYW4gRXZlbnQudGVkdWNhdGlvbmFsQWxpZ25tZW50omVvbmVPZoKhZCRyZWZ2c2NoZW1hOkFsaWdubWVudE9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZnZzY2hlbWE6QWxpZ25tZW50T2JqZWN0a2Rlc2NyaXB0aW9uePRBbiBhbGlnbm1lbnQgdG8gYW4gZXN0YWJsaXNoZWQgZWR1Y2F0aW9uYWwgZnJhbWV3b3JrLgoKVGhpcyBwcm9wZXJ0eSBzaG91bGQgbm90IGJlIHVzZWQgd2hlcmUgdGhlIG5hdHVyZSBvZiB0aGUgYWxpZ25tZW50IGNhbiBiZSBkZXNjcmliZWQgdXNpbmcgYSBzaW1wbGUgcHJvcGVydHksIGZvciBleGFtcGxlIHRvIGV4cHJlc3MgdGhhdCBhIHJlc291cmNlIFtbdGVhY2hlc11dIG9yIFtbYXNzZXNzZXNdXSBhIGNvbXBldGVuY3kudGludGVyYWN0aW9uU3RhdGlzdGljomQkcmVmeBlzY2hlbWE6SW50ZXJhY3Rpb25Db3VudGVya2Rlc2NyaXB0aW9ueJxUaGUgbnVtYmVyIG9mIGludGVyYWN0aW9ucyBmb3IgdGhlIENyZWF0aXZlV29yayB1c2luZyB0aGUgV2ViU2l0ZSBvciBTb2Z0d2FyZUFwcGxpY2F0aW9uLiBUaGUgbW9zdCBzcGVjaWZpYyBjaGlsZCB0eXBlIG9mIEludGVyYWN0aW9uQ291bnRlciBzaG91bGQgYmUgdXNlZC50bGVhcm5pbmdSZXNvdXJjZVR5cGWiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueGpUaGUgcHJlZG9taW5hbnQgdHlwZSBvciBraW5kIGNoYXJhY3Rlcml6aW5nIHRoZSBsZWFybmluZyByZXNvdXJjZS4gRm9yIGV4YW1wbGUsICdwcmVzZW50YXRpb24nLCAnaGFuZG91dCcudHB1Ymxpc2hpbmdQcmluY2lwbGVzomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnkCYVRoZSBwdWJsaXNoaW5nUHJpbmNpcGxlcyBwcm9wZXJ0eSBpbmRpY2F0ZXMgKHR5cGljYWxseSB2aWEgW1tVUkxdXSkgYSBkb2N1bWVudCBkZXNjcmliaW5nIHRoZSBlZGl0b3JpYWwgcHJpbmNpcGxlcyBvZiBhbiBbW09yZ2FuaXphdGlvbl1dIChvciBpbmRpdmlkdWFsIGUuZy4gYSBbW1BlcnNvbl1dIHdyaXRpbmcgYSBibG9nKSB0aGF0IHJlbGF0ZSB0byB0aGVpciBhY3Rpdml0aWVzIGFzIGEgcHVibGlzaGVyLCBlLmcuIGV0aGljcyBvciBkaXZlcnNpdHkgcG9saWNpZXMuIFdoZW4gYXBwbGllZCB0byBhIFtbQ3JlYXRpdmVXb3JrXV0gKGUuZy4gW1tOZXdzQXJ0aWNsZV1dKSB0aGUgcHJpbmNpcGxlcyBhcmUgdGhvc2Ugb2YgdGhlIHBhcnR5IHByaW1hcmlseSByZXNwb25zaWJsZSBmb3IgdGhlIGNyZWF0aW9uIG9mIHRoZSBbW0NyZWF0aXZlV29ya11dLgoKV2hpbGUgc3VjaCBwb2xpY2llcyBhcmUgbW9zdCB0eXBpY2FsbHkgZXhwcmVzc2VkIGluIG5hdHVyYWwgbGFuZ3VhZ2UsIHNvbWV0aW1lcyByZWxhdGVkIGluZm9ybWF0aW9uIChlLmcuIGluZGljYXRpbmcgYSBbW2Z1bmRlcl1dKSBjYW4gYmUgZXhwcmVzc2VkIHVzaW5nIHNjaGVtYS5vcmcgdGVybWlub2xvZ3kuCmtkZXNjcmlwdGlvbnhlVGhlIG1vc3QgZ2VuZXJpYyBraW5kIG9mIGNyZWF0aXZlIHdvcmssIGluY2x1ZGluZyBib29rcywgbW92aWVzLCBwaG90b2dyYXBocywgc29mdHdhcmUgcHJvZ3JhbXMsIGV0Yy5rZGVzY3JpcHRpb25uQW4gaW1hZ2UgZmlsZS5maGVhZGVyomZ1bmlxdWVwMC8xUytlYkJGWU92VUQ0d2tjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1fryewpixu1t5ki8ux02jqmec5joamaf8eohhtyt46f62l0ymbwtts0"},"kjzl6cwe1jw14ah6mtih4g6pquwokq9g3cmdhets2gmhvs7vwqgirbwxsmqihmr":{"alias":"GeoShape","commits":[{"jws":{"payload":"AXESIPGPyWl1DKNtAzGgUS2bQhEqL9UkstZ3NwJ1-NOuzMu6","signatures":[{"signature":"-1YdW1aTxzXVwDflWpSSENmJL4Cf3ArPOz-G53FjnAgRbGsUg2ixIq7VUApckqWvimedZYicxbTbvW1go9tHCQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihrr7ews5imunwqgmnakewzwqqrfix5kjfs2z3toatv7dj25tglxi"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HSMvZGVmaW5pdGlvbnMvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcuZXRpdGxlaEdlb1NoYXBlZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzqGNib3iiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueM1BIGJveCBpcyB0aGUgYXJlYSBlbmNsb3NlZCBieSB0aGUgcmVjdGFuZ2xlIGZvcm1lZCBieSB0d28gcG9pbnRzLiBUaGUgZmlyc3QgcG9pbnQgaXMgdGhlIGxvd2VyIGNvcm5lciwgdGhlIHNlY29uZCBwb2ludCBpcyB0aGUgdXBwZXIgY29ybmVyLiBBIGJveCBpcyBleHByZXNzZWQgYXMgdHdvIHBvaW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZSBjaGFyYWN0ZXIuZGxpbmWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueJJBIGxpbmUgaXMgYSBwb2ludC10by1wb2ludCBwYXRoIGNvbnNpc3Rpbmcgb2YgdHdvIG9yIG1vcmUgcG9pbnRzLiBBIGxpbmUgaXMgZXhwcmVzc2VkIGFzIGEgc2VyaWVzIG9mIHR3byBvciBtb3JlIHBvaW50IG9iamVjdHMgc2VwYXJhdGVkIGJ5IHNwYWNlLmZjaXJjbGWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueKVBIGNpcmNsZSBpcyB0aGUgY2lyY3VsYXIgcmVnaW9uIG9mIGEgc3BlY2lmaWVkIHJhZGl1cyBjZW50ZXJlZCBhdCBhIHNwZWNpZmllZCBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlLiBBIGNpcmNsZSBpcyBleHByZXNzZWQgYXMgYSBwYWlyIGZvbGxvd2VkIGJ5IGEgcmFkaXVzIGluIG1ldGVycy5nYWRkcmVzc6JlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UG9zdGFsQWRkcmVzc2tkZXNjcmlwdGlvbngdUGh5c2ljYWwgYWRkcmVzcyBvZiB0aGUgaXRlbS5ncG9seWdvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2546EEgcG9seWdvbiBpcyB0aGUgYXJlYSBlbmNsb3NlZCBieSBhIHBvaW50LXRvLXBvaW50IHBhdGggZm9yIHdoaWNoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHBvaW50cyBhcmUgdGhlIHNhbWUuIEEgcG9seWdvbiBpcyBleHByZXNzZWQgYXMgYSBzZXJpZXMgb2YgZm91ciBvciBtb3JlIHNwYWNlIGRlbGltaXRlZCBwb2ludHMgd2hlcmUgdGhlIGZpcnN0IGFuZCBmaW5hbCBwb2ludHMgYXJlIGlkZW50aWNhbC5pZWxldmF0aW9uomVhbnlPZoKhZHR5cGVmbnVtYmVyoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjwVGhlIGVsZXZhdGlvbiBvZiBhIGxvY2F0aW9uIChbV0dTIDg0XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Xb3JsZF9HZW9kZXRpY19TeXN0ZW0pKS4gVmFsdWVzIG1heSBiZSBvZiB0aGUgZm9ybSAnTlVNQkVSIFVOSVRfT0ZfTUVBU1VSRU1FTlQnIChlLmcuLCAnMSwwMDAgbScsICczLDIwMCBmdCcpIHdoaWxlIG51bWJlcnMgYWxvbmUgc2hvdWxkIGJlIGFzc3VtZWQgdG8gYmUgYSB2YWx1ZSBpbiBtZXRlcnMuanBvc3RhbENvZGWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueCRUaGUgcG9zdGFsIGNvZGUuIEZvciBleGFtcGxlLCA5NDA0My5uYWRkcmVzc0NvdW50cnmiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZuc2NoZW1hOkNvdW50cnlrZGVzY3JpcHRpb254jlRoZSBjb3VudHJ5LiBGb3IgZXhhbXBsZSwgVVNBLiBZb3UgY2FuIGFsc28gcHJvdmlkZSB0aGUgdHdvLWxldHRlciBbSVNPIDMxNjYtMSBhbHBoYS0yIGNvdW50cnkgY29kZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fMzE2Ni0xKS5rZGVmaW5pdGlvbnOjZVRoaW5npGR0eXBlZm9iamVjdGV0aXRsZWVUaGluZ2pwcm9wZXJ0aWVzrmN1cmyjZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb25wVVJMIG9mIHRoZSBpdGVtLmRuYW1lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnVUaGUgbmFtZSBvZiB0aGUgaXRlbS5lQHR5cGWhZHR5cGVmc3RyaW5nZWltYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb254UUFuIGltYWdlIG9mIHRoZSBpdGVtLiBUaGlzIGNhbiBiZSBhIFtbVVJMXV0gb3IgYSBmdWxseSBkZXNjcmliZWQgW1tJbWFnZU9iamVjdF1dLmZzYW1lQXOiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnidVVJMIG9mIGEgcmVmZXJlbmNlIFdlYiBwYWdlIHRoYXQgdW5hbWJpZ3VvdXNseSBpbmRpY2F0ZXMgdGhlIGl0ZW0ncyBpZGVudGl0eS4gRS5nLiB0aGUgVVJMIG9mIHRoZSBpdGVtJ3MgV2lraXBlZGlhIHBhZ2UsIFdpa2lkYXRhIGVudHJ5LCBvciBvZmZpY2lhbCB3ZWJzaXRlLmhAY29udGV4dKFkdHlwZWZzdHJpbmdpc3ViamVjdE9momVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueClBIENyZWF0aXZlV29yayBvciBFdmVudCBhYm91dCB0aGlzIFRoaW5nLmppZGVudGlmaWVyomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVla2Rlc2NyaXB0aW9ueQFJVGhlIGlkZW50aWZpZXIgcHJvcGVydHkgcmVwcmVzZW50cyBhbnkga2luZCBvZiBpZGVudGlmaWVyIGZvciBhbnkga2luZCBvZiBbW1RoaW5nXV0sIHN1Y2ggYXMgSVNCTnMsIEdUSU4gY29kZXMsIFVVSURzIGV0Yy4gU2NoZW1hLm9yZyBwcm92aWRlcyBkZWRpY2F0ZWQgcHJvcGVydGllcyBmb3IgcmVwcmVzZW50aW5nIG1hbnkgb2YgdGhlc2UsIGVpdGhlciBhcyB0ZXh0dWFsIHN0cmluZ3Mgb3IgYXMgVVJMIChVUkkpIGxpbmtzLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI2lkZW50aWZpZXJCZykgZm9yIG1vcmUgZGV0YWlscy4KICAgICAgICBrZGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueBpBIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtLm1hbHRlcm5hdGVOYW1lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnZBbiBhbGlhcyBmb3IgdGhlIGl0ZW0ubmFkZGl0aW9uYWxUeXBlomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb255AZ9BbiBhZGRpdGlvbmFsIHR5cGUgZm9yIHRoZSBpdGVtLCB0eXBpY2FsbHkgdXNlZCBmb3IgYWRkaW5nIG1vcmUgc3BlY2lmaWMgdHlwZXMgZnJvbSBleHRlcm5hbCB2b2NhYnVsYXJpZXMgaW4gbWljcm9kYXRhIHN5bnRheC4gVGhpcyBpcyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHNvbWV0aGluZyBhbmQgYSBjbGFzcyB0aGF0IHRoZSB0aGluZyBpcyBpbi4gSW4gUkRGYSBzeW50YXgsIGl0IGlzIGJldHRlciB0byB1c2UgdGhlIG5hdGl2ZSBSREZhIHN5bnRheCAtIHRoZSAndHlwZW9mJyBhdHRyaWJ1dGUgLSBmb3IgbXVsdGlwbGUgdHlwZXMuIFNjaGVtYS5vcmcgdG9vbHMgbWF5IGhhdmUgb25seSB3ZWFrZXIgdW5kZXJzdGFuZGluZyBvZiBleHRyYSB0eXBlcywgaW4gcGFydGljdWxhciB0aG9zZSBkZWZpbmVkIGV4dGVybmFsbHkub3BvdGVudGlhbEFjdGlvbqJlb25lT2aCoWQkcmVmbXNjaGVtYTpBY3Rpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOkFjdGlvbmtkZXNjcmlwdGlvbnhySW5kaWNhdGVzIGEgcG90ZW50aWFsIEFjdGlvbiwgd2hpY2ggZGVzY3JpYmVzIGFuIGlkZWFsaXplZCBhY3Rpb24gaW4gd2hpY2ggdGhpcyB0aGluZyB3b3VsZCBwbGF5IGFuICdvYmplY3QnIHJvbGUucG1haW5FbnRpdHlPZlBhZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueLBJbmRpY2F0ZXMgYSBwYWdlIChvciBvdGhlciBDcmVhdGl2ZVdvcmspIGZvciB3aGljaCB0aGlzIHRoaW5nIGlzIHRoZSBtYWluIGVudGl0eSBiZWluZyBkZXNjcmliZWQuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjbWFpbkVudGl0eUJhY2tncm91bmQpIGZvciBkZXRhaWxzLngZZGlzYW1iaWd1YXRpbmdEZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2547EEgc3ViIHByb3BlcnR5IG9mIGRlc2NyaXB0aW9uLiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGZyb20gb3RoZXIsIHNpbWlsYXIgaXRlbXMuIEluZm9ybWF0aW9uIGZyb20gb3RoZXIgcHJvcGVydGllcyAoaW4gcGFydGljdWxhciwgbmFtZSkgbWF5IGJlIG5lY2Vzc2FyeSBmb3IgdGhlIGRlc2NyaXB0aW9uIHRvIGJlIHVzZWZ1bCBmb3IgZGlzYW1iaWd1YXRpb24ua2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5qSW50YW5naWJsZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmcyMvZGVmaW5pdGlvbnMvVGhpbmdrZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmV0aXRsZWpJbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5vU3RydWN0dXJlZFZhbHVlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlb1N0cnVjdHVyZWRWYWx1ZWtkZXNjcmlwdGlvbniXU3RydWN0dXJlZCB2YWx1ZXMgYXJlIHVzZWQgd2hlbiB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eSBoYXMgYSBtb3JlIGNvbXBsZXggc3RydWN0dXJlIHRoYW4gc2ltcGx5IGJlaW5nIGEgdGV4dHVhbCB2YWx1ZSBvciBhIHJlZmVyZW5jZSB0byBhbm90aGVyIHRoaW5nLmtkZXNjcmlwdGlvbnkBG1RoZSBnZW9ncmFwaGljIHNoYXBlIG9mIGEgcGxhY2UuIEEgR2VvU2hhcGUgY2FuIGJlIGRlc2NyaWJlZCB1c2luZyBzZXZlcmFsIHByb3BlcnRpZXMgd2hvc2UgdmFsdWVzIGFyZSBiYXNlZCBvbiBsYXRpdHVkZS9sb25naXR1ZGUgcGFpcnMuIEVpdGhlciB3aGl0ZXNwYWNlIG9yIGNvbW1hcyBjYW4gYmUgdXNlZCB0byBzZXBhcmF0ZSBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlOyB3aGl0ZXNwYWNlIHNob3VsZCBiZSB1c2VkIHdoZW4gd3JpdGluZyBhIGxpc3Qgb2Ygc2V2ZXJhbCBzdWNoIHBvaW50cy5maGVhZGVyomZ1bmlxdWVwbkgrYnIrWkIyT3RXWnAyUmtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1fryii769vdrn3r2zserer6ftr3vtfrli7z60o2ws5hecq8blojhds0"},"kjzl6cwe1jw14avger5j53ukodi94mwogvycv1ryonc7zv84hgq3wipb5w6e420":{"alias":"PostalAddress","commits":[{"jws":{"payload":"AXESIEH2cu78IvaEKS88ipV-BEyHu0I0m63tNVuLskPCoAfh","signatures":[{"signature":"YLKI6a-Q4GBXIdjCIovmkxMKobrC1EzQheaOAFUOnz3fqCLjphw5-NDe6yvb3lF3b82jWMhRNUlu7MVfQq0PDw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicb6zzo57bc62ccslz4rkkx4bcmq65uene3vxwtkw4lwjb4fiah4e"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frylboox3c4bdf1c1swywe038bgsmun9ywv21rw6xnr8zzdwtgcu80"},"kjzl6cwe1jw149p2ywddp1xx9l9y92xu0vitjw9fdaqp88fe96kpsox6jtim6jh":{"alias":"Country","commits":[{"jws":{"payload":"AXESINT_px3YlpzTmQ5vkm17Ea5a9AaVQqUSZFWHdnIFh7cK","signatures":[{"signature":"FRI6KM0CFT_qBJa7DxvX9THm0PkWJpDa7t-_sBYZXXm6eDY0k0Fbeb5VK0DnYEibfU7old9NNSk1yU3Z7DtQCA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreigu76tr3wewttjzsdtpsjwxwenoll2anfkcuujgivmhozzalb5xbi"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frycyd4675e5t8k7arkkwli85u5hf1akdvejxhdarbg17ykxwdqigw"},"kjzl6cwe1jw1479eig8s4jpte2rtsqx7t64wrpge9vxbjko766qdfukmtgu5xa0":{"alias":"AggregateRating","commits":[{"jws":{"payload":"AXESIKJmPXcV6VExcpGdyep3qOJ1hnT7xZZSchGLIA5OnS54","signatures":[{"signature":"5bq4uULwUIHdGOZMCNvpF4jZgMwZTFfkkwBROsZIZY3ytyreTxN9k-e9-6ynHe2QUgntno9f1LWBeXnvHWwTDw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifcmy6xofpjkeyxfem5zhvhpkhcowdhj66fszjheemleahe5hjopa"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ0Iy9kZWZpbml0aW9ucy9SYXRpbmdrZGVzY3JpcHRpb254Q0EgcmF0aW5nIGlzIGFuIGV2YWx1YXRpb24gb24gYSBudW1lcmljIHNjYWxlLCBzdWNoIGFzIDEgdG8gNSBzdGFycy5ldGl0bGVvQWdncmVnYXRlUmF0aW5nZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzo2tyYXRpbmdDb3VudKJkdHlwZWdpbnRlZ2Vya2Rlc2NyaXB0aW9ueCVUaGUgY291bnQgb2YgdG90YWwgbnVtYmVyIG9mIHJhdGluZ3Mua3Jldmlld0NvdW50omR0eXBlZ2ludGVnZXJrZGVzY3JpcHRpb254JVRoZSBjb3VudCBvZiB0b3RhbCBudW1iZXIgb2YgcmV2aWV3cy5saXRlbVJldmlld2VkomQkcmVmbHNjaGVtYTpUaGluZ2tkZXNjcmlwdGlvbngmVGhlIGl0ZW0gdGhhdCBpcyBiZWluZyByZXZpZXdlZC9yYXRlZC5rZGVmaW5pdGlvbnOjZVRoaW5npGR0eXBlZm9iamVjdGV0aXRsZWVUaGluZ2pwcm9wZXJ0aWVzrmN1cmyjZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb25wVVJMIG9mIHRoZSBpdGVtLmRuYW1lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnVUaGUgbmFtZSBvZiB0aGUgaXRlbS5lQHR5cGWhZHR5cGVmc3RyaW5nZWltYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb254UUFuIGltYWdlIG9mIHRoZSBpdGVtLiBUaGlzIGNhbiBiZSBhIFtbVVJMXV0gb3IgYSBmdWxseSBkZXNjcmliZWQgW1tJbWFnZU9iamVjdF1dLmZzYW1lQXOiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnidVVJMIG9mIGEgcmVmZXJlbmNlIFdlYiBwYWdlIHRoYXQgdW5hbWJpZ3VvdXNseSBpbmRpY2F0ZXMgdGhlIGl0ZW0ncyBpZGVudGl0eS4gRS5nLiB0aGUgVVJMIG9mIHRoZSBpdGVtJ3MgV2lraXBlZGlhIHBhZ2UsIFdpa2lkYXRhIGVudHJ5LCBvciBvZmZpY2lhbCB3ZWJzaXRlLmhAY29udGV4dKFkdHlwZWZzdHJpbmdpc3ViamVjdE9momVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueClBIENyZWF0aXZlV29yayBvciBFdmVudCBhYm91dCB0aGlzIFRoaW5nLmppZGVudGlmaWVyomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVla2Rlc2NyaXB0aW9ueQFJVGhlIGlkZW50aWZpZXIgcHJvcGVydHkgcmVwcmVzZW50cyBhbnkga2luZCBvZiBpZGVudGlmaWVyIGZvciBhbnkga2luZCBvZiBbW1RoaW5nXV0sIHN1Y2ggYXMgSVNCTnMsIEdUSU4gY29kZXMsIFVVSURzIGV0Yy4gU2NoZW1hLm9yZyBwcm92aWRlcyBkZWRpY2F0ZWQgcHJvcGVydGllcyBmb3IgcmVwcmVzZW50aW5nIG1hbnkgb2YgdGhlc2UsIGVpdGhlciBhcyB0ZXh0dWFsIHN0cmluZ3Mgb3IgYXMgVVJMIChVUkkpIGxpbmtzLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI2lkZW50aWZpZXJCZykgZm9yIG1vcmUgZGV0YWlscy4KICAgICAgICBrZGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueBpBIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtLm1hbHRlcm5hdGVOYW1lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnZBbiBhbGlhcyBmb3IgdGhlIGl0ZW0ubmFkZGl0aW9uYWxUeXBlomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb255AZ9BbiBhZGRpdGlvbmFsIHR5cGUgZm9yIHRoZSBpdGVtLCB0eXBpY2FsbHkgdXNlZCBmb3IgYWRkaW5nIG1vcmUgc3BlY2lmaWMgdHlwZXMgZnJvbSBleHRlcm5hbCB2b2NhYnVsYXJpZXMgaW4gbWljcm9kYXRhIHN5bnRheC4gVGhpcyBpcyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHNvbWV0aGluZyBhbmQgYSBjbGFzcyB0aGF0IHRoZSB0aGluZyBpcyBpbi4gSW4gUkRGYSBzeW50YXgsIGl0IGlzIGJldHRlciB0byB1c2UgdGhlIG5hdGl2ZSBSREZhIHN5bnRheCAtIHRoZSAndHlwZW9mJyBhdHRyaWJ1dGUgLSBmb3IgbXVsdGlwbGUgdHlwZXMuIFNjaGVtYS5vcmcgdG9vbHMgbWF5IGhhdmUgb25seSB3ZWFrZXIgdW5kZXJzdGFuZGluZyBvZiBleHRyYSB0eXBlcywgaW4gcGFydGljdWxhciB0aG9zZSBkZWZpbmVkIGV4dGVybmFsbHkub3BvdGVudGlhbEFjdGlvbqJlb25lT2aCoWQkcmVmbXNjaGVtYTpBY3Rpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOkFjdGlvbmtkZXNjcmlwdGlvbnhySW5kaWNhdGVzIGEgcG90ZW50aWFsIEFjdGlvbiwgd2hpY2ggZGVzY3JpYmVzIGFuIGlkZWFsaXplZCBhY3Rpb24gaW4gd2hpY2ggdGhpcyB0aGluZyB3b3VsZCBwbGF5IGFuICdvYmplY3QnIHJvbGUucG1haW5FbnRpdHlPZlBhZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueLBJbmRpY2F0ZXMgYSBwYWdlIChvciBvdGhlciBDcmVhdGl2ZVdvcmspIGZvciB3aGljaCB0aGlzIHRoaW5nIGlzIHRoZSBtYWluIGVudGl0eSBiZWluZyBkZXNjcmliZWQuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjbWFpbkVudGl0eUJhY2tncm91bmQpIGZvciBkZXRhaWxzLngZZGlzYW1iaWd1YXRpbmdEZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2547EEgc3ViIHByb3BlcnR5IG9mIGRlc2NyaXB0aW9uLiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGZyb20gb3RoZXIsIHNpbWlsYXIgaXRlbXMuIEluZm9ybWF0aW9uIGZyb20gb3RoZXIgcHJvcGVydGllcyAoaW4gcGFydGljdWxhciwgbmFtZSkgbWF5IGJlIG5lY2Vzc2FyeSBmb3IgdGhlIGRlc2NyaXB0aW9uIHRvIGJlIHVzZWZ1bCBmb3IgZGlzYW1iaWd1YXRpb24ua2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5mUmF0aW5npWR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlZlJhdGluZ2pwcm9wZXJ0aWVzpmZhdXRob3KiZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb25421RoZSBhdXRob3Igb2YgdGhpcyBjb250ZW50IG9yIHJhdGluZy4gUGxlYXNlIG5vdGUgdGhhdCBhdXRob3IgaXMgc3BlY2lhbCBpbiB0aGF0IEhUTUwgNSBwcm92aWRlcyBhIHNwZWNpYWwgbWVjaGFuaXNtIGZvciBpbmRpY2F0aW5nIGF1dGhvcnNoaXAgdmlhIHRoZSByZWwgdGFnLiBUaGF0IGlzIGVxdWl2YWxlbnQgdG8gdGhpcyBhbmQgbWF5IGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5LmpiZXN0UmF0aW5nomVhbnlPZoKhZHR5cGVmbnVtYmVyoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnhYVGhlIGhpZ2hlc3QgdmFsdWUgYWxsb3dlZCBpbiB0aGlzIHJhdGluZyBzeXN0ZW0uIElmIGJlc3RSYXRpbmcgaXMgb21pdHRlZCwgNSBpcyBhc3N1bWVkLmtyYXRpbmdWYWx1ZaJlYW55T2aCoWR0eXBlZm51bWJlcqFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255AUpUaGUgcmF0aW5nIGZvciB0aGUgY29udGVudC5cblxuVXNhZ2UgZ3VpZGVsaW5lczpcblxuKiBVc2UgdmFsdWVzIGZyb20gMDEyMzQ1Njc4OSAoVW5pY29kZSAnRElHSVQgWkVSTycgKFUrMDAzMCkgdG8gJ0RJR0lUIE5JTkUnIChVKzAwMzkpKSByYXRoZXIgdGhhbiBzdXBlcmZpY2lhbGx5IHNpbWlsaWFyIFVuaWNvZGUgc3ltYm9scy5cbiogVXNlICcuJyAoVW5pY29kZSAnRlVMTCBTVE9QJyAoVSswMDJFKSkgcmF0aGVyIHRoYW4gJywnIHRvIGluZGljYXRlIGEgZGVjaW1hbCBwb2ludC4gQXZvaWQgdXNpbmcgdGhlc2Ugc3ltYm9scyBhcyBhIHJlYWRhYmlsaXR5IHNlcGFyYXRvci5rd29yc3RSYXRpbmeiZWFueU9mgqFkdHlwZWZudW1iZXKhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueFhUaGUgbG93ZXN0IHZhbHVlIGFsbG93ZWQgaW4gdGhpcyByYXRpbmcgc3lzdGVtLiBJZiB3b3JzdFJhdGluZyBpcyBvbWl0dGVkLCAxIGlzIGFzc3VtZWQubHJldmlld0FzcGVjdKJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254TFRoaXMgUmV2aWV3IG9yIFJhdGluZyBpcyByZWxldmFudCB0byB0aGlzIHBhcnQgb3IgZmFjZXQgb2YgdGhlIGl0ZW1SZXZpZXdlZC5xcmF0aW5nRXhwbGFuYXRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9uePxBIHNob3J0IGV4cGxhbmF0aW9uIChlLmcuIG9uZSB0byB0d28gc2VudGVuY2VzKSBwcm92aWRpbmcgYmFja2dyb3VuZCBjb250ZXh0IGFuZCBvdGhlciBpbmZvcm1hdGlvbiB0aGF0IGxlZCB0byB0aGUgY29uY2x1c2lvbiBleHByZXNzZWQgaW4gdGhlIHJhdGluZy4gVGhpcyBpcyBwYXJ0aWN1bGFybHkgYXBwbGljYWJsZSB0byByYXRpbmdzIGFzc29jaWF0ZWQgd2l0aCAiZmFjdCBjaGVjayIgbWFya3VwIHVzaW5nIFtbQ2xhaW1SZXZpZXddXS5rZGVzY3JpcHRpb254Q0EgcmF0aW5nIGlzIGFuIGV2YWx1YXRpb24gb24gYSBudW1lcmljIHNjYWxlLCBzdWNoIGFzIDEgdG8gNSBzdGFycy5qSW50YW5naWJsZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmcyMvZGVmaW5pdGlvbnMvVGhpbmdrZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmV0aXRsZWpJbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5rZGVzY3JpcHRpb254OFRoZSBhdmVyYWdlIHJhdGluZyBiYXNlZCBvbiBtdWx0aXBsZSByYXRpbmdzIG9yIHJldmlld3MuZmhlYWRlcqJmdW5pcXVlcE53RFVFUTB0ZnEvQjRrQ3ZrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frxvmv77ig0c7l03pvwfg7jfmx110lib0y3702zzvjkpeq9jqi4n40"},"kjzl6cwe1jw149etgkhp8rpbtio2v2egl43rnl1e02aqgypip6uwdetuhqdc1tw":{"alias":"Thing","commits":[{"jws":{"payload":"AXESIHrxZl2AxzfUhcnHw2n4Xd8Agky8CvOkm4W5VAbcdZ7C","signatures":[{"signature":"IsvFFLBPjyrTgVVFNALExVFMsnfyB18VUmx0UWH61QKaNt-1cRhVfp6itXIBhLbmxIfhLmiYJOnxUUzRipERBw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreid26ftf3aghg7kilsohynu7qxo7acbezpak6osjxbnzkqdny5m6yi"},"linkedBlock":"omRkYXRhpWR0eXBlZm9iamVjdGV0aXRsZWVUaGluZ2ckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZmhlYWRlcqJmdW5pcXVlcENLdnkwdTgyMEpZbHlLUW5rY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1fryaxdhtpvid041wr8cx2ty56snplvkgcc8mtgz4rq7dg8u3itp0jk"},"kjzl6cwe1jw14bl9kgpohun45pw10vd2okbyhxepwzc158dhe8lb4fc8fh84g5u":{"alias":"Action","commits":[{"jws":{"payload":"AXESIFU8Tqz4Hqc0OSPt8pv9Q4epMJsTuyeQTovv7d2qJrhN","signatures":[{"signature":"znAPPDnVOP4imWOSAA1j_rfksbm2GvNLZC8JERCo33gksscRJtpmJhOgqq2gyC3RrYrs5j6_Lqnhz8V6-t2AAg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicvhrhkz6a6u42dsi7n6kn72q4hveyjwe53e6ie5c7p5xo2ujvyju"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fryqf81ium6xwdko3ra70z2ol1bhkoaj9k57jvp93j3h2zy2hrmxhc"},"kjzl6cwe1jw145q5zh891cs2xdve1vvj9y4q1xig3nqwnx673k5zpf48ctdbgqg":{"alias":"ActionStatusType","commits":[{"jws":{"payload":"AXESIFPRc0hlzJBDnjdT1XIQP7tjnuKahJeoWGfoSC1BLtSW","signatures":[{"signature":"urBC-sHepOEo6dMGMHzBE30LEE4Fa7WEH0JY9n5Dj6L0QUhpdiSNpvZ4gKeMlS1V9F_py9gsRFdlUNvuJVEaCA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreict2fzuqzomsbbz4n2t2vzbap53mopofgues6ufqz7ijawuclwusy"},"linkedBlock":"omRkYXRhpmR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HyMvZGVmaW5pdGlvbnMvU3RhdHVzRW51bWVyYXRpb25rZGVzY3JpcHRpb254MExpc3RzIG9yIGVudW1lcmF0aW9ucyBkZWFsaW5nIHdpdGggc3RhdHVzIHR5cGVzLmV0aXRsZXBBY3Rpb25TdGF0dXNUeXBlZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZWZpbml0aW9uc6FxU3RhdHVzRW51bWVyYXRpb26jZHR5cGVmb2JqZWN0ZXRpdGxlcVN0YXR1c0VudW1lcmF0aW9ua2Rlc2NyaXB0aW9ueDBMaXN0cyBvciBlbnVtZXJhdGlvbnMgZGVhbGluZyB3aXRoIHN0YXR1cyB0eXBlcy5rZGVzY3JpcHRpb254GFRoZSBzdGF0dXMgb2YgYW4gQWN0aW9uLmZoZWFkZXKiZnVuaXF1ZXBZZFgycDExMTR4bFpCVytha2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frxkq2kaio9mvoten7xeo92qpl9qb6i0vca3w2hbelwri3f4upj01s"},"kjzl6cwe1jw14asll16z7ldfq7u44aa2yziv7bad2gzkt1e3auvmpuu9obrwr6j":{"alias":"Organization","commits":[{"jws":{"payload":"AXESIKaWwxRB8Wm_RYoQQli616e3naeZ07X7CJ4qakFdt7AF","signatures":[{"signature":"8NKuFyOHu8jiQgGdYL_v8TOo0PoY9wYiPHgMKqgLxdtxfyil8RR8R8QARZhD7GXULs8Hk-sIPr53n1fhpN_UAw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifgs3briqprng7ulcqqijmlvv5hw6o2pgotwx5qrhrknjav3n5qau"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frykrdhkhmdzzjufq5ah3p4sm5w09oxkszyhw7h7kxjvb8szqgxaf4"},"kjzl6cwe1jw148tryy986lh7kzzkvl2j85grf22ls3b32fa9liaan4j0y7zp2ub":{"alias":"Person","commits":[{"jws":{"payload":"AXESINCpeJ7VBnRtBo2Fjun5TEi0DFEzDK4QGDFMD0km5-lG","signatures":[{"signature":"HeQapv_0E8K9HBNP_vB52vkGZK1sSv7xYZ-awQmVQDS2vyTCBNqv2_EF0ncQxb_KqfnUqX_1AprqV3mcfpAjCA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreigqvf4j5vigorwqndmfr3u7stciwqgfcmymvyibqmkmb5esnz7jiy"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fry6rqwjlm6wqdxbx0glu0pyv6z2qivritt8p08y17og7arctuc7i8"},"kjzl6cwe1jw145f3hqrqzw5qrr1a5n7s3ljw6v77th0ub9bdv3u8i6inw3v0l5l":{"alias":"EducationalOrganization","commits":[{"jws":{"payload":"AXESIFyIkF6NGGVRxOC2Gm7kBNIhK3mbqrTD8HSjKdZmlAhf","signatures":[{"signature":"ds_zVHoL6JnYBDilXQYceLmbQHSvH4eB__FDP5nJpwsvFZabpfl6SCWH3E5xE08h16UzsdZ8dwM_ui2oaO0YBA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreic4rcif5diymvi4jyfwdjxoibgseevxtg5kwtb7a5fdfhlgnfail4"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxijcu6dbz8oudc94853btl9gwtvbll1zk28yl7b0hacpwbgk6fpc"},"kjzl6cwe1jw14989xipbpwj257fut8sgtgd86ienahmvb4wv9icngki6ou5iad2":{"alias":"LocationFeatureSpecification","commits":[{"jws":{"payload":"AXESIJr56tliXZemgXnIRzl9VF5Qi4-IxmY-laMEn7YGcuan","signatures":[{"signature":"gw9dyAtHoD84dI2C765riOiJ7FqiZtWxbKoLL-tVzJErY60SASofsY7YoVs_ayd9LPtoxLCyEItrfIQQGkyZBQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreie27hvnsys5s6tic6oii44x2vc6kcfy7cggmy7jliyet63am4xgu4"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fry9mumd03c7bj90wr3yiflge26aw5mlemn6xqbmhytttbkmf61ou8"},"kjzl6cwe1jw145xglzuf6un75u70675cm513b7jiv9hj7dt7w2dh7m29q7vwrns":{"alias":"OpeningHoursSpecification","commits":[{"jws":{"payload":"AXESII8SuztEq5mv7KUr6wF6dpDGZcLGv_tVuXLWPWOLi4Op","signatures":[{"signature":"m_YNfEpYoN6aaFss9JYxV9dofGUnpeQLW3yrwXADwiOnhoY4ae8o-_c7t-ec7bmC2mM-hT1vt-06Wxmo4lu2CA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiepck5twrfltgx6zjjl5maxu5uqyzs4frv77nk3s4wwhvryxc4dve"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HSMvZGVmaW5pdGlvbnMvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcuZXRpdGxleBlPcGVuaW5nSG91cnNTcGVjaWZpY2F0aW9uZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzpWVvcGVuc6NkdHlwZWZzdHJpbmdmZm9ybWF0ZHRpbWVrZGVzY3JpcHRpb254SVRoZSBvcGVuaW5nIGhvdXIgb2YgdGhlIHBsYWNlIG9yIHNlcnZpY2Ugb24gdGhlIGdpdmVuIGRheShzKSBvZiB0aGUgd2Vlay5mY2xvc2Vzo2R0eXBlZnN0cmluZ2Zmb3JtYXRkdGltZWtkZXNjcmlwdGlvbnhJVGhlIGNsb3NpbmcgaG91ciBvZiB0aGUgcGxhY2Ugb3Igc2VydmljZSBvbiB0aGUgZ2l2ZW4gZGF5KHMpIG9mIHRoZSB3ZWVrLmlkYXlPZldlZWuiZCRyZWZwc2NoZW1hOkRheU9mV2Vla2tkZXNjcmlwdGlvbng8VGhlIGRheSBvZiB0aGUgd2VlayBmb3Igd2hpY2ggdGhlc2Ugb3BlbmluZyBob3VycyBhcmUgdmFsaWQuaXZhbGlkRnJvbaJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZaJkdHlwZWZzdHJpbmdmZm9ybWF0aWRhdGUtdGltZWtkZXNjcmlwdGlvbnglVGhlIGRhdGUgd2hlbiB0aGUgaXRlbSBiZWNvbWVzIHZhbGlkLmx2YWxpZFRocm91Z2iiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGWiZHR5cGVmc3RyaW5nZmZvcm1hdGlkYXRlLXRpbWVrZGVzY3JpcHRpb254eFRoZSBkYXRlIGFmdGVyIHdoZW4gdGhlIGl0ZW0gaXMgbm90IHZhbGlkLiBGb3IgZXhhbXBsZSB0aGUgZW5kIG9mIGFuIG9mZmVyLCBzYWxhcnkgcGVyaW9kLCBvciBhIHBlcmlvZCBvZiBvcGVuaW5nIGhvdXJzLmtkZWZpbml0aW9uc6NlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLm9TdHJ1Y3R1cmVkVmFsdWWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZngYIy9kZWZpbml0aW9ucy9JbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5ldGl0bGVvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcua2Rlc2NyaXB0aW9ueQFrQSBzdHJ1Y3R1cmVkIHZhbHVlIHByb3ZpZGluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb3BlbmluZyBob3VycyBvZiBhIHBsYWNlIG9yIGEgY2VydGFpbiBzZXJ2aWNlIGluc2lkZSBhIHBsYWNlLlxuXG4KVGhlIHBsYWNlIGlzIF9fb3Blbl9fIGlmIHRoZSBbW29wZW5zXV0gcHJvcGVydHkgaXMgc3BlY2lmaWVkLCBhbmQgX19jbG9zZWRfXyBvdGhlcndpc2UuXG5cbklmIHRoZSB2YWx1ZSBmb3IgdGhlIFtbY2xvc2VzXV0gcHJvcGVydHkgaXMgbGVzcyB0aGFuIHRoZSB2YWx1ZSBmb3IgdGhlIFtbb3BlbnNdXSBwcm9wZXJ0eSB0aGVuIHRoZSBob3VyIHJhbmdlIGlzIGFzc3VtZWQgdG8gc3BhbiBvdmVyIHRoZSBuZXh0IGRheS4KICAgICAgZmhlYWRlcqJmdW5pcXVlcFluNElCK0Y2b21iK0NiY3NrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frxm5y4ewc0pwyxipt82u1pfrrjpmu6bgoki7s40vue4w56g2x0p34"},"kjzl6cwe1jw14ax4qbzdu8k8ktdyvgzdowdqwcnv02wday21hamc1bvgyc7tzke":{"alias":"DayOfWeek","commits":[{"jws":{"payload":"AXESIOSL2MtDZEADNen3n1cMSEB6UsPp2MMiBjcoYjZxBf98","signatures":[{"signature":"XO0onKZLMqoeahb_ZOwQskF9m6jLLGJvSUCz8VEgAzDNwZFntI6d4h6EWX0ZAp3ritmmGXiq9qFmeLC0fhj9Dw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiherpmmwq3eiabtl2pxt5lqyscapjjmh2oyymramnzimi3hcbp7pq"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoiiZWNvbnN0ZkZyaWRheWtkZXNjcmlwdGlvbngyVGhlIGRheSBvZiB0aGUgd2VlayBiZXR3ZWVuIFRodXJzZGF5IGFuZCBTYXR1cmRheS6iZWNvbnN0Zk1vbmRheWtkZXNjcmlwdGlvbngvVGhlIGRheSBvZiB0aGUgd2VlayBiZXR3ZWVuIFN1bmRheSBhbmQgVHVlc2RheS6iZWNvbnN0blB1YmxpY0hvbGlkYXlza2Rlc2NyaXB0aW9ueQGqVGhpcyBzdGFuZHMgZm9yIGFueSBkYXkgdGhhdCBpcyBhIHB1YmxpYyBob2xpZGF5OyBpdCBpcyBhIHBsYWNlaG9sZGVyIGZvciBhbGwgb2ZmaWNpYWwgcHVibGljIGhvbGlkYXlzIGluIHNvbWUgcGFydGljdWxhciBsb2NhdGlvbi4gV2hpbGUgbm90IHRlY2huaWNhbGx5IGEgImRheSBvZiB0aGUgd2VlayIsIGl0IGNhbiBiZSB1c2VkIHdpdGggW1tPcGVuaW5nSG91cnNTcGVjaWZpY2F0aW9uXV0uIEluIHRoZSBjb250ZXh0IG9mIGFuIG9wZW5pbmcgaG91cnMgc3BlY2lmaWNhdGlvbiBpdCBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBvcGVuaW5nIGhvdXJzIG9uIHB1YmxpYyBob2xpZGF5cywgb3ZlcnJpZGluZyBnZW5lcmFsIG9wZW5pbmcgaG91cnMgZm9yIHRoZSBkYXkgb2YgdGhlIHdlZWsgb24gd2hpY2ggYSBwdWJsaWMgaG9saWRheSBvY2N1cnMuomVjb25zdGhTYXR1cmRheWtkZXNjcmlwdGlvbnguVGhlIGRheSBvZiB0aGUgd2VlayBiZXR3ZWVuIEZyaWRheSBhbmQgU3VuZGF5LqJlY29uc3RmU3VuZGF5a2Rlc2NyaXB0aW9ueDBUaGUgZGF5IG9mIHRoZSB3ZWVrIGJldHdlZW4gU2F0dXJkYXkgYW5kIE1vbmRheS6iZWNvbnN0aFRodXJzZGF5a2Rlc2NyaXB0aW9ueDFUaGUgZGF5IG9mIHRoZSB3ZWVrIGJldHdlZW4gV2VkbmVzZGF5IGFuZCBGcmlkYXkuomVjb25zdGdUdWVzZGF5a2Rlc2NyaXB0aW9ueDFUaGUgZGF5IG9mIHRoZSB3ZWVrIGJldHdlZW4gTW9uZGF5IGFuZCBXZWRuZXNkYXkuomVjb25zdGlXZWRuZXNkYXlrZGVzY3JpcHRpb254MVRoZSBkYXkgb2YgdGhlIHdlZWsgYmV0d2VlbiBUdWVzZGF5IGFuZCBUaHVyc2RheS5ldGl0bGVpRGF5T2ZXZWVrZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZXNjcmlwdGlvbnkBkFRoZSBkYXkgb2YgdGhlIHdlZWssIGUuZy4gdXNlZCB0byBzcGVjaWZ5IHRvIHdoaWNoIGRheSB0aGUgb3BlbmluZyBob3VycyBvZiBhbiBPcGVuaW5nSG91cnNTcGVjaWZpY2F0aW9uIHJlZmVyLgoKT3JpZ2luYWxseSwgVVJMcyBmcm9tIFtHb29kUmVsYXRpb25zXShodHRwOi8vcHVybC5vcmcvZ29vZHJlbGF0aW9ucy92MSkgd2VyZSB1c2VkIChmb3IgW1tNb25kYXldXSwgW1tUdWVzZGF5XV0sIFtbV2VkbmVzZGF5XV0sIFtbVGh1cnNkYXldXSwgW1tGcmlkYXldXSwgW1tTYXR1cmRheV1dLCBbW1N1bmRheV1dIHBsdXMgYSBzcGVjaWFsIGVudHJ5IGZvciBbW1B1YmxpY0hvbGlkYXlzXV0pOyB0aGVzZSBoYXZlIG5vdyBiZWVuIGludGVncmF0ZWQgZGlyZWN0bHkgaW50byBzY2hlbWEub3JnLgogICAgICBmaGVhZGVyomZ1bmlxdWVwMTdqNUpTb05rZU8vQlJBeWtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frylnln97mf0vx00zbzsrld29ra21ogkm6lu6iizitlgfsk6vp8wzk"},"kjzl6cwe1jw14a54r1vfen7nb0khi4af7hwwgu47jy0vpc0xrhu7hstl3mboa20":{"alias":"Event","commits":[{"jws":{"payload":"AXESIKj0ZRwmjGvoDtM6PrmviN3FyiRQv58XkHsvL7im87-Q","signatures":[{"signature":"xkEr2Av1mPbGm4OiP-PUjgx4nqZUvfej2vCEaudUgU9UWZjlnROZTheK57DGlK0eFZuABAuQtxMTWO4qM6BABw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifi6rsryjumnpua5uz2h2427cg5yxfciuf7t4lza6zpf64kn457sa"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fryg4hsdbhk52dqc1ogui45bdyvq5xpty9g5io3iutakye1qr0ni80"},"kjzl6cwe1jw148j80ysyzu1r6mr8nk9sg219g2sy3vkl4hn957mwu00wfkqf4nr":{"alias":"Audience","commits":[{"jws":{"payload":"AXESIOBdQiB8OXCSBhMOy2IT0YYTt7TaJ0EVlGmnPZZcYFO_","signatures":[{"signature":"RKn4tXeBcS2pD9PvtpdDQL-wEQIv8rMbYjWaNGiV1tCbEzQYVP2t1-Wxlk6zH0_iRFh-rUEr1Y66hWodLzeuBw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihalvbca7bzocjameyoznrbhumgco33jwrhiekzi2nhhwlfyyctx4"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlaEF1ZGllbmNlZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzomxhdWRpZW5jZVR5cGWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueF9UaGUgdGFyZ2V0IGdyb3VwIGFzc29jaWF0ZWQgd2l0aCBhIGdpdmVuIGF1ZGllbmNlIChlLmcuIHZldGVyYW5zLCBjYXIgb3duZXJzLCBtdXNpY2lhbnMsIGV0Yy4pLm5nZW9ncmFwaGljQXJlYaJkJHJlZngZc2NoZW1hOkFkbWluaXN0cmF0aXZlQXJlYWtkZXNjcmlwdGlvbngxVGhlIGdlb2dyYXBoaWMgYXJlYSBhc3NvY2lhdGVkIHdpdGggdGhlIGF1ZGllbmNlLmtkZWZpbml0aW9uc6JlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmtkZXNjcmlwdGlvbnhMSW50ZW5kZWQgYXVkaWVuY2UgZm9yIGFuIGl0ZW0sIGkuZS4gdGhlIGdyb3VwIGZvciB3aG9tIHRoZSBpdGVtIHdhcyBjcmVhdGVkLmZoZWFkZXKiZnVuaXF1ZXBEcFdpbGFCdWkrT0ZyTGU1a2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1fry4op2vi0utohb5tpjk5ma6gz6bxujkie7xhd12axhc6emrfvl4w0"},"kjzl6cwe1jw147hx734903i3l4qonc8m7k3bvpygvdquywg4f496xzcf3gtk66v":{"alias":"AdministrativeArea","commits":[{"jws":{"payload":"AXESIO6SrPNYgARJLeVABxYZW19G-DwOaHPlS1frY9V_WsYl","signatures":[{"signature":"Zu6isABti0XaZoMf80tzJngsChY5YpJj6o5ki1gH12M39T4P0cGH4YcGDEe60e2hCWssGmru4p5jiuTbf0ikDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihoskwpgweaares3zkaa4lbsw27i34dydtiopsuwv7lmpkx6wwgeu"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxxbg2e680owpi9pr9z19xqvohkl3z5r086qnfi9ddncbcnm7g0sg"},"kjzl6cwe1jw149atfa7zkn0i2vtxszpqpib9etb791flrz7svk1exvtkwx7oyoi":{"alias":"Place","commits":[{"jws":{"payload":"AXESIFN1gZ96cb-DXtunxIv1AqtuEh1xc3crOzVHJzWTMEqr","signatures":[{"signature":"0wa5ZuztpIbnXrYxvCTFfTWynMZc1-3if3_52KwWNeQlwip1zU_Uet0AB7o9V6zpgKprAymv5LHQzI1Nr5KrBA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreictowaz66trx6bv5w5hysf7kavlnyjb24lto4vtwnkhe42zgmckvm"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frya4x8oosyrnkkicwe5z1xe82xcfnka6yuyfhcei28yacq46pim80"},"kjzl6cwe1jw1469k0u2nclf33fjxq4utsjn9d7pat5a30xev2cn2c6tbr8w8y9s":{"alias":"GeoCoordinates","commits":[{"jws":{"payload":"AXESID2Oh_Pkamc43TVet0AhYmyaRrpvmuYX6JRN8Olaw7xJ","signatures":[{"signature":"BIkWR8lM7JdLwuLXb8jyXksvD8IUnVPTu6LvbTHooN8fvWstDXYYpZQAm6uWHJsTF1bcd_JUYwrtqja6IH1pCw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreib5r2d7hzdkm44n2nk6w5accytmtjdlu3424yl6rfcn6duvvq54je"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HSMvZGVmaW5pdGlvbnMvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcuZXRpdGxlbkdlb0Nvb3JkaW5hdGVzZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzpmdhZGRyZXNzomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmdHNjaGVtYTpQb3N0YWxBZGRyZXNza2Rlc2NyaXB0aW9ueB1QaHlzaWNhbCBhZGRyZXNzIG9mIHRoZSBpdGVtLmhsYXRpdHVkZaJlYW55T2aCoWR0eXBlZm51bWJlcqFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254d1RoZSBsYXRpdHVkZSBvZiBhIGxvY2F0aW9uLiBGb3IgZXhhbXBsZSBgYGAzNy40MjI0MmBgYCAoW1dHUyA4NF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV29ybGRfR2VvZGV0aWNfU3lzdGVtKSkuaWVsZXZhdGlvbqJlYW55T2aCoWR0eXBlZm51bWJlcqFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2548FRoZSBlbGV2YXRpb24gb2YgYSBsb2NhdGlvbiAoW1dHUyA4NF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV29ybGRfR2VvZGV0aWNfU3lzdGVtKSkuIFZhbHVlcyBtYXkgYmUgb2YgdGhlIGZvcm0gJ05VTUJFUiBVTklUX09GX01FQVNVUkVNRU5UJyAoZS5nLiwgJzEsMDAwIG0nLCAnMywyMDAgZnQnKSB3aGlsZSBudW1iZXJzIGFsb25lIHNob3VsZCBiZSBhc3N1bWVkIHRvIGJlIGEgdmFsdWUgaW4gbWV0ZXJzLmlsb25naXR1ZGWiZWFueU9mgqFkdHlwZWZudW1iZXKhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueHpUaGUgbG9uZ2l0dWRlIG9mIGEgbG9jYXRpb24uIEZvciBleGFtcGxlIGBgYC0xMjIuMDg1ODVgYGAgKFtXR1MgODRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1dvcmxkX0dlb2RldGljX1N5c3RlbSkpLmpwb3N0YWxDb2RlomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngkVGhlIHBvc3RhbCBjb2RlLiBGb3IgZXhhbXBsZSwgOTQwNDMubmFkZHJlc3NDb3VudHJ5omVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmbnNjaGVtYTpDb3VudHJ5a2Rlc2NyaXB0aW9ueI5UaGUgY291bnRyeS4gRm9yIGV4YW1wbGUsIFVTQS4gWW91IGNhbiBhbHNvIHByb3ZpZGUgdGhlIHR3by1sZXR0ZXIgW0lTTyAzMTY2LTEgYWxwaGEtMiBjb3VudHJ5IGNvZGVdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzMxNjYtMSkua2RlZmluaXRpb25zo2VUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uakludGFuZ2libGWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZnMjL2RlZmluaXRpb25zL1RoaW5na2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5ldGl0bGVqSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMub1N0cnVjdHVyZWRWYWx1ZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmeBgjL2RlZmluaXRpb25zL0ludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmV0aXRsZW9TdHJ1Y3R1cmVkVmFsdWVrZGVzY3JpcHRpb254l1N0cnVjdHVyZWQgdmFsdWVzIGFyZSB1c2VkIHdoZW4gdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgaGFzIGEgbW9yZSBjb21wbGV4IHN0cnVjdHVyZSB0aGFuIHNpbXBseSBiZWluZyBhIHRleHR1YWwgdmFsdWUgb3IgYSByZWZlcmVuY2UgdG8gYW5vdGhlciB0aGluZy5rZGVzY3JpcHRpb254L1RoZSBnZW9ncmFwaGljIGNvb3JkaW5hdGVzIG9mIGEgcGxhY2Ugb3IgZXZlbnQuZmhlYWRlcqJmdW5pcXVlcHdzVytYM2pzRGFITlA3Y0trY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frxojydxuu1kba0elrtuj7uzpelyrwv9jpillowpw0mogjlr9bnpj4"},"kjzl6cwe1jw1488qjg0zzrlli7mw4zyusdq312q453666jefw66mmrhnd32qtky":{"alias":"GeospatialGeometry","commits":[{"jws":{"payload":"AXESIFR1GGyElJA0xbijDESlCaOMRCM8k9l1cQ0Ghjv3jk-F","signatures":[{"signature":"0S2dHJCzWU-wkrCu-iMXbYJ2SZS9aDdEV37mmuiD44E-IcHA5EWRuKaGMTFCdoSu3JXKl4DxRhO-SBfUrp1MBQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicuoumgzbeusa2mlofdbrckkcndrrccgpet3f2xcdigqy57pdspqu"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fry2m4q9z3yc9kxiasjjruxtlhjndpg6jvyhyp0rz4xvhi51viqcxs"},"kjzl6cwe1jw14auuo1ltnhbr84fwqen5p85trdp2cu27ad8hktecbblahp1mwe0":{"alias":"Map","commits":[{"jws":{"payload":"AXESIFrEubdDI4NKWCNfgAazAUoCFhhLnEQhC6Ok_b52SX4P","signatures":[{"signature":"NVFtMaCgBa2aJfyBpFVms8Vl_eMQVgf1aLzYh07mvjShNtHt7jCpC_YCLfYWG6hpcRokg8mKuBSfH2jh_hCACw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreic2ys43oqzdqnffqi27qadlgakkailbqs44iqqqxi5e7w7hmsl6b4"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fryl7e2zf6uz7llrl4rs4oje1fmpe8r9rntq4d011zkifelu3mubk0"},"kjzl6cwe1jw14be04xu8h0407t9zgbwvit6aoook8tkjzke2philtrwbzdgngs4":{"alias":"MapCategoryType","commits":[{"jws":{"payload":"AXESICRvdGkmCMNihn_4gANXq2sqTN3IZo6gzPMnSGCC9pLK","signatures":[{"signature":"AOF0pXmNsj8EmRzz0NLZ3zHT--e_9ydhm_E6kfL7Q6Eg6HSnfzUXPjuRkZXUVUSWVfYcb4rvsDxSNoTAkv97DQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiben52gsjqiynrim77yqabvpk3lfjgn3sdgr2qmz4zhjbqif5uszi"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoSiZWNvbnN0alBhcmtpbmdNYXBrZGVzY3JpcHRpb25uQSBwYXJraW5nIG1hcC6iZWNvbnN0alNlYXRpbmdNYXBrZGVzY3JpcHRpb25uQSBzZWF0aW5nIG1hcC6iZWNvbnN0alRyYW5zaXRNYXBrZGVzY3JpcHRpb25uQSB0cmFuc2l0IG1hcC6iZWNvbnN0aFZlbnVlTWFwa2Rlc2NyaXB0aW9ueDlBIHZlbnVlIG1hcCAoZS5nLiBmb3IgbWFsbHMsIGF1ZGl0b3JpdW1zLCBtdXNldW1zLCBldGMuKS5ldGl0bGVvTWFwQ2F0ZWdvcnlUeXBlZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZXNjcmlwdGlvbngnQW4gZW51bWVyYXRpb24gb2Ygc2V2ZXJhbCBraW5kcyBvZiBNYXAuZmhlYWRlcqJmdW5pcXVlcE9kUFNodkJFQ2RGUnpOQ2ZrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1fryozkz4n08wshjk7044ps5rgrzjinyqa64x0398kb7qdx7jqevbwg"},"kjzl6cwe1jw149s87x64zv8zqyf0r8ts3gor9u9aom98f2wra58ueapt30texsu":{"alias":"ItemList","commits":[{"jws":{"payload":"AXESIDU5dVTNeXgtfFpYuBmbMrRc6GKagTkoUgcmqbNjJW0C","signatures":[{"signature":"VArNszbOVRLMe0LoDeqrxzb_ivXI4z67fQMt3yZHg9Bm_t0ib5-4Poxf4LrAp5tSe98fxCZ9_mWbednl1bI-Cg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreibvhf2vjtlzpawxywsyxamzwmvultugfgubheufebzgvgzwgjlnai"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlaEl0ZW1MaXN0ZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzo21pdGVtTGlzdE9yZGVyomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmeBhzY2hlbWE6SXRlbUxpc3RPcmRlclR5cGVrZGVzY3JpcHRpb254OVR5cGUgb2Ygb3JkZXJpbmcgKGUuZy4gQXNjZW5kaW5nLCBEZXNjZW5kaW5nLCBVbm9yZGVyZWQpLm1udW1iZXJPZkl0ZW1zomR0eXBlZ2ludGVnZXJrZGVzY3JpcHRpb254ylRoZSBudW1iZXIgb2YgaXRlbXMgaW4gYW4gSXRlbUxpc3QuIE5vdGUgdGhhdCBzb21lIGRlc2NyaXB0aW9ucyBtaWdodCBub3QgZnVsbHkgZGVzY3JpYmUgYWxsIGl0ZW1zIGluIGEgbGlzdCAoZS5nLiwgbXVsdGktcGFnZSBwYWdpbmF0aW9uKTsgaW4gc3VjaCBjYXNlcywgdGhlIG51bWJlck9mSXRlbXMgd291bGQgYmUgZm9yIHRoZSBlbnRpcmUgbGlzdC5vaXRlbUxpc3RFbGVtZW50omVvbmVPZoKhZWFueU9mg6FkdHlwZWZzdHJpbmehZCRyZWZvc2NoZW1hOkxpc3RJdGVtoWQkcmVmbHNjaGVtYTpUaGluZ6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aDoWR0eXBlZnN0cmluZ6FkJHJlZm9zY2hlbWE6TGlzdEl0ZW2hZCRyZWZsc2NoZW1hOlRoaW5na2Rlc2NyaXB0aW9ueQJvRm9yIGl0ZW1MaXN0RWxlbWVudCB2YWx1ZXMsIHlvdSBjYW4gdXNlIHNpbXBsZSBzdHJpbmdzIChlLmcuICJQZXRlciIsICJQYXVsIiwgIk1hcnkiKSwgZXhpc3RpbmcgZW50aXRpZXMsIG9yIHVzZSBMaXN0SXRlbS5cblxuVGV4dCB2YWx1ZXMgYXJlIGJlc3QgaWYgdGhlIGVsZW1lbnRzIGluIHRoZSBsaXN0IGFyZSBwbGFpbiBzdHJpbmdzLiBFeGlzdGluZyBlbnRpdGllcyBhcmUgYmVzdCBmb3IgYSBzaW1wbGUsIHVub3JkZXJlZCBsaXN0IG9mIGV4aXN0aW5nIHRoaW5ncyBpbiB5b3VyIGRhdGEuIExpc3RJdGVtIGlzIHVzZWQgd2l0aCBvcmRlcmVkIGxpc3RzIHdoZW4geW91IHdhbnQgdG8gcHJvdmlkZSBhZGRpdGlvbmFsIGNvbnRleHQgYWJvdXQgdGhlIGVsZW1lbnQgaW4gdGhhdCBsaXN0IG9yIHdoZW4gdGhlIHNhbWUgaXRlbSBtaWdodCBiZSBpbiBkaWZmZXJlbnQgcGxhY2VzIGluIGRpZmZlcmVudCBsaXN0cy5cblxuTm90ZTogVGhlIG9yZGVyIG9mIGVsZW1lbnRzIGluIHlvdXIgbWFyay11cCBpcyBub3Qgc3VmZmljaWVudCBmb3IgaW5kaWNhdGluZyB0aGUgb3JkZXIgb3IgZWxlbWVudHMuICBVc2UgTGlzdEl0ZW0gd2l0aCBhICdwb3NpdGlvbicgcHJvcGVydHkgaW4gc3VjaCBjYXNlcy5rZGVmaW5pdGlvbnOiZVRoaW5npGR0eXBlZm9iamVjdGV0aXRsZWVUaGluZ2pwcm9wZXJ0aWVzrmN1cmyjZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb25wVVJMIG9mIHRoZSBpdGVtLmRuYW1lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnVUaGUgbmFtZSBvZiB0aGUgaXRlbS5lQHR5cGWhZHR5cGVmc3RyaW5nZWltYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb254UUFuIGltYWdlIG9mIHRoZSBpdGVtLiBUaGlzIGNhbiBiZSBhIFtbVVJMXV0gb3IgYSBmdWxseSBkZXNjcmliZWQgW1tJbWFnZU9iamVjdF1dLmZzYW1lQXOiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnidVVJMIG9mIGEgcmVmZXJlbmNlIFdlYiBwYWdlIHRoYXQgdW5hbWJpZ3VvdXNseSBpbmRpY2F0ZXMgdGhlIGl0ZW0ncyBpZGVudGl0eS4gRS5nLiB0aGUgVVJMIG9mIHRoZSBpdGVtJ3MgV2lraXBlZGlhIHBhZ2UsIFdpa2lkYXRhIGVudHJ5LCBvciBvZmZpY2lhbCB3ZWJzaXRlLmhAY29udGV4dKFkdHlwZWZzdHJpbmdpc3ViamVjdE9momVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueClBIENyZWF0aXZlV29yayBvciBFdmVudCBhYm91dCB0aGlzIFRoaW5nLmppZGVudGlmaWVyomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVla2Rlc2NyaXB0aW9ueQFJVGhlIGlkZW50aWZpZXIgcHJvcGVydHkgcmVwcmVzZW50cyBhbnkga2luZCBvZiBpZGVudGlmaWVyIGZvciBhbnkga2luZCBvZiBbW1RoaW5nXV0sIHN1Y2ggYXMgSVNCTnMsIEdUSU4gY29kZXMsIFVVSURzIGV0Yy4gU2NoZW1hLm9yZyBwcm92aWRlcyBkZWRpY2F0ZWQgcHJvcGVydGllcyBmb3IgcmVwcmVzZW50aW5nIG1hbnkgb2YgdGhlc2UsIGVpdGhlciBhcyB0ZXh0dWFsIHN0cmluZ3Mgb3IgYXMgVVJMIChVUkkpIGxpbmtzLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI2lkZW50aWZpZXJCZykgZm9yIG1vcmUgZGV0YWlscy4KICAgICAgICBrZGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueBpBIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtLm1hbHRlcm5hdGVOYW1lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnZBbiBhbGlhcyBmb3IgdGhlIGl0ZW0ubmFkZGl0aW9uYWxUeXBlomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb255AZ9BbiBhZGRpdGlvbmFsIHR5cGUgZm9yIHRoZSBpdGVtLCB0eXBpY2FsbHkgdXNlZCBmb3IgYWRkaW5nIG1vcmUgc3BlY2lmaWMgdHlwZXMgZnJvbSBleHRlcm5hbCB2b2NhYnVsYXJpZXMgaW4gbWljcm9kYXRhIHN5bnRheC4gVGhpcyBpcyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHNvbWV0aGluZyBhbmQgYSBjbGFzcyB0aGF0IHRoZSB0aGluZyBpcyBpbi4gSW4gUkRGYSBzeW50YXgsIGl0IGlzIGJldHRlciB0byB1c2UgdGhlIG5hdGl2ZSBSREZhIHN5bnRheCAtIHRoZSAndHlwZW9mJyBhdHRyaWJ1dGUgLSBmb3IgbXVsdGlwbGUgdHlwZXMuIFNjaGVtYS5vcmcgdG9vbHMgbWF5IGhhdmUgb25seSB3ZWFrZXIgdW5kZXJzdGFuZGluZyBvZiBleHRyYSB0eXBlcywgaW4gcGFydGljdWxhciB0aG9zZSBkZWZpbmVkIGV4dGVybmFsbHkub3BvdGVudGlhbEFjdGlvbqJlb25lT2aCoWQkcmVmbXNjaGVtYTpBY3Rpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOkFjdGlvbmtkZXNjcmlwdGlvbnhySW5kaWNhdGVzIGEgcG90ZW50aWFsIEFjdGlvbiwgd2hpY2ggZGVzY3JpYmVzIGFuIGlkZWFsaXplZCBhY3Rpb24gaW4gd2hpY2ggdGhpcyB0aGluZyB3b3VsZCBwbGF5IGFuICdvYmplY3QnIHJvbGUucG1haW5FbnRpdHlPZlBhZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueLBJbmRpY2F0ZXMgYSBwYWdlIChvciBvdGhlciBDcmVhdGl2ZVdvcmspIGZvciB3aGljaCB0aGlzIHRoaW5nIGlzIHRoZSBtYWluIGVudGl0eSBiZWluZyBkZXNjcmliZWQuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjbWFpbkVudGl0eUJhY2tncm91bmQpIGZvciBkZXRhaWxzLngZZGlzYW1iaWd1YXRpbmdEZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2547EEgc3ViIHByb3BlcnR5IG9mIGRlc2NyaXB0aW9uLiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGZyb20gb3RoZXIsIHNpbWlsYXIgaXRlbXMuIEluZm9ybWF0aW9uIGZyb20gb3RoZXIgcHJvcGVydGllcyAoaW4gcGFydGljdWxhciwgbmFtZSkgbWF5IGJlIG5lY2Vzc2FyeSBmb3IgdGhlIGRlc2NyaXB0aW9uIHRvIGJlIHVzZWZ1bCBmb3IgZGlzYW1iaWd1YXRpb24ua2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5qSW50YW5naWJsZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmcyMvZGVmaW5pdGlvbnMvVGhpbmdrZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmV0aXRsZWpJbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5rZGVzY3JpcHRpb254sEEgbGlzdCBvZiBpdGVtcyBvZiBhbnkgc29ydOKAlGZvciBleGFtcGxlLCBUb3AgMTAgTW92aWVzIEFib3V0IFdlYXRoZXJtZW4sIG9yIFRvcCAxMDAgUGFydHkgU29uZ3MuIE5vdCB0byBiZSBjb25mdXNlZCB3aXRoIEhUTUwgbGlzdHMsIHdoaWNoIGFyZSBvZnRlbiB1c2VkIG9ubHkgZm9yIGZvcm1hdHRpbmcuZmhlYWRlcqJmdW5pcXVlcHdnVlZrcUdKR3M4UVB0c2VrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frydkqgbvnj27y7oqtdqrrsmo1xz63z29nv8oy05aw5o7itht68d1c"},"kjzl6cwe1jw146a1ru5gx0lql4uarja12g2yn9mreg7xjiruwg8p71o3yntpkap":{"alias":"ListItem","commits":[{"jws":{"payload":"AXESIPc3cLKTl751VEsgSqqa_ItX-1SrrXu1lnRfpvrK5w0z","signatures":[{"signature":"EWqDkjqmgHjELNlqCBQp-0-iDCl9XpbMNj9NRJpeYz4snJwqviOsvJLgoxMbArDqtCutR8A9J4tB6YbQ8e-TDg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihxg5ylfe4xxz2viszajkvjv7elk75vjk5npo2zm5c7u35mvzyngm"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlaExpc3RJdGVtZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzpGRpdGVtomVvbmVPZoKhZCRyZWZsc2NoZW1hOlRoaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbHNjaGVtYTpUaGluZ2tkZXNjcmlwdGlvbnhmQW4gZW50aXR5IHJlcHJlc2VudGVkIGJ5IGFuIGVudHJ5IGluIGEgbGlzdCBvciBkYXRhIGZlZWQgKGUuZy4gYW4gJ2FydGlzdCcgaW4gYSBsaXN0IG9mICdhcnRpc3RzJynigJkuaG5leHRJdGVtomVvbmVPZoKhZCRyZWZvc2NoZW1hOkxpc3RJdGVtomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmb3NjaGVtYTpMaXN0SXRlbWtkZXNjcmlwdGlvbng0QSBsaW5rIHRvIHRoZSBMaXN0SXRlbSB0aGF0IGZvbGxvd3MgdGhlIGN1cnJlbnQgb25lLmhwb3NpdGlvbqJlYW55T2aCoWR0eXBlZ2ludGVnZXKhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueDlUaGUgcG9zaXRpb24gb2YgYW4gaXRlbSBpbiBhIHNlcmllcyBvciBzZXF1ZW5jZSBvZiBpdGVtcy5scHJldmlvdXNJdGVtomVvbmVPZoKhZCRyZWZvc2NoZW1hOkxpc3RJdGVtomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmb3NjaGVtYTpMaXN0SXRlbWtkZXNjcmlwdGlvbng1QSBsaW5rIHRvIHRoZSBMaXN0SXRlbSB0aGF0IHByZWNlZWRzIHRoZSBjdXJyZW50IG9uZS5rZGVmaW5pdGlvbnOiZVRoaW5npGR0eXBlZm9iamVjdGV0aXRsZWVUaGluZ2pwcm9wZXJ0aWVzrmN1cmyjZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb25wVVJMIG9mIHRoZSBpdGVtLmRuYW1lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnVUaGUgbmFtZSBvZiB0aGUgaXRlbS5lQHR5cGWhZHR5cGVmc3RyaW5nZWltYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb254UUFuIGltYWdlIG9mIHRoZSBpdGVtLiBUaGlzIGNhbiBiZSBhIFtbVVJMXV0gb3IgYSBmdWxseSBkZXNjcmliZWQgW1tJbWFnZU9iamVjdF1dLmZzYW1lQXOiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnidVVJMIG9mIGEgcmVmZXJlbmNlIFdlYiBwYWdlIHRoYXQgdW5hbWJpZ3VvdXNseSBpbmRpY2F0ZXMgdGhlIGl0ZW0ncyBpZGVudGl0eS4gRS5nLiB0aGUgVVJMIG9mIHRoZSBpdGVtJ3MgV2lraXBlZGlhIHBhZ2UsIFdpa2lkYXRhIGVudHJ5LCBvciBvZmZpY2lhbCB3ZWJzaXRlLmhAY29udGV4dKFkdHlwZWZzdHJpbmdpc3ViamVjdE9momVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueClBIENyZWF0aXZlV29yayBvciBFdmVudCBhYm91dCB0aGlzIFRoaW5nLmppZGVudGlmaWVyomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVla2Rlc2NyaXB0aW9ueQFJVGhlIGlkZW50aWZpZXIgcHJvcGVydHkgcmVwcmVzZW50cyBhbnkga2luZCBvZiBpZGVudGlmaWVyIGZvciBhbnkga2luZCBvZiBbW1RoaW5nXV0sIHN1Y2ggYXMgSVNCTnMsIEdUSU4gY29kZXMsIFVVSURzIGV0Yy4gU2NoZW1hLm9yZyBwcm92aWRlcyBkZWRpY2F0ZWQgcHJvcGVydGllcyBmb3IgcmVwcmVzZW50aW5nIG1hbnkgb2YgdGhlc2UsIGVpdGhlciBhcyB0ZXh0dWFsIHN0cmluZ3Mgb3IgYXMgVVJMIChVUkkpIGxpbmtzLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI2lkZW50aWZpZXJCZykgZm9yIG1vcmUgZGV0YWlscy4KICAgICAgICBrZGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueBpBIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtLm1hbHRlcm5hdGVOYW1lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnZBbiBhbGlhcyBmb3IgdGhlIGl0ZW0ubmFkZGl0aW9uYWxUeXBlomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb255AZ9BbiBhZGRpdGlvbmFsIHR5cGUgZm9yIHRoZSBpdGVtLCB0eXBpY2FsbHkgdXNlZCBmb3IgYWRkaW5nIG1vcmUgc3BlY2lmaWMgdHlwZXMgZnJvbSBleHRlcm5hbCB2b2NhYnVsYXJpZXMgaW4gbWljcm9kYXRhIHN5bnRheC4gVGhpcyBpcyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHNvbWV0aGluZyBhbmQgYSBjbGFzcyB0aGF0IHRoZSB0aGluZyBpcyBpbi4gSW4gUkRGYSBzeW50YXgsIGl0IGlzIGJldHRlciB0byB1c2UgdGhlIG5hdGl2ZSBSREZhIHN5bnRheCAtIHRoZSAndHlwZW9mJyBhdHRyaWJ1dGUgLSBmb3IgbXVsdGlwbGUgdHlwZXMuIFNjaGVtYS5vcmcgdG9vbHMgbWF5IGhhdmUgb25seSB3ZWFrZXIgdW5kZXJzdGFuZGluZyBvZiBleHRyYSB0eXBlcywgaW4gcGFydGljdWxhciB0aG9zZSBkZWZpbmVkIGV4dGVybmFsbHkub3BvdGVudGlhbEFjdGlvbqJlb25lT2aCoWQkcmVmbXNjaGVtYTpBY3Rpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOkFjdGlvbmtkZXNjcmlwdGlvbnhySW5kaWNhdGVzIGEgcG90ZW50aWFsIEFjdGlvbiwgd2hpY2ggZGVzY3JpYmVzIGFuIGlkZWFsaXplZCBhY3Rpb24gaW4gd2hpY2ggdGhpcyB0aGluZyB3b3VsZCBwbGF5IGFuICdvYmplY3QnIHJvbGUucG1haW5FbnRpdHlPZlBhZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueLBJbmRpY2F0ZXMgYSBwYWdlIChvciBvdGhlciBDcmVhdGl2ZVdvcmspIGZvciB3aGljaCB0aGlzIHRoaW5nIGlzIHRoZSBtYWluIGVudGl0eSBiZWluZyBkZXNjcmliZWQuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjbWFpbkVudGl0eUJhY2tncm91bmQpIGZvciBkZXRhaWxzLngZZGlzYW1iaWd1YXRpbmdEZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2547EEgc3ViIHByb3BlcnR5IG9mIGRlc2NyaXB0aW9uLiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGZyb20gb3RoZXIsIHNpbWlsYXIgaXRlbXMuIEluZm9ybWF0aW9uIGZyb20gb3RoZXIgcHJvcGVydGllcyAoaW4gcGFydGljdWxhciwgbmFtZSkgbWF5IGJlIG5lY2Vzc2FyeSBmb3IgdGhlIGRlc2NyaXB0aW9uIHRvIGJlIHVzZWZ1bCBmb3IgZGlzYW1iaWd1YXRpb24ua2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5qSW50YW5naWJsZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmcyMvZGVmaW5pdGlvbnMvVGhpbmdrZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmV0aXRsZWpJbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5rZGVzY3JpcHRpb254P0FuIGxpc3QgaXRlbSwgZS5nLiBhIHN0ZXAgaW4gYSBjaGVja2xpc3Qgb3IgaG93LXRvIGRlc2NyaXB0aW9uLmZoZWFkZXKiZnVuaXF1ZXBGMW1wUW9QWkpuQnUvL2RSa2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frxonglyewasal2afgjt3bled2dghuurceiti3qrhv63vg6hf9sc1s"},"kjzl6cwe1jw149mzlkrs661nyhk8juyfg05ajkof14n982ktdzidjamcafg13p2":{"alias":"ItemListOrderType","commits":[{"jws":{"payload":"AXESIGsqm0wrK7Cc3ip-5aiet03olubACopdX_ddIUAJbL_L","signatures":[{"signature":"Vkzfah5BCcjVmPebRJhVLzFaZLuRqzhZI4z9PWRFsceB37yU3d7xEGPzLvBjqY16elMTmj1iNdusaxfJ7_OXAA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreidlfknuykzlwcon4kt64wuj5n2n5clonqakrjov7525efaas3f7zm"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoOiZWNvbnN0dkl0ZW1MaXN0T3JkZXJBc2NlbmRpbmdrZGVzY3JpcHRpb254M0FuIEl0ZW1MaXN0IG9yZGVyZWQgd2l0aCBsb3dlciB2YWx1ZXMgbGlzdGVkIGZpcnN0LqJlY29uc3R3SXRlbUxpc3RPcmRlckRlc2NlbmRpbmdrZGVzY3JpcHRpb254NEFuIEl0ZW1MaXN0IG9yZGVyZWQgd2l0aCBoaWdoZXIgdmFsdWVzIGxpc3RlZCBmaXJzdC6iZWNvbnN0cUl0ZW1MaXN0VW5vcmRlcmVka2Rlc2NyaXB0aW9ueCtBbiBJdGVtTGlzdCBvcmRlcmVkIHdpdGggbm8gZXhwbGljaXQgb3JkZXIuZXRpdGxlcUl0ZW1MaXN0T3JkZXJUeXBlZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZXNjcmlwdGlvbnhcRW51bWVyYXRlZCBmb3IgdmFsdWVzIGZvciBpdGVtTGlzdE9yZGVyIGZvciBpbmRpY2F0aW5nIGhvdyBhbiBvcmRlcmVkIEl0ZW1MaXN0IGlzIG9yZ2FuaXplZC5maGVhZGVyomZ1bmlxdWVwTzBocUZacndWTFZYcDlZVWtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frycjh5fpkbuzud8vwt84ttt1mz71mw11dlec0zgio97ive5tzua68"},"kjzl6cwe1jw145rc08xnewcezeiii16mfpu5grjim51unajgpx2rcfnui3sc4ww":{"alias":"WebPage","commits":[{"jws":{"payload":"AXESIGG6EfL4CcAmutBN4XQA_ficdFpSZEiFj--VHi1nezTY","signatures":[{"signature":"KyDptywxRnbPLph7Ovd0Z2e3Ozn4cNBaT6_Pn0c2tyeshQQ-9amnK4NY1nIvCbiUp75VCkR4OjUuwynl9RhRDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreidbxii7f6ajyatlvucn4f2ab7pytr2fuutejccy734vdywwo6zu3a"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxkyddrjahy0ajr7nk8f3jrqev7usdfx5xmyewb7mgfdkwqxiaxvk"},"kjzl6cwe1jw14b0lzli7kwtaa6yjo5vljgc0ijn2pi1jz7wuwyfanfiggjruvx1":{"alias":"BreadcrumbList","commits":[{"jws":{"payload":"AXESIEPcFTdkUN4Lhp7md1fYb_zNEXCZURPV1qt9SUOR32o8","signatures":[{"signature":"qrQ3W0lj2lXRmmzK2UNqTB0HvR_pjXUp8DHT8s3dqDPp2sAluamLkmQAy5WbpqaCLP4jSfU34thzswMP9m8QCg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicd3qktozcq3yfynhxgo5l5q374zuixbgkrcpk5nk35jfbzdx3khq"},"linkedBlock":"omRkYXRhpmR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ2Iy9kZWZpbml0aW9ucy9JdGVtTGlzdGtkZXNjcmlwdGlvbniwQSBsaXN0IG9mIGl0ZW1zIG9mIGFueSBzb3J04oCUZm9yIGV4YW1wbGUsIFRvcCAxMCBNb3ZpZXMgQWJvdXQgV2VhdGhlcm1lbiwgb3IgVG9wIDEwMCBQYXJ0eSBTb25ncy4gTm90IHRvIGJlIGNvbmZ1c2VkIHdpdGggSFRNTCBsaXN0cywgd2hpY2ggYXJlIG9mdGVuIHVzZWQgb25seSBmb3IgZm9ybWF0dGluZy5ldGl0bGVuQnJlYWRjcnVtYkxpc3RnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEja2RlZmluaXRpb25zo2VUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uaEl0ZW1MaXN0pWR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlaEl0ZW1MaXN0anByb3BlcnRpZXOjbWl0ZW1MaXN0T3JkZXKiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZ4GHNjaGVtYTpJdGVtTGlzdE9yZGVyVHlwZWtkZXNjcmlwdGlvbng5VHlwZSBvZiBvcmRlcmluZyAoZS5nLiBBc2NlbmRpbmcsIERlc2NlbmRpbmcsIFVub3JkZXJlZCkubW51bWJlck9mSXRlbXOiZHR5cGVnaW50ZWdlcmtkZXNjcmlwdGlvbnjKVGhlIG51bWJlciBvZiBpdGVtcyBpbiBhbiBJdGVtTGlzdC4gTm90ZSB0aGF0IHNvbWUgZGVzY3JpcHRpb25zIG1pZ2h0IG5vdCBmdWxseSBkZXNjcmliZSBhbGwgaXRlbXMgaW4gYSBsaXN0IChlLmcuLCBtdWx0aS1wYWdlIHBhZ2luYXRpb24pOyBpbiBzdWNoIGNhc2VzLCB0aGUgbnVtYmVyT2ZJdGVtcyB3b3VsZCBiZSBmb3IgdGhlIGVudGlyZSBsaXN0Lm9pdGVtTGlzdEVsZW1lbnSiZW9uZU9mgqFlYW55T2aDoWR0eXBlZnN0cmluZ6FkJHJlZm9zY2hlbWE6TGlzdEl0ZW2hZCRyZWZsc2NoZW1hOlRoaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoOhZHR5cGVmc3RyaW5noWQkcmVmb3NjaGVtYTpMaXN0SXRlbaFkJHJlZmxzY2hlbWE6VGhpbmdrZGVzY3JpcHRpb255Am9Gb3IgaXRlbUxpc3RFbGVtZW50IHZhbHVlcywgeW91IGNhbiB1c2Ugc2ltcGxlIHN0cmluZ3MgKGUuZy4gIlBldGVyIiwgIlBhdWwiLCAiTWFyeSIpLCBleGlzdGluZyBlbnRpdGllcywgb3IgdXNlIExpc3RJdGVtLlxuXG5UZXh0IHZhbHVlcyBhcmUgYmVzdCBpZiB0aGUgZWxlbWVudHMgaW4gdGhlIGxpc3QgYXJlIHBsYWluIHN0cmluZ3MuIEV4aXN0aW5nIGVudGl0aWVzIGFyZSBiZXN0IGZvciBhIHNpbXBsZSwgdW5vcmRlcmVkIGxpc3Qgb2YgZXhpc3RpbmcgdGhpbmdzIGluIHlvdXIgZGF0YS4gTGlzdEl0ZW0gaXMgdXNlZCB3aXRoIG9yZGVyZWQgbGlzdHMgd2hlbiB5b3Ugd2FudCB0byBwcm92aWRlIGFkZGl0aW9uYWwgY29udGV4dCBhYm91dCB0aGUgZWxlbWVudCBpbiB0aGF0IGxpc3Qgb3Igd2hlbiB0aGUgc2FtZSBpdGVtIG1pZ2h0IGJlIGluIGRpZmZlcmVudCBwbGFjZXMgaW4gZGlmZmVyZW50IGxpc3RzLlxuXG5Ob3RlOiBUaGUgb3JkZXIgb2YgZWxlbWVudHMgaW4geW91ciBtYXJrLXVwIGlzIG5vdCBzdWZmaWNpZW50IGZvciBpbmRpY2F0aW5nIHRoZSBvcmRlciBvciBlbGVtZW50cy4gIFVzZSBMaXN0SXRlbSB3aXRoIGEgJ3Bvc2l0aW9uJyBwcm9wZXJ0eSBpbiBzdWNoIGNhc2VzLmtkZXNjcmlwdGlvbniwQSBsaXN0IG9mIGl0ZW1zIG9mIGFueSBzb3J04oCUZm9yIGV4YW1wbGUsIFRvcCAxMCBNb3ZpZXMgQWJvdXQgV2VhdGhlcm1lbiwgb3IgVG9wIDEwMCBQYXJ0eSBTb25ncy4gTm90IHRvIGJlIGNvbmZ1c2VkIHdpdGggSFRNTCBsaXN0cywgd2hpY2ggYXJlIG9mdGVuIHVzZWQgb25seSBmb3IgZm9ybWF0dGluZy5qSW50YW5naWJsZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmcyMvZGVmaW5pdGlvbnMvVGhpbmdrZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmV0aXRsZWpJbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5rZGVzY3JpcHRpb255AsZBIEJyZWFkY3J1bWJMaXN0IGlzIGFuIEl0ZW1MaXN0IGNvbnNpc3Rpbmcgb2YgYSBjaGFpbiBvZiBsaW5rZWQgV2ViIHBhZ2VzLCB0eXBpY2FsbHkgZGVzY3JpYmVkIHVzaW5nIGF0IGxlYXN0IHRoZWlyIFVSTCBhbmQgdGhlaXIgbmFtZSwgYW5kIHR5cGljYWxseSBlbmRpbmcgd2l0aCB0aGUgY3VycmVudCBwYWdlLlxuXG5UaGUgW1twb3NpdGlvbl1dIHByb3BlcnR5IGlzIHVzZWQgdG8gcmVjb25zdHJ1Y3QgdGhlIG9yZGVyIG9mIHRoZSBpdGVtcyBpbiBhIEJyZWFkY3J1bWJMaXN0IFRoZSBjb252ZW50aW9uIGlzIHRoYXQgYSBicmVhZGNydW1iIGxpc3QgaGFzIGFuIFtbaXRlbUxpc3RPcmRlcl1dIG9mIFtbSXRlbUxpc3RPcmRlckFzY2VuZGluZ11dIChsb3dlciB2YWx1ZXMgbGlzdGVkIGZpcnN0KSwgYW5kIHRoYXQgdGhlIGZpcnN0IGl0ZW1zIGluIHRoaXMgbGlzdCBjb3JyZXNwb25kIHRvIHRoZSAidG9wIiBvciBiZWdpbm5pbmcgb2YgdGhlIGJyZWFkY3J1bWIgdHJhaWwsIGUuZy4gd2l0aCBhIHNpdGUgb3Igc2VjdGlvbiBob21lcGFnZS4gVGhlIHNwZWNpZmljIHZhbHVlcyBvZiAncG9zaXRpb24nIGFyZSBub3QgYXNzaWduZWQgbWVhbmluZyBmb3IgYSBCcmVhZGNydW1iTGlzdCwgYnV0IHRoZXkgc2hvdWxkIGJlIGludGVnZXJzLCBlLmcuIGJlZ2lubmluZyB3aXRoICcxJyBmb3IgdGhlIGZpcnN0IGl0ZW0gaW4gdGhlIGxpc3QuCiAgICAgIGZoZWFkZXKiZnVuaXF1ZXBWVHoxTnd5NGZ5K2ptVWpka2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frymccd4xhwpc94hhnvtsp6c5fnvo39cb22g9nucsrqmb91om3myv4"},"kjzl6cwe1jw149gx4ny875je3o2debei2ulxraolylvaq0sx3mwbsi849j0bc8y":{"alias":"WebPageElement","commits":[{"jws":{"payload":"AXESIOv8bMGLtAb98dAkoO7TqSlAlLNrYPu4DWJ4C8kLD5Ep","signatures":[{"signature":"Piv7oWaAgv6DCYfGxIi8MLBYUblrXMX5CcLnnvzf-_J5G1xe4am9lvSPPk35Bs6BTMXOblFaG3tNNXoaRhspCQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihl7rwmdc5ua367dubeudxnhkjjicklg23a7o4a2ytybpeqwd4rfe"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frybcbl6beavdwa34v9t34k9o023z063ik91pndutvuplqbr68n3ls"},"kjzl6cwe1jw147e2kehoq791c920uk84pmg4v5msm24jr35se1k3u8qa3dz3ch2":{"alias":"DefinedTerm","commits":[{"jws":{"payload":"AXESIN7g5PcFmk1qfmCUuslPkKIQMfeAn-Tm6zjgvsptBfHw","signatures":[{"signature":"zOuyKfPuwn8AZj8kR3MXxpLojoNnZvZBUXGlYkptVBpnkrYmCUj-iPNAZWQYcIDUsFwrV9eupmAeD_jV9uOkDQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreig64dspobm2jvvh4yeuxleu7efccay7pae74ttowohax3fg2bpr6a"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxla0RlZmluZWRUZXJtZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzomh0ZXJtQ29kZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254R0EgY29kZSB0aGF0IGlkZW50aWZpZXMgdGhpcyBbW0RlZmluZWRUZXJtXV0gd2l0aGluIGEgW1tEZWZpbmVkVGVybVNldF1dcGluRGVmaW5lZFRlcm1TZXSiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmdXNjaGVtYTpEZWZpbmVkVGVybVNldKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmdXNjaGVtYTpEZWZpbmVkVGVybVNldGtkZXNjcmlwdGlvbngtQSBbW0RlZmluZWRUZXJtU2V0XV0gdGhhdCBjb250YWlucyB0aGlzIHRlcm0ua2RlZmluaXRpb25zomVUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uakludGFuZ2libGWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZnMjL2RlZmluaXRpb25zL1RoaW5na2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5ldGl0bGVqSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMua2Rlc2NyaXB0aW9ueQFmQSB3b3JkLCBuYW1lLCBhY3JvbnltLCBwaHJhc2UsIGV0Yy4gd2l0aCBhIGZvcm1hbCBkZWZpbml0aW9uLiBPZnRlbiB1c2VkIGluIHRoZSBjb250ZXh0IG9mIGNhdGVnb3J5IG9yIHN1YmplY3QgY2xhc3NpZmljYXRpb24sIGdsb3NzYXJpZXMgb3IgZGljdGlvbmFyaWVzLCBwcm9kdWN0IG9yIGNyZWF0aXZlIHdvcmsgdHlwZXMsIGV0Yy4gVXNlIHRoZSBuYW1lIHByb3BlcnR5IGZvciB0aGUgdGVybSBiZWluZyBkZWZpbmVkLCB1c2UgdGVybUNvZGUgaWYgdGhlIHRlcm0gaGFzIGFuIGFscGhhLW51bWVyaWMgY29kZSBhbGxvY2F0ZWQsIHVzZSBkZXNjcmlwdGlvbiB0byBwcm92aWRlIHRoZSBkZWZpbml0aW9uIG9mIHRoZSB0ZXJtLmZoZWFkZXKiZnVuaXF1ZXB4bXpzdzJpKzU4ZzlMYXROa2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frxwk2931rubk9j4ee1btti7mqlk23gv4cgmh5vv2zb22vs3djspa8"},"kjzl6cwe1jw147t15wiceea29n2kq0a426htx81b28scqcwabnwfaw5iya5m8r0":{"alias":"DefinedTermSet","commits":[{"jws":{"payload":"AXESILKTX6jRW5LkPkfUtGbE3bjjql30EC_uARsp7-zk_Wi8","signatures":[{"signature":"SBSRssG3urxISdggcFEFnl6L_avo0ivMfDb8DdVrMEanxqedB6bgGrgblk8s0t_sz27vnJUKifOnN4LlqE5UDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifssnp2ruk3slsd4r6uwrtmjxny4ovf35aqf7xacgzj57woj7lixq"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxzig9z6g6djk4k2bcxzwvi6ss95anyhmjfplexyktgnars7y6800"},"kjzl6cwe1jw147dx2fnmcs78btxsncu95vstzp4ksevpcclx0yjhmck2wk12xy6":{"alias":"AudioObject","commits":[{"jws":{"payload":"AXESIF4ac1kLjn-DaP3YpSxrqoaJZe9Wa9RHBdYlfW9pBaWs","signatures":[{"signature":"xH7G9EmnAxYuZmxt4lI88hChMoAycBc3OQcCl1iSS7fXq6sc7Xrcye1LPzgLoEQsZ-dsu0Pb724PCqsQRL3sBQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreic6djzvsc4op6bwr7oyuuwgxkugrfs66vtl2rdqlvrfpvxwsbnfvq"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxwiz5bbyywjf84wbq3b55u519uoju1tg7tnuutmlaxasnifoxeyo"},"kjzl6cwe1jw147og7idc43v7eoy13xxsd4t82dm624myp2q5b4ksgywec7c60ga":{"alias":"Claim","commits":[{"jws":{"payload":"AXESINj2w7FEacfGL9EIu7tch1yNQUfrQU1ViHgpvjpAvG3W","signatures":[{"signature":"dnnzWuHWuozyYD-ZeL5hA9RSQe-8jZmGXhj3tsOmjz4RIDDd5GGXOy-Fw8wtPjKpVUO7sACogkTO2zQt43u1Aw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreigy63b3crdjy7dc7uiixo5vzb24rvaup22bjvkyq6bjxy5ebpdn2y"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxylv9emu57hwohdzw1c9pe7tcwtn34zaqbdxr4jugo6dys6ir7r4"},"kjzl6cwe1jw14azkx7c8yomtotkkzl07ej878i7x93pofr75pz97uy24qygi611":{"alias":"Clip","commits":[{"jws":{"payload":"AXESIH3qk4nxnn_vp-3_iYwC_UnO1M11arZLGXcNqYUwb3ln","signatures":[{"signature":"a3Ksk8FsAr3iRhJv0FLeodJSPkcqY1y32ENI8pGwtpnpqoXVPpB8r2NJGLwh0jpsTTeP06CyyDUGtq2ZnVozDw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreid55kjyt4m6p7x2p3p7rggaf7kjz3km25lkwzfrs5ynvgcta33zm4"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frym50s473qn6b4iad91dgncqbghkcgqels1ewoqpjw275rp1d6vb4"},"kjzl6cwe1jw147v468lsjyd4tmxtuw6zy2thw33butpsf3smx6dgo0x86xn2qe8":{"alias":"HyperTocEntry","commits":[{"jws":{"payload":"AXESIDDp6JrUGelVllRgU4swDHF7eQ86-CmntjL3EuIAE4a9","signatures":[{"signature":"o39ooHU0thloRAd3HiePgPGXHB3qLiI4r4Rxp2mvjZTOZB9iZIKN1srsD9WC_9n1CoPh9dpV3DrCe5UENhCmDw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreibq5hujvvaz5fkzmvdakoftaddrpn4q6oxyfgt3mmxxclraae4gxu"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxzx9od6z1wdear4kboxrmc1r85zob7be3ezmzxbqiuka9b83fp4w"},"kjzl6cwe1jw145bl4zw5pb9x01bksjzdg1yqb9f50xsn06ds56orz9x5y51zs9c":{"alias":"MusicRecording","commits":[{"jws":{"payload":"AXESIFaKrjQSQOyJNWvZPrUfH8Nzh8Z98YJDBpHDxiIBaV31","signatures":[{"signature":"WbdcOGGv9U_Z9zfKUkqK-dL-1mqtVFNh6EUz9nOp32RO73WfnWw2pPbji64tvx-7MBBv85XPEXMPmhdC6YTkAA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicwrkxdiesa5setk26zh22r6h6dood4m7prqjbqneodyyrac2k56u"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GiMvZGVmaW5pdGlvbnMvQ3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueGVUaGUgbW9zdCBnZW5lcmljIGtpbmQgb2YgY3JlYXRpdmUgd29yaywgaW5jbHVkaW5nIGJvb2tzLCBtb3ZpZXMsIHBob3RvZ3JhcGhzLCBzb2Z0d2FyZSBwcm9ncmFtcywgZXRjLmV0aXRsZW5NdXNpY1JlY29yZGluZ2ckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNqcHJvcGVydGllc6ZnaW5BbGJ1baJkJHJlZnFzY2hlbWE6TXVzaWNBbGJ1bWtkZXNjcmlwdGlvbngqVGhlIGFsYnVtIHRvIHdoaWNoIHRoaXMgcmVjb3JkaW5nIGJlbG9uZ3MuaGJ5QXJ0aXN0omVhbnlPZoKhZCRyZWZxc2NoZW1hOk11c2ljR3JvdXChZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbngyVGhlIGFydGlzdCB0aGF0IHBlcmZvcm1lZCB0aGlzIGFsYnVtIG9yIHJlY29yZGluZy5oZHVyYXRpb26jZHR5cGVmc3RyaW5naCRjb21tZW50eBtodHRwczovL3NjaGVtYS5vcmcvRHVyYXRpb25rZGVzY3JpcHRpb254gFRoZSBkdXJhdGlvbiBvZiB0aGUgaXRlbSAobW92aWUsIGF1ZGlvIHJlY29yZGluZywgZXZlbnQsIGV0Yy4pIGluIFtJU08gODYwMSBkYXRlIGZvcm1hdF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSkuaGlzcmNDb2RlomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbng8VGhlIEludGVybmF0aW9uYWwgU3RhbmRhcmQgUmVjb3JkaW5nIENvZGUgZm9yIHRoZSByZWNvcmRpbmcuamluUGxheWxpc3SiZCRyZWZ0c2NoZW1hOk11c2ljUGxheWxpc3RrZGVzY3JpcHRpb254LVRoZSBwbGF5bGlzdCB0byB3aGljaCB0aGlzIHJlY29yZGluZyBiZWxvbmdzLmtyZWNvcmRpbmdPZqJkJHJlZndzY2hlbWE6TXVzaWNDb21wb3NpdGlvbmtkZXNjcmlwdGlvbngtVGhlIGNvbXBvc2l0aW9uIHRoaXMgdHJhY2sgaXMgYSByZWNvcmRpbmcgb2Yua2RlZmluaXRpb25zomVUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0ubENyZWF0aXZlV29ya6VkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmcyMvZGVmaW5pdGlvbnMvVGhpbmdrZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmV0aXRsZWxDcmVhdGl2ZVdvcmtqcHJvcGVydGllc7hvZHNpemWiZW9uZU9mgqFlYW55T2aEoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm2hZCRyZWZ4GHNjaGVtYTpRdWFudGl0YXRpdmVWYWx1ZaFkJHJlZngYc2NoZW1hOlNpemVTcGVjaWZpY2F0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoShZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybaFkJHJlZngYc2NoZW1hOlF1YW50aXRhdGl2ZVZhbHVloWQkcmVmeBhzY2hlbWE6U2l6ZVNwZWNpZmljYXRpb25rZGVzY3JpcHRpb255AUlBIHN0YW5kYXJkaXplZCBzaXplIG9mIGEgcHJvZHVjdCBvciBjcmVhdGl2ZSB3b3JrLCBzcGVjaWZpZWQgZWl0aGVyIHRocm91Z2ggYSBzaW1wbGUgdGV4dHVhbCBzdHJpbmcgKGZvciBleGFtcGxlICdYTCcsICczMld4MzRMJyksIGEgIFF1YW50aXRhdGl2ZVZhbHVlIHdpdGggYSB1bml0Q29kZSwgb3IgYSBjb21wcmVoZW5zaXZlIGFuZCBzdHJ1Y3R1cmVkIFtbU2l6ZVNwZWNpZmljYXRpb25dXTsgaW4gb3RoZXIgY2FzZXMsIHRoZSBbW3dpZHRoXV0sIFtbaGVpZ2h0XV0sIFtbZGVwdGhdXSBhbmQgW1t3ZWlnaHRdXSBwcm9wZXJ0aWVzIG1heSBiZSBtb3JlIGFwcGxpY2FibGUuIGR0ZXh0omR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngpVGhlIHRleHR1YWwgY29udGVudCBvZiB0aGlzIENyZWF0aXZlV29yay5lYWJvdXSiZCRyZWZsc2NoZW1hOlRoaW5na2Rlc2NyaXB0aW9ueCJUaGUgc3ViamVjdCBtYXR0ZXIgb2YgdGhlIGNvbnRlbnQuZWF1ZGlvomVvbmVPZoKhZWFueU9mg6FkJHJlZnJzY2hlbWE6QXVkaW9PYmplY3ShZCRyZWZrc2NoZW1hOkNsaXChZCRyZWZ1c2NoZW1hOk11c2ljUmVjb3JkaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoOhZCRyZWZyc2NoZW1hOkF1ZGlvT2JqZWN0oWQkcmVma3NjaGVtYTpDbGlwoWQkcmVmdXNjaGVtYTpNdXNpY1JlY29yZGluZ2tkZXNjcmlwdGlvbngZQW4gZW1iZWRkZWQgYXVkaW8gb2JqZWN0LmVhd2FyZKJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254IUFuIGF3YXJkIHdvbiBieSBvciBmb3IgdGhpcyBpdGVtLmVnZW5yZaJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbng3R2VucmUgb2YgdGhlIGNyZWF0aXZlIHdvcmssIGJyb2FkY2FzdCBjaGFubmVsIG9yIGdyb3VwLmV2aWRlb6Jlb25lT2aCoWVhbnlPZoKhZCRyZWZrc2NoZW1hOkNsaXChZCRyZWZyc2NoZW1hOlZpZGVvT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZrc2NoZW1hOkNsaXChZCRyZWZyc2NoZW1hOlZpZGVvT2JqZWN0a2Rlc2NyaXB0aW9ueBlBbiBlbWJlZGRlZCB2aWRlbyBvYmplY3QuZmF1dGhvcqJlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnjbVGhlIGF1dGhvciBvZiB0aGlzIGNvbnRlbnQgb3IgcmF0aW5nLiBQbGVhc2Ugbm90ZSB0aGF0IGF1dGhvciBpcyBzcGVjaWFsIGluIHRoYXQgSFRNTCA1IHByb3ZpZGVzIGEgc3BlY2lhbCBtZWNoYW5pc20gZm9yIGluZGljYXRpbmcgYXV0aG9yc2hpcCB2aWEgdGhlIHJlbCB0YWcuIFRoYXQgaXMgZXF1aXZhbGVudCB0byB0aGlzIGFuZCBtYXkgYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkuZmF3YXJkc6Jlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254H0F3YXJkcyB3b24gYnkgb3IgZm9yIHRoaXMgaXRlbS5mZWRpdG9yomQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254MVNwZWNpZmllcyB0aGUgUGVyc29uIHdobyBlZGl0ZWQgdGhlIENyZWF0aXZlV29yay5mZnVuZGVyomVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb26iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254aEEgcGVyc29uIG9yIG9yZ2FuaXphdGlvbiB0aGF0IHN1cHBvcnRzIChzcG9uc29ycykgc29tZXRoaW5nIHRocm91Z2ggc29tZSBraW5kIG9mIGZpbmFuY2lhbCBjb250cmlidXRpb24uZm9mZmVyc6Jlb25lT2aCoWVhbnlPZoKhZCRyZWZtc2NoZW1hOkRlbWFuZKFkJHJlZmxzY2hlbWE6T2ZmZXKiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZm1zY2hlbWE6RGVtYW5koWQkcmVmbHNjaGVtYTpPZmZlcmtkZXNjcmlwdGlvbnkCBUFuIG9mZmVyIHRvIHByb3ZpZGUgdGhpcyBpdGVt4oCUZm9yIGV4YW1wbGUsIGFuIG9mZmVyIHRvIHNlbGwgYSBwcm9kdWN0LCByZW50IHRoZSBEVkQgb2YgYSBtb3ZpZSwgcGVyZm9ybSBhIHNlcnZpY2UsIG9yIGdpdmUgYXdheSB0aWNrZXRzIHRvIGFuIGV2ZW50LiBVc2UgW1tidXNpbmVzc0Z1bmN0aW9uXV0gdG8gaW5kaWNhdGUgdGhlIGtpbmQgb2YgdHJhbnNhY3Rpb24gb2ZmZXJlZCwgaS5lLiBzZWxsLCBsZWFzZSwgZXRjLiBUaGlzIHByb3BlcnR5IGNhbiBhbHNvIGJlIHVzZWQgdG8gZGVzY3JpYmUgYSBbW0RlbWFuZF1dLiBXaGlsZSB0aGlzIHByb3BlcnR5IGlzIGxpc3RlZCBhcyBleHBlY3RlZCBvbiBhIG51bWJlciBvZiBjb21tb24gdHlwZXMsIGl0IGNhbiBiZSB1c2VkIGluIG90aGVycy4gSW4gdGhhdCBjYXNlLCB1c2luZyBhIHNlY29uZCB0eXBlLCBzdWNoIGFzIFByb2R1Y3Qgb3IgYSBzdWJ0eXBlIG9mIFByb2R1Y3QsIGNhbiBjbGFyaWZ5IHRoZSBuYXR1cmUgb2YgdGhlIG9mZmVyLgogICAgICBmcmV2aWV3omVvbmVPZoKhZCRyZWZtc2NoZW1hOlJldmlld6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6UmV2aWV3a2Rlc2NyaXB0aW9udUEgcmV2aWV3IG9mIHRoZSBpdGVtLmdjb21tZW50omVvbmVPZoKhZCRyZWZuc2NoZW1hOkNvbW1lbnSiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZuc2NoZW1hOkNvbW1lbnRrZGVzY3JpcHRpb254H0NvbW1lbnRzLCB0eXBpY2FsbHkgZnJvbSB1c2Vycy5nY3JlYXRvcqJlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnhiVGhlIGNyZWF0b3IvYXV0aG9yIG9mIHRoaXMgQ3JlYXRpdmVXb3JrLiBUaGlzIGlzIHRoZSBzYW1lIGFzIHRoZSBBdXRob3IgcHJvcGVydHkgZm9yIENyZWF0aXZlV29yay5nZXhwaXJlc6NkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGVrZGVzY3JpcHRpb255AS9EYXRlIHRoZSBjb250ZW50IGV4cGlyZXMgYW5kIGlzIG5vIGxvbmdlciB1c2VmdWwgb3IgYXZhaWxhYmxlLiBGb3IgZXhhbXBsZSBhIFtbVmlkZW9PYmplY3RdXSBvciBbW05ld3NBcnRpY2xlXV0gd2hvc2UgYXZhaWxhYmlsaXR5IG9yIHJlbGV2YW5jZSBpcyB0aW1lLWxpbWl0ZWQsIG9yIGEgW1tDbGFpbVJldmlld11dIGZhY3QgY2hlY2sgd2hvc2UgcHVibGlzaGVyIHdhbnRzIHRvIGluZGljYXRlIHRoYXQgaXQgbWF5IG5vIGxvbmdlciBiZSByZWxldmFudCAob3IgaGVscGZ1bCB0byBoaWdobGlnaHQpIGFmdGVyIHNvbWUgZGF0ZS5naGFzUGFydKJlb25lT2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnhdSW5kaWNhdGVzIGFuIGl0ZW0gb3IgQ3JlYXRpdmVXb3JrIHRoYXQgaXMgcGFydCBvZiB0aGlzIGl0ZW0sIG9yIENyZWF0aXZlV29yayAoaW4gc29tZSBzZW5zZSkuZ2xpY2Vuc2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueExBIGxpY2Vuc2UgZG9jdW1lbnQgdGhhdCBhcHBsaWVzIHRvIHRoaXMgY29udGVudCwgdHlwaWNhbGx5IGluZGljYXRlZCBieSBVUkwuZ3BhdHRlcm6iZW9uZU9mgqFlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm2iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueLlBIHBhdHRlcm4gdGhhdCBzb21ldGhpbmcgaGFzLCBmb3IgZXhhbXBsZSAncG9sa2EgZG90JywgJ3N0cmlwZWQnLCAnQ2FuYWRpYW4gZmxhZycuIFZhbHVlcyBhcmUgdHlwaWNhbGx5IGV4cHJlc3NlZCBhcyB0ZXh0LCBhbHRob3VnaCBsaW5rcyB0byBjb250cm9sbGVkIHZhbHVlIHNjaGVtZXMgYXJlIGFsc28gc3VwcG9ydGVkLmdyZXZpZXdzomVvbmVPZoKhZCRyZWZtc2NoZW1hOlJldmlld6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6UmV2aWV3a2Rlc2NyaXB0aW9uc1JldmlldyBvZiB0aGUgaXRlbS5nc3BhdGlhbKJkJHJlZmxzY2hlbWE6UGxhY2VrZGVzY3JpcHRpb254r1RoZSAic3BhdGlhbCIgcHJvcGVydHkgY2FuIGJlIHVzZWQgaW4gY2FzZXMgd2hlbiBtb3JlIHNwZWNpZmljIHByb3BlcnRpZXMKKGUuZy4gW1tsb2NhdGlvbkNyZWF0ZWRdXSwgW1tzcGF0aWFsQ292ZXJhZ2VdXSwgW1tjb250ZW50TG9jYXRpb25dXSkgYXJlIG5vdCBrbm93biB0byBiZSBhcHByb3ByaWF0ZS5nc3BvbnNvcqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29uomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueKpBIHBlcnNvbiBvciBvcmdhbml6YXRpb24gdGhhdCBzdXBwb3J0cyBhIHRoaW5nIHRocm91Z2ggYSBwbGVkZ2UsIHByb21pc2UsIG9yIGZpbmFuY2lhbCBjb250cmlidXRpb24uIGUuZy4gYSBzcG9uc29yIG9mIGEgTWVkaWNhbCBTdHVkeSBvciBhIGNvcnBvcmF0ZSBzcG9uc29yIG9mIGFuIGV2ZW50Lmd0ZWFjaGVzomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybWtkZXNjcmlwdGlvbnh+VGhlIGl0ZW0gYmVpbmcgZGVzY3JpYmVkIGlzIGludGVuZGVkIHRvIGhlbHAgYSBwZXJzb24gbGVhcm4gdGhlIGNvbXBldGVuY3kgb3IgbGVhcm5pbmcgb3V0Y29tZSBkZWZpbmVkIGJ5IHRoZSByZWZlcmVuY2VkIHRlcm0uZ3ZlcnNpb26iZWFueU9mgqFkdHlwZWZudW1iZXKhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueEFUaGUgdmVyc2lvbiBvZiB0aGUgQ3JlYXRpdmVXb3JrIGVtYm9kaWVkIGJ5IGEgc3BlY2lmaWVkIHJlc291cmNlLmhhYnN0cmFjdKJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254RkFuIGFic3RyYWN0IGlzIGEgc2hvcnQgZGVzY3JpcHRpb24gdGhhdCBzdW1tYXJpemVzIGEgW1tDcmVhdGl2ZVdvcmtdXS5oYXNzZXNzZXOiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueHFUaGUgaXRlbSBiZWluZyBkZXNjcmliZWQgaXMgaW50ZW5kZWQgdG8gYXNzZXNzIHRoZSBjb21wZXRlbmN5IG9yIGxlYXJuaW5nIG91dGNvbWUgZGVmaW5lZCBieSB0aGUgcmVmZXJlbmNlZCB0ZXJtLmhhdWRpZW5jZaJkJHJlZm9zY2hlbWE6QXVkaWVuY2VrZGVzY3JpcHRpb254QkFuIGludGVuZGVkIGF1ZGllbmNlLCBpLmUuIGEgZ3JvdXAgZm9yIHdob20gc29tZXRoaW5nIHdhcyBjcmVhdGVkLmhjaXRhdGlvbqJlb25lT2aCoWVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnhwQSBjaXRhdGlvbiBvciByZWZlcmVuY2UgdG8gYW5vdGhlciBjcmVhdGl2ZSB3b3JrLCBzdWNoIGFzIGFub3RoZXIgcHVibGljYXRpb24sIHdlYiBwYWdlLCBzY2hvbGFybHkgYXJ0aWNsZSwgZXRjLmhlZGl0RUlEUqJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueQJwQW4gW0VJRFJdKGh0dHBzOi8vZWlkci5vcmcvKSAoRW50ZXJ0YWlubWVudCBJZGVudGlmaWVyIFJlZ2lzdHJ5KSBbW2lkZW50aWZpZXJdXSByZXByZXNlbnRpbmcgYSBzcGVjaWZpYyBlZGl0IC8gZWRpdGlvbiBmb3IgYSB3b3JrIG9mIGZpbG0gb3IgdGVsZXZpc2lvbi4KCkZvciBleGFtcGxlLCB0aGUgbW90aW9uIHBpY3R1cmUga25vd24gYXMgIkdob3N0YnVzdGVycyIgd2hvc2UgW1t0aXRsZUVJRFJdXSBpcyAiMTAuNTI0MC83RUM3LTIyOEEtNTEwQS0wNTNFLUNCQjgtSiIsIGhhcyBzZXZlcmFsIGVkaXRzIGUuZy4gIjEwLjUyNDAvMUYyQS1FMUM1LTY4MEEtMTRDNi1FNzZCLUkiIGFuZCAiMTAuNTI0MC84QTM1LTNCRUUtNjQ5Ny01RDEyLTlFNEYtMyIuCgpTaW5jZSBzY2hlbWEub3JnIHR5cGVzIGxpa2UgW1tNb3ZpZV1dIGFuZCBbW1RWRXBpc29kZV1dIGNhbiBiZSB1c2VkIGZvciBib3RoIHdvcmtzIGFuZCB0aGVpciBtdWx0aXBsZSBleHByZXNzaW9ucywgaXQgaXMgcG9zc2libGUgdG8gdXNlIFtbdGl0bGVFSURSXV0gYWxvbmUgKGZvciBhIGdlbmVyYWwgZGVzY3JpcHRpb24pLCBvciBhbG9uZ3NpZGUgW1tlZGl0RUlEUl1dIGZvciBhIG1vcmUgZWRpdC1zcGVjaWZpYyBkZXNjcmlwdGlvbi4KaGVuY29kaW5nomVvbmVPZoKhZCRyZWZyc2NoZW1hOk1lZGlhT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmcnNjaGVtYTpNZWRpYU9iamVjdGtkZXNjcmlwdGlvbnheQSBtZWRpYSBvYmplY3QgdGhhdCBlbmNvZGVzIHRoaXMgQ3JlYXRpdmVXb3JrLiBUaGlzIHByb3BlcnR5IGlzIGEgc3lub255bSBmb3IgYXNzb2NpYXRlZE1lZGlhLmhoZWFkbGluZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GEhlYWRsaW5lIG9mIHRoZSBhcnRpY2xlLmhpc1BhcnRPZqJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254XkluZGljYXRlcyBhbiBpdGVtIG9yIENyZWF0aXZlV29yayB0aGF0IHRoaXMgaXRlbSwgb3IgQ3JlYXRpdmVXb3JrIChpbiBzb21lIHNlbnNlKSwgaXMgcGFydCBvZi5oa2V5d29yZHOiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueHZLZXl3b3JkcyBvciB0YWdzIHVzZWQgdG8gZGVzY3JpYmUgdGhpcyBjb250ZW50LiBNdWx0aXBsZSBlbnRyaWVzIGluIGEga2V5d29yZHMgbGlzdCBhcmUgdHlwaWNhbGx5IGRlbGltaXRlZCBieSBjb21tYXMuaG1hdGVyaWFsomVvbmVPZoKhZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZuc2NoZW1hOlByb2R1Y3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZuc2NoZW1hOlByb2R1Y3RrZGVzY3JpcHRpb254SkEgbWF0ZXJpYWwgdGhhdCBzb21ldGhpbmcgaXMgbWFkZSBmcm9tLCBlLmcuIGxlYXRoZXIsIHdvb2wsIGNvdHRvbiwgcGFwZXIuaG1lbnRpb25zomVvbmVPZoKhZCRyZWZsc2NoZW1hOlRoaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbHNjaGVtYTpUaGluZ2tkZXNjcmlwdGlvbnhgSW5kaWNhdGVzIHRoYXQgdGhlIENyZWF0aXZlV29yayBjb250YWlucyBhIHJlZmVyZW5jZSB0bywgYnV0IGlzIG5vdCBuZWNlc3NhcmlseSBhYm91dCBhIGNvbmNlcHQuaHBvc2l0aW9uomVhbnlPZoKhZHR5cGVnaW50ZWdlcqFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254OVRoZSBwb3NpdGlvbiBvZiBhbiBpdGVtIGluIGEgc2VyaWVzIG9yIHNlcXVlbmNlIG9mIGl0ZW1zLmhwcm9kdWNlcqJlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnhhVGhlIHBlcnNvbiBvciBvcmdhbml6YXRpb24gd2hvIHByb2R1Y2VkIHRoZSB3b3JrIChlLmcuIG11c2ljIGFsYnVtLCBtb3ZpZSwgdHYvcmFkaW8gc2VyaWVzIGV0Yy4pLmhwcm92aWRlcqJlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnjQVGhlIHNlcnZpY2UgcHJvdmlkZXIsIHNlcnZpY2Ugb3BlcmF0b3IsIG9yIHNlcnZpY2UgcGVyZm9ybWVyOyB0aGUgZ29vZHMgcHJvZHVjZXIuIEFub3RoZXIgcGFydHkgKGEgc2VsbGVyKSBtYXkgb2ZmZXIgdGhvc2Ugc2VydmljZXMgb3IgZ29vZHMgb24gYmVoYWxmIG9mIHRoZSBwcm92aWRlci4gQSBwcm92aWRlciBtYXkgYWxzbyBzZXJ2ZSBhcyB0aGUgc2VsbGVyLmh0ZW1wb3JhbKJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1loWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbni+VGhlICJ0ZW1wb3JhbCIgcHJvcGVydHkgY2FuIGJlIHVzZWQgaW4gY2FzZXMgd2hlcmUgbW9yZSBzcGVjaWZpYyBwcm9wZXJ0aWVzCihlLmcuIFtbdGVtcG9yYWxDb3ZlcmFnZV1dLCBbW2RhdGVDcmVhdGVkXV0sIFtbZGF0ZU1vZGlmaWVkXV0sIFtbZGF0ZVB1Ymxpc2hlZF1dKSBhcmUgbm90IGtub3duIHRvIGJlIGFwcHJvcHJpYXRlLmljaGFyYWN0ZXKiZW9uZU9mgqFkJHJlZm1zY2hlbWE6UGVyc29uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254MEZpY3Rpb25hbCBwZXJzb24gY29ubmVjdGVkIHdpdGggYSBjcmVhdGl2ZSB3b3JrLmllbmNvZGluZ3OiZW9uZU9mgqFkJHJlZnJzY2hlbWE6TWVkaWFPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZyc2NoZW1hOk1lZGlhT2JqZWN0a2Rlc2NyaXB0aW9ueC5BIG1lZGlhIG9iamVjdCB0aGF0IGVuY29kZXMgdGhpcyBDcmVhdGl2ZVdvcmsuaWlzQmFzZWRPbqJlb25lT2aCoWVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZm5zY2hlbWE6UHJvZHVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZuc2NoZW1hOlByb2R1Y3RrZGVzY3JpcHRpb254WkEgcmVzb3VyY2UgZnJvbSB3aGljaCB0aGlzIHdvcmsgaXMgZGVyaXZlZCBvciBmcm9tIHdoaWNoIGl0IGlzIGEgbW9kaWZpY2F0aW9uIG9yIGFkYXB0aW9uLmlwdWJsaXNoZXKiZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254I1RoZSBwdWJsaXNoZXIgb2YgdGhlIGNyZWF0aXZlIHdvcmsuaXNkTGljZW5zZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254VEEgbGljZW5zZSBkb2N1bWVudCB0aGF0IGFwcGxpZXMgdG8gdGhpcyBzdHJ1Y3R1cmVkIGRhdGEsIHR5cGljYWxseSBpbmRpY2F0ZWQgYnkgVVJMLml1c2FnZUluZm+iZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueQM3VGhlIHNjaGVtYS5vcmcgW1t1c2FnZUluZm9dXSBwcm9wZXJ0eSBpbmRpY2F0ZXMgZnVydGhlciBpbmZvcm1hdGlvbiBhYm91dCBhIFtbQ3JlYXRpdmVXb3JrXV0uIFRoaXMgcHJvcGVydHkgaXMgYXBwbGljYWJsZSBib3RoIHRvIHdvcmtzIHRoYXQgYXJlIGZyZWVseSBhdmFpbGFibGUgYW5kIHRvIHRob3NlIHRoYXQgcmVxdWlyZSBwYXltZW50IG9yIG90aGVyIHRyYW5zYWN0aW9ucy4gSXQgY2FuIHJlZmVyZW5jZSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGUuZy4gY29tbXVuaXR5IGV4cGVjdGF0aW9ucyBvbiBwcmVmZXJyZWQgbGlua2luZyBhbmQgY2l0YXRpb24gY29udmVudGlvbnMsIGFzIHdlbGwgYXMgcHVyY2hhc2luZyBkZXRhaWxzLiBGb3Igc29tZXRoaW5nIHRoYXQgY2FuIGJlIGNvbW1lcmNpYWxseSBsaWNlbnNlZCwgdXNhZ2VJbmZvIGNhbiBwcm92aWRlIGRldGFpbGVkLCByZXNvdXJjZS1zcGVjaWZpYyBpbmZvcm1hdGlvbiBhYm91dCBsaWNlbnNpbmcgb3B0aW9ucy4KClRoaXMgcHJvcGVydHkgY2FuIGJlIHVzZWQgYWxvbmdzaWRlIHRoZSBsaWNlbnNlIHByb3BlcnR5IHdoaWNoIGluZGljYXRlcyBsaWNlbnNlKHMpIGFwcGxpY2FibGUgdG8gc29tZSBwaWVjZSBvZiBjb250ZW50LiBUaGUgdXNhZ2VJbmZvIHByb3BlcnR5IGNhbiBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IG90aGVyIGxpY2Vuc2luZyBvcHRpb25zLCBlLmcuIGFjcXVpcmluZyBjb21tZXJjaWFsIHVzYWdlIHJpZ2h0cyBmb3IgYW4gaW1hZ2UgdGhhdCBpcyBhbHNvIGF2YWlsYWJsZSB1bmRlciBub24tY29tbWVyY2lhbCBjcmVhdGl2ZSBjb21tb25zIGxpY2Vuc2VzLmphY2Nlc3NNb2RlomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkBIVRoZSBodW1hbiBzZW5zb3J5IHBlcmNlcHR1YWwgc3lzdGVtIG9yIGNvZ25pdGl2ZSBmYWN1bHR5IHRocm91Z2ggd2hpY2ggYSBwZXJzb24gbWF5IHByb2Nlc3Mgb3IgcGVyY2VpdmUgaW5mb3JtYXRpb24uIEV4cGVjdGVkIHZhbHVlcyBpbmNsdWRlOiBhdWRpdG9yeSwgdGFjdGlsZSwgdGV4dHVhbCwgdmlzdWFsLCBjb2xvckRlcGVuZGVudCwgY2hhcnRPblZpc3VhbCwgY2hlbU9uVmlzdWFsLCBkaWFncmFtT25WaXN1YWwsIG1hdGhPblZpc3VhbCwgbXVzaWNPblZpc3VhbCwgdGV4dE9uVmlzdWFsLgogICAgICBqYXJjaGl2ZWRBdKJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZuc2NoZW1hOldlYlBhZ2WiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZm5zY2hlbWE6V2ViUGFnZWtkZXNjcmlwdGlvbnkBTEluZGljYXRlcyBhIHBhZ2Ugb3Igb3RoZXIgbGluayBpbnZvbHZlZCBpbiBhcmNoaXZhbCBvZiBhIFtbQ3JlYXRpdmVXb3JrXV0uIEluIHRoZSBjYXNlIG9mIFtbTWVkaWFSZXZpZXddXSwgdGhlIGl0ZW1zIGluIGEgW1tNZWRpYVJldmlld0l0ZW1dXSBtYXkgb2Z0ZW4gYmVjb21lIGluYWNjZXNzaWJsZSwgYnV0IGJlIGFyY2hpdmVkIGJ5IGFyY2hpdmFsLCBqb3VybmFsaXN0aWMsIGFjdGl2aXN0LCBvciBsYXcgZW5mb3JjZW1lbnQgb3JnYW5pemF0aW9ucy4gSW4gc3VjaCBjYXNlcywgdGhlIHJlZmVyZW5jZWQgcGFnZSBtYXkgbm90IGRpcmVjdGx5IHB1Ymxpc2ggdGhlIGNvbnRlbnQuamNvcnJlY3Rpb26iZW9uZU9mgqFlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZngYc2NoZW1hOkNvcnJlY3Rpb25Db21tZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmeBhzY2hlbWE6Q29ycmVjdGlvbkNvbW1lbnRrZGVzY3JpcHRpb254c0luZGljYXRlcyBhIGNvcnJlY3Rpb24gdG8gYSBbW0NyZWF0aXZlV29ya11dLCBlaXRoZXIgdmlhIGEgW1tDb3JyZWN0aW9uQ29tbWVudF1dLCB0ZXh0dWFsbHkgb3IgaW4gYW5vdGhlciBkb2N1bWVudC5qY3JlZGl0VGV4dKJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254a1RleHQgdGhhdCBjYW4gYmUgdXNlZCB0byBjcmVkaXQgcGVyc29uKHMpIGFuZC9vciBvcmdhbml6YXRpb24ocykgYXNzb2NpYXRlZCB3aXRoIGEgcHVibGlzaGVkIENyZWF0aXZlIFdvcmsuamZpbGVGb3JtYXSiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255AeVNZWRpYSB0eXBlLCB0eXBpY2FsbHkgTUlNRSBmb3JtYXQgKHNlZSBbSUFOQSBzaXRlXShodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL21lZGlhLXR5cGVzL21lZGlhLXR5cGVzLnhodG1sKSkgb2YgdGhlIGNvbnRlbnQgZS5nLiBhcHBsaWNhdGlvbi96aXAgb2YgYSBTb2Z0d2FyZUFwcGxpY2F0aW9uIGJpbmFyeS4gSW4gY2FzZXMgd2hlcmUgYSBDcmVhdGl2ZVdvcmsgaGFzIHNldmVyYWwgbWVkaWEgdHlwZSByZXByZXNlbnRhdGlvbnMsICdlbmNvZGluZycgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgZWFjaCBNZWRpYU9iamVjdCBhbG9uZ3NpZGUgcGFydGljdWxhciBmaWxlRm9ybWF0IGluZm9ybWF0aW9uLiBVbnJlZ2lzdGVyZWQgb3IgbmljaGUgZmlsZSBmb3JtYXRzIGNhbiBiZSBpbmRpY2F0ZWQgaW5zdGVhZCB2aWEgdGhlIG1vc3QgYXBwcm9wcmlhdGUgVVJMLCBlLmcuIGRlZmluaW5nIFdlYiBwYWdlIG9yIGEgV2lraXBlZGlhIGVudHJ5Lmppbkxhbmd1YWdlomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmb3NjaGVtYTpMYW5ndWFnZWtkZXNjcmlwdGlvbnjIVGhlIGxhbmd1YWdlIG9mIHRoZSBjb250ZW50IG9yIHBlcmZvcm1hbmNlIG9yIHVzZWQgaW4gYW4gYWN0aW9uLiBQbGVhc2UgdXNlIG9uZSBvZiB0aGUgbGFuZ3VhZ2UgY29kZXMgZnJvbSB0aGUgW0lFVEYgQkNQIDQ3IHN0YW5kYXJkXShodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9iY3A0NykuIFNlZSBhbHNvIFtbYXZhaWxhYmxlTGFuZ3VhZ2VdXS5qbWFpbkVudGl0eaJlb25lT2aCoWQkcmVmbHNjaGVtYTpUaGluZ6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZmxzY2hlbWE6VGhpbmdrZGVzY3JpcHRpb254SkluZGljYXRlcyB0aGUgcHJpbWFyeSBlbnRpdHkgZGVzY3JpYmVkIGluIHNvbWUgcGFnZSBvciBvdGhlciBDcmVhdGl2ZVdvcmsuam1haW50YWluZXKiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnkDXEEgbWFpbnRhaW5lciBvZiBhIFtbRGF0YXNldF1dLCBzb2Z0d2FyZSBwYWNrYWdlIChbW1NvZnR3YXJlQXBwbGljYXRpb25dXSksIG9yIG90aGVyIFtbUHJvamVjdF1dLiBBIG1haW50YWluZXIgaXMgYSBbW1BlcnNvbl1dIG9yIFtbT3JnYW5pemF0aW9uXV0gdGhhdCBtYW5hZ2VzIGNvbnRyaWJ1dGlvbnMgdG8sIGFuZC9vciBwdWJsaWNhdGlvbiBvZiwgc29tZSAodHlwaWNhbGx5IGNvbXBsZXgpIGFydGlmYWN0LiBJdCBpcyBjb21tb24gZm9yIGRpc3RyaWJ1dGlvbnMgb2Ygc29mdHdhcmUgYW5kIGRhdGEgdG8gYmUgYmFzZWQgb24gInVwc3RyZWFtIiBzb3VyY2VzLiBXaGVuIFtbbWFpbnRhaW5lcl1dIGlzIGFwcGxpZWQgdG8gYSBzcGVjaWZpYyB2ZXJzaW9uIG9mIHNvbWV0aGluZyBlLmcuIGEgcGFydGljdWxhciB2ZXJzaW9uIG9yIHBhY2thZ2luZyBvZiBhIFtbRGF0YXNldF1dLCBpdCBpcyBhbHdheXMgIHBvc3NpYmxlIHRoYXQgdGhlIHVwc3RyZWFtIHNvdXJjZSBoYXMgYSBkaWZmZXJlbnQgbWFpbnRhaW5lci4gVGhlIFtbaXNCYXNlZE9uXV0gcHJvcGVydHkgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgc3VjaCByZWxhdGlvbnNoaXBzIGJldHdlZW4gZGF0YXNldHMgdG8gbWFrZSB0aGUgZGlmZmVyZW50IG1haW50ZW5hbmNlIHJvbGVzIGNsZWFyLiBTaW1pbGFybHkgaW4gdGhlIGNhc2Ugb2Ygc29mdHdhcmUsIGEgcGFja2FnZSBtYXkgaGF2ZSBkZWRpY2F0ZWQgbWFpbnRhaW5lcnMgd29ya2luZyBvbiBpbnRlZ3JhdGlvbiBpbnRvIHNvZnR3YXJlIGRpc3RyaWJ1dGlvbnMgc3VjaCBhcyBVYnVudHUsIGFzIHdlbGwgYXMgdXBzdHJlYW0gbWFpbnRhaW5lcnMgb2YgdGhlIHVuZGVybHlpbmcgd29yay4KICAgICAganJlY29yZGVkQXSiZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueGVUaGUgRXZlbnQgd2hlcmUgdGhlIENyZWF0aXZlV29yayB3YXMgcmVjb3JkZWQuIFRoZSBDcmVhdGl2ZVdvcmsgbWF5IGNhcHR1cmUgYWxsIG9yIHBhcnQgb2YgdGhlIGV2ZW50Lmp0cmFuc2xhdG9yomVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb26iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254s09yZ2FuaXphdGlvbiBvciBwZXJzb24gd2hvIGFkYXB0cyBhIGNyZWF0aXZlIHdvcmsgdG8gZGlmZmVyZW50IGxhbmd1YWdlcywgcmVnaW9uYWwgZGlmZmVyZW5jZXMgYW5kIHRlY2huaWNhbCByZXF1aXJlbWVudHMgb2YgYSB0YXJnZXQgbWFya2V0LCBvciB0aGF0IHRyYW5zbGF0ZXMgZHVyaW5nIHNvbWUgZXZlbnQua2NvbnRyaWJ1dG9yomVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb26iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254NUEgc2Vjb25kYXJ5IGNvbnRyaWJ1dG9yIHRvIHRoZSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQua2RhdGVDcmVhdGVkomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGRkYXRlomR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1la2Rlc2NyaXB0aW9ueFNUaGUgZGF0ZSBvbiB3aGljaCB0aGUgQ3JlYXRpdmVXb3JrIHdhcyBjcmVhdGVkIG9yIHRoZSBpdGVtIHdhcyBhZGRlZCB0byBhIERhdGFGZWVkLmtwdWJsaWNhdGlvbqJlb25lT2aCoWQkcmVmd3NjaGVtYTpQdWJsaWNhdGlvbkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmd3NjaGVtYTpQdWJsaWNhdGlvbkV2ZW50a2Rlc2NyaXB0aW9ueC1BIHB1YmxpY2F0aW9uIGV2ZW50IGFzc29jaWF0ZWQgd2l0aCB0aGUgaXRlbS5rc2RQdWJsaXNoZXKiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnkBtEluZGljYXRlcyB0aGUgcGFydHkgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgYW5kIHB1Ymxpc2hpbmcgdGhlIGN1cnJlbnQgc3RydWN0dXJlZCBkYXRhIG1hcmt1cCwgdHlwaWNhbGx5IGluIGNhc2VzIHdoZXJlIHRoZSBzdHJ1Y3R1cmVkIGRhdGEgaXMgZGVyaXZlZCBhdXRvbWF0aWNhbGx5IGZyb20gZXhpc3RpbmcgcHVibGlzaGVkIGNvbnRlbnQgYnV0IHB1Ymxpc2hlZCBvbiBhIGRpZmZlcmVudCBzaXRlLiBGb3IgZXhhbXBsZSwgc3R1ZGVudCBwcm9qZWN0cyBhbmQgb3BlbiBkYXRhIGluaXRpYXRpdmVzIG9mdGVuIHJlLXB1Ymxpc2ggZXhpc3RpbmcgY29udGVudCB3aXRoIG1vcmUgZXhwbGljaXRseSBzdHJ1Y3R1cmVkIG1ldGFkYXRhLiBUaGUKW1tzZFB1Ymxpc2hlcl1dIHByb3BlcnR5IGhlbHBzIG1ha2Ugc3VjaCBwcmFjdGljZXMgbW9yZSBleHBsaWNpdC5rd29ya0V4YW1wbGWiZW9uZU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254gUV4YW1wbGUvaW5zdGFuY2UvcmVhbGl6YXRpb24vZGVyaXZhdGlvbiBvZiB0aGUgY29uY2VwdCBvZiB0aGlzIGNyZWF0aXZlIHdvcmsuIGVnLiBUaGUgcGFwZXJiYWNrIGVkaXRpb24sIGZpcnN0IGVkaXRpb24sIG9yIGVCb29rLmxjb21tZW50Q291bnSiZHR5cGVnaW50ZWdlcmtkZXNjcmlwdGlvbnjSVGhlIG51bWJlciBvZiBjb21tZW50cyB0aGlzIENyZWF0aXZlV29yayAoZS5nLiBBcnRpY2xlLCBRdWVzdGlvbiBvciBBbnN3ZXIpIGhhcyByZWNlaXZlZC4gVGhpcyBpcyBtb3N0IGFwcGxpY2FibGUgdG8gd29ya3MgcHVibGlzaGVkIGluIFdlYiBzaXRlcyB3aXRoIGNvbW1lbnRpbmcgc3lzdGVtOyBhZGRpdGlvbmFsIGNvbW1lbnRzIG1heSBleGlzdCBlbHNld2hlcmUubGRhdGVNb2RpZmllZKJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZaJkdHlwZWZzdHJpbmdmZm9ybWF0aWRhdGUtdGltZWtkZXNjcmlwdGlvbnh2VGhlIGRhdGUgb24gd2hpY2ggdGhlIENyZWF0aXZlV29yayB3YXMgbW9zdCByZWNlbnRseSBtb2RpZmllZCBvciB3aGVuIHRoZSBpdGVtJ3MgZW50cnkgd2FzIG1vZGlmaWVkIHdpdGhpbiBhIERhdGFGZWVkLmxpc0Jhc2VkT25VcmyiZW9uZU9mgqFlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZuc2NoZW1hOlByb2R1Y3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbnNjaGVtYTpQcm9kdWN0a2Rlc2NyaXB0aW9ueKtBIHJlc291cmNlIHRoYXQgd2FzIHVzZWQgaW4gdGhlIGNyZWF0aW9uIG9mIHRoaXMgcmVzb3VyY2UuIFRoaXMgdGVybSBjYW4gYmUgcmVwZWF0ZWQgZm9yIG11bHRpcGxlIHNvdXJjZXMuIEZvciBleGFtcGxlLCBodHRwOi8vZXhhbXBsZS5jb20vZ3JlYXQtbXVsdGlwbGljYXRpb24taW50cm8uaHRtbC5sdGh1bWJuYWlsVXJsomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254KEEgdGh1bWJuYWlsIGltYWdlIHJlbGV2YW50IHRvIHRoZSBUaGluZy5sdGltZVJlcXVpcmVko2R0eXBlZnN0cmluZ2gkY29tbWVudHgbaHR0cHM6Ly9zY2hlbWEub3JnL0R1cmF0aW9ua2Rlc2NyaXB0aW9ueJZBcHByb3hpbWF0ZSBvciB0eXBpY2FsIHRpbWUgaXQgdGFrZXMgdG8gd29yayB3aXRoIG9yIHRocm91Z2ggdGhpcyBsZWFybmluZyByZXNvdXJjZSBmb3IgdGhlIHR5cGljYWwgaW50ZW5kZWQgdGFyZ2V0IGF1ZGllbmNlLCBlLmcuICdQVDMwTScsICdQVDFIMjVNJy5tY29udGVudFJhdGluZ6Jlb25lT2aCoWVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmbXNjaGVtYTpSYXRpbmeiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZtc2NoZW1hOlJhdGluZ2tkZXNjcmlwdGlvbnhBT2ZmaWNpYWwgcmF0aW5nIG9mIGEgcGllY2Ugb2YgY29udGVudOKAlGZvciBleGFtcGxlLCdNUEFBIFBHLTEzJy5tY29weXJpZ2h0WWVhcqJkdHlwZWZudW1iZXJrZGVzY3JpcHRpb254VFRoZSB5ZWFyIGR1cmluZyB3aGljaCB0aGUgY2xhaW1lZCBjb3B5cmlnaHQgZm9yIHRoZSBDcmVhdGl2ZVdvcmsgd2FzIGZpcnN0IGFzc2VydGVkLm1kYXRlUHVibGlzaGVkomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGRkYXRlomR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1la2Rlc2NyaXB0aW9ueCREYXRlIG9mIGZpcnN0IGJyb2FkY2FzdC9wdWJsaWNhdGlvbi5tZGlzY3Vzc2lvblVybKJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueD9BIGxpbmsgdG8gdGhlIHBhZ2UgY29udGFpbmluZyB0aGUgY29tbWVudHMgb2YgdGhlIENyZWF0aXZlV29yay5tZXhhbXBsZU9mV29ya6Jlb25lT2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnhQQSBjcmVhdGl2ZSB3b3JrIHRoYXQgdGhpcyB3b3JrIGlzIGFuIGV4YW1wbGUvaW5zdGFuY2UvcmVhbGl6YXRpb24vZGVyaXZhdGlvbiBvZi5tcmVsZWFzZWRFdmVudKJkJHJlZndzY2hlbWE6UHVibGljYXRpb25FdmVudGtkZXNjcmlwdGlvbnhLVGhlIHBsYWNlIGFuZCB0aW1lIHRoZSByZWxlYXNlIHdhcyBpc3N1ZWQsIGV4cHJlc3NlZCBhcyBhIFB1YmxpY2F0aW9uRXZlbnQubXNjaGVtYVZlcnNpb26iZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkCB0luZGljYXRlcyAoYnkgVVJMIG9yIHN0cmluZykgYSBwYXJ0aWN1bGFyIHZlcnNpb24gb2YgYSBzY2hlbWEgdXNlZCBpbiBzb21lIENyZWF0aXZlV29yay4gVGhpcyBwcm9wZXJ0eSB3YXMgY3JlYXRlZCBwcmltYXJpbHkgdG8KICAgIGluZGljYXRlIHRoZSB1c2Ugb2YgYSBzcGVjaWZpYyBzY2hlbWEub3JnIHJlbGVhc2UsIGUuZy4gYGBgMTAuMGBgYCBhcyBhIHNpbXBsZSBzdHJpbmcsIG9yIG1vcmUgZXhwbGljaXRseSB2aWEgVVJMLCBgYGBodHRwczovL3NjaGVtYS5vcmcvZG9jcy9yZWxlYXNlcy5odG1sI3YxMC4wYGBgLiBUaGVyZSBtYXkgYmUgc2l0dWF0aW9ucyBpbiB3aGljaCBvdGhlciBzY2hlbWFzIG1pZ2h0IHVzZWZ1bGx5IGJlIHJlZmVyZW5jZWQgdGhpcyB3YXksIGUuZy4gYGBgaHR0cDovL2R1YmxpbmNvcmUub3JnL3NwZWNpZmljYXRpb25zL2R1Ymxpbi1jb3JlL2RjZXMvMTk5OS0wNy0wMi9gYGAgYnV0IHRoaXMgaGFzIG5vdCBiZWVuIGNhcmVmdWxseSBleHBsb3JlZCBpbiB0aGUgY29tbXVuaXR5Lm5lZHVjYXRpb25hbFVzZaJlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm1rZGVzY3JpcHRpb254W1RoZSBwdXJwb3NlIG9mIGEgd29yayBpbiB0aGUgY29udGV4dCBvZiBlZHVjYXRpb247IGZvciBleGFtcGxlLCAnYXNzaWdubWVudCcsICdncm91cCB3b3JrJy5uZW5jb2RpbmdGb3JtYXSiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255Ao5NZWRpYSB0eXBlIHR5cGljYWxseSBleHByZXNzZWQgdXNpbmcgYSBNSU1FIGZvcm1hdCAoc2VlIFtJQU5BIHNpdGVdKGh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvbWVkaWEtdHlwZXMvbWVkaWEtdHlwZXMueGh0bWwpIGFuZCBbTUROIHJlZmVyZW5jZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9CYXNpY3Nfb2ZfSFRUUC9NSU1FX3R5cGVzKSkgZS5nLiBhcHBsaWNhdGlvbi96aXAgZm9yIGEgU29mdHdhcmVBcHBsaWNhdGlvbiBiaW5hcnksIGF1ZGlvL21wZWcgZm9yIC5tcDMgZXRjLikuCgpJbiBjYXNlcyB3aGVyZSBhIFtbQ3JlYXRpdmVXb3JrXV0gaGFzIHNldmVyYWwgbWVkaWEgdHlwZSByZXByZXNlbnRhdGlvbnMsIFtbZW5jb2RpbmddXSBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBlYWNoIFtbTWVkaWFPYmplY3RdXSBhbG9uZ3NpZGUgcGFydGljdWxhciBbW2VuY29kaW5nRm9ybWF0XV0gaW5mb3JtYXRpb24uCgpVbnJlZ2lzdGVyZWQgb3IgbmljaGUgZW5jb2RpbmcgYW5kIGZpbGUgZm9ybWF0cyBjYW4gYmUgaW5kaWNhdGVkIGluc3RlYWQgdmlhIHRoZSBtb3N0IGFwcHJvcHJpYXRlIFVSTCwgZS5nLiBkZWZpbmluZyBXZWIgcGFnZSBvciBhIFdpa2lwZWRpYS9XaWtpZGF0YSBlbnRyeS5vW29iamVjdCBPYmplY3RdomVvbmVPZoKhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZ4GHNjaGVtYTpRdWFudGl0YXRpdmVWYWx1ZaJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZngYc2NoZW1hOlF1YW50aXRhdGl2ZVZhbHVla2Rlc2NyaXB0aW9uYG9hZ2dyZWdhdGVSYXRpbmeiZCRyZWZ2c2NoZW1hOkFnZ3JlZ2F0ZVJhdGluZ2tkZXNjcmlwdGlvbnhNVGhlIG92ZXJhbGwgcmF0aW5nLCBiYXNlZCBvbiBhIGNvbGxlY3Rpb24gb2YgcmV2aWV3cyBvciByYXRpbmdzLCBvZiB0aGUgaXRlbS5vYXNzb2NpYXRlZE1lZGlhomQkcmVmcnNjaGVtYTpNZWRpYU9iamVjdGtkZXNjcmlwdGlvbnhXQSBtZWRpYSBvYmplY3QgdGhhdCBlbmNvZGVzIHRoaXMgQ3JlYXRpdmVXb3JrLiBUaGlzIHByb3BlcnR5IGlzIGEgc3lub255bSBmb3IgZW5jb2Rpbmcub2NvbnRlbnRMb2NhdGlvbqJkJHJlZmxzY2hlbWE6UGxhY2VrZGVzY3JpcHRpb254aVRoZSBsb2NhdGlvbiBkZXBpY3RlZCBvciBkZXNjcmliZWQgaW4gdGhlIGNvbnRlbnQuIEZvciBleGFtcGxlLCB0aGUgbG9jYXRpb24gaW4gYSBwaG90b2dyYXBoIG9yIHBhaW50aW5nLm9jb3B5cmlnaHRIb2xkZXKiZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254OlRoZSBwYXJ0eSBob2xkaW5nIHRoZSBsZWdhbCBjb3B5cmlnaHQgdG8gdGhlIENyZWF0aXZlV29yay5vY29weXJpZ2h0Tm90aWNlomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbniUVGV4dCBvZiBhIG5vdGljZSBhcHByb3ByaWF0ZSBmb3IgZGVzY3JpYmluZyB0aGUgY29weXJpZ2h0IGFzcGVjdHMgb2YgdGhpcyBDcmVhdGl2ZSBXb3JrLCBpZGVhbGx5IGluZGljYXRpbmcgdGhlIG93bmVyIG9mIHRoZSBjb3B5cmlnaHQgZm9yIHRoZSBXb3JrLm9jb3VudHJ5T2ZPcmlnaW6iZCRyZWZuc2NoZW1hOkNvdW50cnlrZGVzY3JpcHRpb255AmFUaGUgY291bnRyeSBvZiBvcmlnaW4gb2Ygc29tZXRoaW5nLCBpbmNsdWRpbmcgcHJvZHVjdHMgYXMgd2VsbCBhcyBjcmVhdGl2ZSAgd29ya3Mgc3VjaCBhcyBtb3ZpZSBhbmQgVFYgY29udGVudC4KCkluIHRoZSBjYXNlIG9mIFRWIGFuZCBtb3ZpZSwgdGhpcyB3b3VsZCBiZSB0aGUgY291bnRyeSBvZiB0aGUgcHJpbmNpcGxlIG9mZmljZXMgb2YgdGhlIHByb2R1Y3Rpb24gY29tcGFueSBvciBpbmRpdmlkdWFsIHJlc3BvbnNpYmxlIGZvciB0aGUgbW92aWUuIEZvciBvdGhlciBraW5kcyBvZiBbW0NyZWF0aXZlV29ya11dIGl0IGlzIGRpZmZpY3VsdCB0byBwcm92aWRlIGZ1bGx5IGdlbmVyYWwgZ3VpZGFuY2UsIGFuZCBwcm9wZXJ0aWVzIHN1Y2ggYXMgW1tjb250ZW50TG9jYXRpb25dXSBhbmQgW1tsb2NhdGlvbkNyZWF0ZWRdXSBtYXkgYmUgbW9yZSBhcHBsaWNhYmxlLgoKSW4gdGhlIGNhc2Ugb2YgcHJvZHVjdHMsIHRoZSBjb3VudHJ5IG9mIG9yaWdpbiBvZiB0aGUgcHJvZHVjdC4gVGhlIGV4YWN0IGludGVycHJldGF0aW9uIG9mIHRoaXMgbWF5IHZhcnkgYnkgY29udGV4dCBhbmQgcHJvZHVjdCB0eXBlLCBhbmQgY2Fubm90IGJlIGZ1bGx5IGVudW1lcmF0ZWQgaGVyZS5vbG9jYXRpb25DcmVhdGVkomQkcmVmbHNjaGVtYTpQbGFjZWtkZXNjcmlwdGlvbnh4VGhlIGxvY2F0aW9uIHdoZXJlIHRoZSBDcmVhdGl2ZVdvcmsgd2FzIGNyZWF0ZWQsIHdoaWNoIG1heSBub3QgYmUgdGhlIHNhbWUgYXMgdGhlIGxvY2F0aW9uIGRlcGljdGVkIGluIHRoZSBDcmVhdGl2ZVdvcmsub3NkRGF0ZVB1Ymxpc2hlZKJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGVrZGVzY3JpcHRpb254e0luZGljYXRlcyB0aGUgZGF0ZSBvbiB3aGljaCB0aGUgY3VycmVudCBzdHJ1Y3R1cmVkIGRhdGEgd2FzIGdlbmVyYXRlZCAvIHB1Ymxpc2hlZC4gVHlwaWNhbGx5IHVzZWQgYWxvbmdzaWRlIFtbc2RQdWJsaXNoZXJdXW9zcGF0aWFsQ292ZXJhZ2WiZCRyZWZsc2NoZW1hOlBsYWNla2Rlc2NyaXB0aW9ueQGBVGhlIHNwYXRpYWxDb3ZlcmFnZSBvZiBhIENyZWF0aXZlV29yayBpbmRpY2F0ZXMgdGhlIHBsYWNlKHMpIHdoaWNoIGFyZSB0aGUgZm9jdXMgb2YgdGhlIGNvbnRlbnQuIEl0IGlzIGEgc3VicHJvcGVydHkgb2YKICAgICAgY29udGVudExvY2F0aW9uIGludGVuZGVkIHByaW1hcmlseSBmb3IgbW9yZSB0ZWNobmljYWwgYW5kIGRldGFpbGVkIG1hdGVyaWFscy4gRm9yIGV4YW1wbGUgd2l0aCBhIERhdGFzZXQsIGl0IGluZGljYXRlcwogICAgICBhcmVhcyB0aGF0IHRoZSBkYXRhc2V0IGRlc2NyaWJlczogYSBkYXRhc2V0IG9mIE5ldyBZb3JrIHdlYXRoZXIgd291bGQgaGF2ZSBzcGF0aWFsQ292ZXJhZ2Ugd2hpY2ggd2FzIHRoZSBwbGFjZTogdGhlIHN0YXRlIG9mIE5ldyBZb3JrLm90eXBpY2FsQWdlUmFuZ2WiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueDJUaGUgdHlwaWNhbCBleHBlY3RlZCBhZ2UgcmFuZ2UsIGUuZy4gJzctOScsICcxMS0nLm93b3JrVHJhbnNsYXRpb26iZW9uZU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb2547EEgd29yayB0aGF0IGlzIGEgdHJhbnNsYXRpb24gb2YgdGhlIGNvbnRlbnQgb2YgdGhpcyB3b3JrLiBlLmcuIOilv+mBiuiomCBoYXMgYW4gRW5nbGlzaCB3b3JrVHJhbnNsYXRpb24g4oCcSm91cm5leSB0byB0aGUgV2VzdOKAnSxhIEdlcm1hbiB3b3JrVHJhbnNsYXRpb24g4oCcTW9ua2V5cyBQaWxnZXJmYWhydOKAnSBhbmQgYSBWaWV0bmFtZXNlICB0cmFuc2xhdGlvbiBUw6J5IGR1IGvDvSBiw6xuaCBraOG6o28ucGFjY2Vzc2liaWxpdHlBUEmiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueKtJbmRpY2F0ZXMgdGhhdCB0aGUgcmVzb3VyY2UgaXMgY29tcGF0aWJsZSB3aXRoIHRoZSByZWZlcmVuY2VkIGFjY2Vzc2liaWxpdHkgQVBJIChbV2ViU2NoZW1hcyB3aWtpIGxpc3RzIHBvc3NpYmxlIHZhbHVlc10oaHR0cDovL3d3dy53My5vcmcvd2lraS9XZWJTY2hlbWFzL0FjY2Vzc2liaWxpdHkpKS5wZWR1Y2F0aW9uYWxMZXZlbKJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm1rZGVzY3JpcHRpb254w1RoZSBsZXZlbCBpbiB0ZXJtcyBvZiBwcm9ncmVzc2lvbiB0aHJvdWdoIGFuIGVkdWNhdGlvbmFsIG9yIHRyYWluaW5nIGNvbnRleHQuIEV4YW1wbGVzIG9mIGVkdWNhdGlvbmFsIGxldmVscyBpbmNsdWRlICdiZWdpbm5lcicsICdpbnRlcm1lZGlhdGUnIG9yICdhZHZhbmNlZCcsIGFuZCBmb3JtYWwgc2V0cyBvZiBsZXZlbCBpbmRpY2F0b3JzLnBpc0ZhbWlseUZyaWVuZGx5omR0eXBlZ2Jvb2xlYW5rZGVzY3JpcHRpb254MkluZGljYXRlcyB3aGV0aGVyIHRoaXMgY29udGVudCBpcyBmYW1pbHkgZnJpZW5kbHkucHB1Ymxpc2hlckltcHJpbnSiZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbmtkZXNjcmlwdGlvbngyVGhlIHB1Ymxpc2hpbmcgZGl2aXNpb24gd2hpY2ggcHVibGlzaGVkIHRoZSBjb21pYy5wdGVtcG9yYWxDb3ZlcmFnZaJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1lomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkEK1RoZSB0ZW1wb3JhbENvdmVyYWdlIG9mIGEgQ3JlYXRpdmVXb3JrIGluZGljYXRlcyB0aGUgcGVyaW9kIHRoYXQgdGhlIGNvbnRlbnQgYXBwbGllcyB0bywgaS5lLiB0aGF0IGl0IGRlc2NyaWJlcywgZWl0aGVyIGFzIGEgRGF0ZVRpbWUgb3IgYXMgYSB0ZXh0dWFsIHN0cmluZyBpbmRpY2F0aW5nIGEgdGltZSBwZXJpb2QgaW4gW0lTTyA4NjAxIHRpbWUgaW50ZXJ2YWwgZm9ybWF0XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lX2ludGVydmFscykuIEluCiAgICAgIHRoZSBjYXNlIG9mIGEgRGF0YXNldCBpdCB3aWxsIHR5cGljYWxseSBpbmRpY2F0ZSB0aGUgcmVsZXZhbnQgdGltZSBwZXJpb2QgaW4gYSBwcmVjaXNlIG5vdGF0aW9uIChlLmcuIGZvciBhIDIwMTEgY2Vuc3VzIGRhdGFzZXQsIHRoZSB5ZWFyIDIwMTEgd291bGQgYmUgd3JpdHRlbiAiMjAxMS8yMDEyIikuIE90aGVyIGZvcm1zIG9mIGNvbnRlbnQgZS5nLiBTY2hvbGFybHlBcnRpY2xlLCBCb29rLCBUVlNlcmllcyBvciBUVkVwaXNvZGUgbWF5IGluZGljYXRlIHRoZWlyIHRlbXBvcmFsQ292ZXJhZ2UgaW4gYnJvYWRlciB0ZXJtcyAtIHRleHR1YWxseSBvciB2aWEgd2VsbC1rbm93biBVUkwuCiAgICAgIFdyaXR0ZW4gd29ya3Mgc3VjaCBhcyBib29rcyBtYXkgc29tZXRpbWVzIGhhdmUgcHJlY2lzZSB0ZW1wb3JhbCBjb3ZlcmFnZSB0b28sIGUuZy4gYSB3b3JrIHNldCBpbiAxOTM5IC0gMTk0NSBjYW4gYmUgaW5kaWNhdGVkIGluIElTTyA4NjAxIGludGVydmFsIGZvcm1hdCBmb3JtYXQgdmlhICIxOTM5LzE5NDUiLgoKT3Blbi1lbmRlZCBkYXRlIHJhbmdlcyBjYW4gYmUgd3JpdHRlbiB3aXRoICIuLiIgaW4gcGxhY2Ugb2YgdGhlIGVuZCBkYXRlLiBGb3IgZXhhbXBsZSwgIjIwMTUtMTEvLi4iIGluZGljYXRlcyBhIHJhbmdlIGJlZ2lubmluZyBpbiBOb3ZlbWJlciAyMDE1IGFuZCB3aXRoIG5vIHNwZWNpZmllZCBmaW5hbCBkYXRlLiBUaGlzIGlzIHRlbnRhdGl2ZSBhbmQgbWlnaHQgYmUgdXBkYXRlZCBpbiBmdXR1cmUgd2hlbiBJU08gODYwMSBpcyBvZmZpY2lhbGx5IHVwZGF0ZWQucWFjY291bnRhYmxlUGVyc29uomQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254RlNwZWNpZmllcyB0aGUgUGVyc29uIHRoYXQgaXMgbGVnYWxseSBhY2NvdW50YWJsZSBmb3IgdGhlIENyZWF0aXZlV29yay5xaW50ZXJhY3Rpdml0eVR5cGWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueH5UaGUgcHJlZG9taW5hbnQgbW9kZSBvZiBsZWFybmluZyBzdXBwb3J0ZWQgYnkgdGhlIGxlYXJuaW5nIHJlc291cmNlLiBBY2NlcHRhYmxlIHZhbHVlcyBhcmUgJ2FjdGl2ZScsICdleHBvc2l0aXZlJywgb3IgJ21peGVkJy5xdHJhbnNsYXRpb25PZldvcmuiZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnh1VGhlIHdvcmsgdGhhdCB0aGlzIHdvcmsgaGFzIGJlZW4gdHJhbnNsYXRlZCBmcm9tLiBlLmcuIOeJqeenjei1t+a6kCBpcyBhIHRyYW5zbGF0aW9uT2Yg4oCcT24gdGhlIE9yaWdpbiBvZiBTcGVjaWVz4oCdcmFjcXVpcmVMaWNlbnNlUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254Z0luZGljYXRlcyBhIHBhZ2UgZG9jdW1lbnRpbmcgaG93IGxpY2Vuc2VzIGNhbiBiZSBwdXJjaGFzZWQgb3Igb3RoZXJ3aXNlIGFjcXVpcmVkLCBmb3IgdGhlIGN1cnJlbnQgaXRlbS5yY29uZGl0aW9uc09mQWNjZXNzomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkBokNvbmRpdGlvbnMgdGhhdCBhZmZlY3QgdGhlIGF2YWlsYWJpbGl0eSBvZiwgb3IgbWV0aG9kKHMpIG9mIGFjY2VzcyB0bywgYW4gaXRlbS4gVHlwaWNhbGx5IHVzZWQgZm9yIHJlYWwgd29ybGQgaXRlbXMgc3VjaCBhcyBhbiBbW0FyY2hpdmVDb21wb25lbnRdXSBoZWxkIGJ5IGFuIFtbQXJjaGl2ZU9yZ2FuaXphdGlvbl1dLiBUaGlzIHByb3BlcnR5IGlzIG5vdCBzdWl0YWJsZSBmb3IgdXNlIGFzIGEgZ2VuZXJhbCBXZWIgYWNjZXNzIGNvbnRyb2wgbWVjaGFuaXNtLiBJdCBpcyBleHByZXNzZWQgb25seSBpbiBuYXR1cmFsIGxhbmd1YWdlLlxuXG5Gb3IgZXhhbXBsZSAiQXZhaWxhYmxlIGJ5IGFwcG9pbnRtZW50IGZyb20gdGhlIFJlYWRpbmcgUm9vbSIgb3IgIkFjY2Vzc2libGUgb25seSBmcm9tIGxvZ2dlZC1pbiBhY2NvdW50cyAiLiByY3JlYXRpdmVXb3JrU3RhdHVzomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybWtkZXNjcmlwdGlvbnjZVGhlIHN0YXR1cyBvZiBhIGNyZWF0aXZlIHdvcmsgaW4gdGVybXMgb2YgaXRzIHN0YWdlIGluIGEgbGlmZWN5Y2xlLiBFeGFtcGxlIHRlcm1zIGluY2x1ZGUgSW5jb21wbGV0ZSwgRHJhZnQsIFB1Ymxpc2hlZCwgT2Jzb2xldGUuIFNvbWUgb3JnYW5pemF0aW9ucyBkZWZpbmUgYSBzZXQgb2YgdGVybXMgZm9yIHRoZSBzdGFnZXMgb2YgdGhlaXIgcHVibGljYXRpb24gbGlmZWN5Y2xlLnJpbnRlcnByZXRlZEFzQ2xhaW2iZW9uZU9mgqFkJHJlZmxzY2hlbWE6Q2xhaW2iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZsc2NoZW1hOkNsYWlta2Rlc2NyaXB0aW9ueNBVc2VkIHRvIGluZGljYXRlIGEgc3BlY2lmaWMgY2xhaW0gY29udGFpbmVkLCBpbXBsaWVkLCB0cmFuc2xhdGVkIG9yIHJlZmluZWQgZnJvbSB0aGUgY29udGVudCBvZiBhIFtbTWVkaWFPYmplY3RdXSBvciBvdGhlciBbW0NyZWF0aXZlV29ya11dLiBUaGUgaW50ZXJwcmV0aW5nIHBhcnR5IGNhbiBiZSBpbmRpY2F0ZWQgdXNpbmcgW1tjbGFpbUludGVycHJldGVyXV0ucnNvdXJjZU9yZ2FuaXphdGlvbqJkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9ua2Rlc2NyaXB0aW9ueDlUaGUgT3JnYW5pemF0aW9uIG9uIHdob3NlIGJlaGFsZiB0aGUgY3JlYXRvciB3YXMgd29ya2luZy5zYWNjZXNzaWJpbGl0eUhhemFyZKJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2542UEgY2hhcmFjdGVyaXN0aWMgb2YgdGhlIGRlc2NyaWJlZCByZXNvdXJjZSB0aGF0IGlzIHBoeXNpb2xvZ2ljYWxseSBkYW5nZXJvdXMgdG8gc29tZSB1c2Vycy4gUmVsYXRlZCB0byBXQ0FHIDIuMCBndWlkZWxpbmUgMi4zIChbV2ViU2NoZW1hcyB3aWtpIGxpc3RzIHBvc3NpYmxlIHZhbHVlc10oaHR0cDovL3d3dy53My5vcmcvd2lraS9XZWJTY2hlbWFzL0FjY2Vzc2liaWxpdHkpKS5zYWx0ZXJuYXRpdmVIZWFkbGluZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254JkEgc2Vjb25kYXJ5IHRpdGxlIG9mIHRoZSBDcmVhdGl2ZVdvcmsuc2lzQWNjZXNzaWJsZUZvckZyZWWiZHR5cGVnYm9vbGVhbmtkZXNjcmlwdGlvbnhHQSBmbGFnIHRvIHNpZ25hbCB0aGF0IHRoZSBpdGVtLCBldmVudCwgb3IgcGxhY2UgaXMgYWNjZXNzaWJsZSBmb3IgZnJlZS50YWNjZXNzTW9kZVN1ZmZpY2llbnSiZW9uZU9mgqFkJHJlZm9zY2hlbWE6SXRlbUxpc3SiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZvc2NoZW1hOkl0ZW1MaXN0a2Rlc2NyaXB0aW9ueLtBIGxpc3Qgb2Ygc2luZ2xlIG9yIGNvbWJpbmVkIGFjY2Vzc01vZGVzIHRoYXQgYXJlIHN1ZmZpY2llbnQgdG8gdW5kZXJzdGFuZCBhbGwgdGhlIGludGVsbGVjdHVhbCBjb250ZW50IG9mIGEgcmVzb3VyY2UuIEV4cGVjdGVkIHZhbHVlcyBpbmNsdWRlOiAgYXVkaXRvcnksIHRhY3RpbGUsIHRleHR1YWwsIHZpc3VhbC4KICAgICAgdGFjY2Vzc2liaWxpdHlDb250cm9somVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbniwSWRlbnRpZmllcyBpbnB1dCBtZXRob2RzIHRoYXQgYXJlIHN1ZmZpY2llbnQgdG8gZnVsbHkgY29udHJvbCB0aGUgZGVzY3JpYmVkIHJlc291cmNlIChbV2ViU2NoZW1hcyB3aWtpIGxpc3RzIHBvc3NpYmxlIHZhbHVlc10oaHR0cDovL3d3dy53My5vcmcvd2lraS9XZWJTY2hlbWFzL0FjY2Vzc2liaWxpdHkpKS50YWNjZXNzaWJpbGl0eUZlYXR1cmWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueNFDb250ZW50IGZlYXR1cmVzIG9mIHRoZSByZXNvdXJjZSwgc3VjaCBhcyBhY2Nlc3NpYmxlIG1lZGlhLCBhbHRlcm5hdGl2ZXMgYW5kIHN1cHBvcnRlZCBlbmhhbmNlbWVudHMgZm9yIGFjY2Vzc2liaWxpdHkgKFtXZWJTY2hlbWFzIHdpa2kgbGlzdHMgcG9zc2libGUgdmFsdWVzXShodHRwOi8vd3d3LnczLm9yZy93aWtpL1dlYlNjaGVtYXMvQWNjZXNzaWJpbGl0eSkpLnRhY2Nlc3NpYmlsaXR5U3VtbWFyeaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255AUNBIGh1bWFuLXJlYWRhYmxlIHN1bW1hcnkgb2Ygc3BlY2lmaWMgYWNjZXNzaWJpbGl0eSBmZWF0dXJlcyBvciBkZWZpY2llbmNpZXMsIGNvbnNpc3RlbnQgd2l0aCB0aGUgb3RoZXIgYWNjZXNzaWJpbGl0eSBtZXRhZGF0YSBidXQgZXhwcmVzc2luZyBzdWJ0bGV0aWVzIHN1Y2ggYXMgInNob3J0IGRlc2NyaXB0aW9ucyBhcmUgcHJlc2VudCBidXQgbG9uZyBkZXNjcmlwdGlvbnMgd2lsbCBiZSBuZWVkZWQgZm9yIG5vbi12aXN1YWwgdXNlcnMiIG9yICJzaG9ydCBkZXNjcmlwdGlvbnMgYXJlIHByZXNlbnQgYW5kIG5vIGxvbmcgZGVzY3JpcHRpb25zIGFyZSBuZWVkZWQuInRjb250ZW50UmVmZXJlbmNlVGltZaNkdHlwZWZzdHJpbmdmZm9ybWF0aWRhdGUtdGltZWtkZXNjcmlwdGlvbniRVGhlIHNwZWNpZmljIHRpbWUgZGVzY3JpYmVkIGJ5IGEgY3JlYXRpdmUgd29yaywgZm9yIHdvcmtzIChlLmcuIGFydGljbGVzLCB2aWRlbyBvYmplY3RzIGV0Yy4pIHRoYXQgZW1waGFzaXNlIGEgcGFydGljdWxhciBtb21lbnQgd2l0aGluIGFuIEV2ZW50LnRlZHVjYXRpb25hbEFsaWdubWVudKJlb25lT2aCoWQkcmVmdnNjaGVtYTpBbGlnbm1lbnRPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ2c2NoZW1hOkFsaWdubWVudE9iamVjdGtkZXNjcmlwdGlvbnj0QW4gYWxpZ25tZW50IHRvIGFuIGVzdGFibGlzaGVkIGVkdWNhdGlvbmFsIGZyYW1ld29yay4KClRoaXMgcHJvcGVydHkgc2hvdWxkIG5vdCBiZSB1c2VkIHdoZXJlIHRoZSBuYXR1cmUgb2YgdGhlIGFsaWdubWVudCBjYW4gYmUgZGVzY3JpYmVkIHVzaW5nIGEgc2ltcGxlIHByb3BlcnR5LCBmb3IgZXhhbXBsZSB0byBleHByZXNzIHRoYXQgYSByZXNvdXJjZSBbW3RlYWNoZXNdXSBvciBbW2Fzc2Vzc2VzXV0gYSBjb21wZXRlbmN5LnRpbnRlcmFjdGlvblN0YXRpc3RpY6JkJHJlZngZc2NoZW1hOkludGVyYWN0aW9uQ291bnRlcmtkZXNjcmlwdGlvbnicVGhlIG51bWJlciBvZiBpbnRlcmFjdGlvbnMgZm9yIHRoZSBDcmVhdGl2ZVdvcmsgdXNpbmcgdGhlIFdlYlNpdGUgb3IgU29mdHdhcmVBcHBsaWNhdGlvbi4gVGhlIG1vc3Qgc3BlY2lmaWMgY2hpbGQgdHlwZSBvZiBJbnRlcmFjdGlvbkNvdW50ZXIgc2hvdWxkIGJlIHVzZWQudGxlYXJuaW5nUmVzb3VyY2VUeXBlomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybWtkZXNjcmlwdGlvbnhqVGhlIHByZWRvbWluYW50IHR5cGUgb3Iga2luZCBjaGFyYWN0ZXJpemluZyB0aGUgbGVhcm5pbmcgcmVzb3VyY2UuIEZvciBleGFtcGxlLCAncHJlc2VudGF0aW9uJywgJ2hhbmRvdXQnLnRwdWJsaXNoaW5nUHJpbmNpcGxlc6JlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb255AmFUaGUgcHVibGlzaGluZ1ByaW5jaXBsZXMgcHJvcGVydHkgaW5kaWNhdGVzICh0eXBpY2FsbHkgdmlhIFtbVVJMXV0pIGEgZG9jdW1lbnQgZGVzY3JpYmluZyB0aGUgZWRpdG9yaWFsIHByaW5jaXBsZXMgb2YgYW4gW1tPcmdhbml6YXRpb25dXSAob3IgaW5kaXZpZHVhbCBlLmcuIGEgW1tQZXJzb25dXSB3cml0aW5nIGEgYmxvZykgdGhhdCByZWxhdGUgdG8gdGhlaXIgYWN0aXZpdGllcyBhcyBhIHB1Ymxpc2hlciwgZS5nLiBldGhpY3Mgb3IgZGl2ZXJzaXR5IHBvbGljaWVzLiBXaGVuIGFwcGxpZWQgdG8gYSBbW0NyZWF0aXZlV29ya11dIChlLmcuIFtbTmV3c0FydGljbGVdXSkgdGhlIHByaW5jaXBsZXMgYXJlIHRob3NlIG9mIHRoZSBwYXJ0eSBwcmltYXJpbHkgcmVzcG9uc2libGUgZm9yIHRoZSBjcmVhdGlvbiBvZiB0aGUgW1tDcmVhdGl2ZVdvcmtdXS4KCldoaWxlIHN1Y2ggcG9saWNpZXMgYXJlIG1vc3QgdHlwaWNhbGx5IGV4cHJlc3NlZCBpbiBuYXR1cmFsIGxhbmd1YWdlLCBzb21ldGltZXMgcmVsYXRlZCBpbmZvcm1hdGlvbiAoZS5nLiBpbmRpY2F0aW5nIGEgW1tmdW5kZXJdXSkgY2FuIGJlIGV4cHJlc3NlZCB1c2luZyBzY2hlbWEub3JnIHRlcm1pbm9sb2d5LgprZGVzY3JpcHRpb254ZVRoZSBtb3N0IGdlbmVyaWMga2luZCBvZiBjcmVhdGl2ZSB3b3JrLCBpbmNsdWRpbmcgYm9va3MsIG1vdmllcywgcGhvdG9ncmFwaHMsIHNvZnR3YXJlIHByb2dyYW1zLCBldGMua2Rlc2NyaXB0aW9ueDFBIG11c2ljIHJlY29yZGluZyAodHJhY2spLCB1c3VhbGx5IGEgc2luZ2xlIHNvbmcuZmhlYWRlcqJmdW5pcXVlcFZDRy8wbE1RZktMZHdNaUVrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frxhuebj8ok06io9ebv23jm5yz42znqobnl9e04vk6yujuary6gydc"},"kjzl6cwe1jw14bd8af9uf2y42rh6886glbes4cgp6jkffptjlln8o63gztpzt1p":{"alias":"MusicGroup","commits":[{"jws":{"payload":"AXESIAE1ptGPyx0JsKF2x0kmi9K11Hl-M4SblYysKbqbgdOJ","signatures":[{"signature":"qI8lS_m3n5GRiy7iLIMZsdW_i8YqucxdHKmkxP6LAvOz4frnGRs3Qaf3SU7DMMgj8kvnEgJwKEs5zTTDiMS5CA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiabgwtndd6ldue3bilwy5esnc6swxkhs7rtqsnzldfmfg5jxaotre"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fryou2y4m0b8ykzne4ai5xzl53ywmr2j59rrm3dlx9nvcourcumk1s"},"kjzl6cwe1jw14at99brqv512wy64cdm5lfrrhkh8d1f6i2h1bgyrba45i4d6o8j":{"alias":"MusicAlbum","commits":[{"jws":{"payload":"AXESIMBOz3rV80ql3HUPXoLog3rYfxWqqAM3AFNeZw0v4Jo2","signatures":[{"signature":"ZjJcIC8G7SKF0LNMXgES0_3-UQV65Z6JecjXnoxg07VjosBC76tHDRZ19c_InUnjWVastBThaJNbaOQn9xrlAw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreigaj3hxvvptjks5y5ipl2bora323b7rlkviam3qau26m4gs7ye2gy"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frykw1ubpb1froqaziw0tjsg5fgxmjgq3y8hl5dkn687xj4v1rgcn4"},"kjzl6cwe1jw148oepfv7t4t4u7i93e878kdxm310ia13ru8ndpgbvxjtv6qha9b":{"alias":"MusicAlbumProductionType","commits":[{"jws":{"payload":"AXESIOjaUhnQ69MccA5IfWo8skuhosJ_M2nw5kMmyoFuDltT","signatures":[{"signature":"iErvMMOdCzzrAimaOEC-r_N97GK9fMv9Mh6RgQWvKhYw99gdBDccE-IvE3tSLVgd4s2zDCRUfCeIgwNIis9zCw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihi3jjbtuhl2mohadsipvvdzmslugrme7ztnhyomqzgzkaw4ds3km"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZomiZWNvbnN0cENvbXBpbGF0aW9uQWxidW1rZGVzY3JpcHRpb25xQ29tcGlsYXRpb25BbGJ1bS6iZWNvbnN0akRKTWl4QWxidW1rZGVzY3JpcHRpb25rREpNaXhBbGJ1bS6iZWNvbnN0aURlbW9BbGJ1bWtkZXNjcmlwdGlvbmpEZW1vQWxidW0uomVjb25zdGlMaXZlQWxidW1rZGVzY3JpcHRpb25qTGl2ZUFsYnVtLqJlY29uc3RsTWl4dGFwZUFsYnVta2Rlc2NyaXB0aW9ubU1peHRhcGVBbGJ1bS6iZWNvbnN0alJlbWl4QWxidW1rZGVzY3JpcHRpb25rUmVtaXhBbGJ1bS6iZWNvbnN0b1NvdW5kdHJhY2tBbGJ1bWtkZXNjcmlwdGlvbnBTb3VuZHRyYWNrQWxidW0uomVjb25zdG9TcG9rZW5Xb3JkQWxidW1rZGVzY3JpcHRpb25wU3Bva2VuV29yZEFsYnVtLqJlY29uc3RrU3R1ZGlvQWxidW1rZGVzY3JpcHRpb25sU3R1ZGlvQWxidW0uZXRpdGxleBhNdXNpY0FsYnVtUHJvZHVjdGlvblR5cGVnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEja2Rlc2NyaXB0aW9ueF9DbGFzc2lmaWNhdGlvbiBvZiB0aGUgYWxidW0gYnkgaXQncyB0eXBlIG9mIGNvbnRlbnQ6IHNvdW5kdHJhY2ssIGxpdmUgYWxidW0sIHN0dWRpbyBhbGJ1bSwgZXRjLmZoZWFkZXKiZnVuaXF1ZXA2UTJ4YkFTUVpCL28xVTVPa2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1fry5pkkwtzj676etdso56bgwz311j7lzbutz1i9h04j2l0drwawy68"},"kjzl6cwe1jw14909asjclic13gmxqhlox9n721mbmfzlkmqd4ptwjq2jxtll9uj":{"alias":"MusicRelease","commits":[{"jws":{"payload":"AXESID109VAXF-SXFL2PNpmqrSZuZQxBtAuuPptguDaNYBQ-","signatures":[{"signature":"igpDOACkrIbnmMOd8Z7iPTPvy3YCsNnrx1A0G4qdwNJPC7jgMMY1e-A5qdW4BrdOFZilVxMzlbKVEGCI5SfYBg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreib5ot2vafyx4slrjpmpg2m2vljgnzsqyqnuboxd5g3axa3i2yauhy"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fry81u4qxlkydjsmb3wd698kky6jiqnlp5epnhdjong9e5sihja134"},"kjzl6cwe1jw148p73edqfdrsbkrvv9rity0cd28ytrihuxoq33xpmqtnhvut51r":{"alias":"MusicReleaseFormatType","commits":[{"jws":{"payload":"AXESIB46_rYwQmvcYihuWxkhiPwdUnS_mq7KyLSTNv89TaKs","signatures":[{"signature":"rrMlfTqrs6I-I6Y2Jx8B_VjDpceaSQoXrcXsqoInBfhCm62haTdiBNlcK3QH67xljFngwXxFcuKwipe0Awz3Aw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreia6hl7lmmccnpogekdolmmsdch4dvjhjp42v3fmrnetg37t2tncvq"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoeiZWNvbnN0aENERm9ybWF0a2Rlc2NyaXB0aW9uaUNERm9ybWF0LqJlY29uc3RuQ2Fzc2V0dGVGb3JtYXRrZGVzY3JpcHRpb25vQ2Fzc2V0dGVGb3JtYXQuomVjb25zdGlEVkRGb3JtYXRrZGVzY3JpcHRpb25qRFZERm9ybWF0LqJlY29uc3R2RGlnaXRhbEF1ZGlvVGFwZUZvcm1hdGtkZXNjcmlwdGlvbndEaWdpdGFsQXVkaW9UYXBlRm9ybWF0LqJlY29uc3RtRGlnaXRhbEZvcm1hdGtkZXNjcmlwdGlvbm5EaWdpdGFsRm9ybWF0LqJlY29uc3RvTGFzZXJEaXNjRm9ybWF0a2Rlc2NyaXB0aW9ucExhc2VyRGlzY0Zvcm1hdC6iZWNvbnN0a1ZpbnlsRm9ybWF0a2Rlc2NyaXB0aW9ubFZpbnlsRm9ybWF0LmV0aXRsZXZNdXNpY1JlbGVhc2VGb3JtYXRUeXBlZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZXNjcmlwdGlvbnhlRm9ybWF0IG9mIHRoaXMgcmVsZWFzZSAodGhlIHR5cGUgb2YgcmVjb3JkaW5nIG1lZGlhIHVzZWQsIGllLiBjb21wYWN0IGRpc2MsIGRpZ2l0YWwgbWVkaWEsIExQLCBldGMuKS5maGVhZGVyomZ1bmlxdWVwSG1oTE1vL2NsTWdlVDhzK2tjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1fry5v6g69nxdxlebqamdfpwxufwvzrnnnizzjti3zq9qqv36j37wg0"},"kjzl6cwe1jw149t7wquwm9tdz65wi5tz89d4teu4r0xj5j4cjv26h0rvmqm5s75":{"alias":"Comment","commits":[{"jws":{"payload":"AXESIPTOxI5lxWZ9wzuxe4w-QJVrf_6Of1EoC7NBryfHD--B","signatures":[{"signature":"Er5SVsyRwI-nFFiH5q-GFAcASXO6NeuXGXeoQ-TBmx0l40IcwYKHLj6nghtEQ9aA1eu7HNdj0g-ZhOyOcpJ6Cw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihuz3ci4zofmz64go5rpogd4qevnn775dt7keuaxm2bv4t4od7pqe"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frydrs8uzrydsze3tz55h6iqle95i9s6mg7byx98vi11i8xp9l4irk"},"kjzl6cwe1jw14860eqblszu0bdp9jbmbyc5ptxn5s6jvqnr0873ooj91p9k4l2d":{"alias":"Rating","commits":[{"jws":{"payload":"AXESIEj5SBokK6JD4g70dSIMAWwFGAvkxmWvwB3yPg5GDzPQ","signatures":[{"signature":"pBlYOetGjHku_9sLIXHVt68L5QYUU4kKRGpn0I9R3NrhSvSEz_FWPUCR7IraWdfCkewVGveo3jUvEqZvtHCwAg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreici7febujblujb6edxuourayalmaumaxzggmwx4ahpshyhemdzt2a"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlZlJhdGluZ2ckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNqcHJvcGVydGllc6ZmYXV0aG9yomVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueNtUaGUgYXV0aG9yIG9mIHRoaXMgY29udGVudCBvciByYXRpbmcuIFBsZWFzZSBub3RlIHRoYXQgYXV0aG9yIGlzIHNwZWNpYWwgaW4gdGhhdCBIVE1MIDUgcHJvdmlkZXMgYSBzcGVjaWFsIG1lY2hhbmlzbSBmb3IgaW5kaWNhdGluZyBhdXRob3JzaGlwIHZpYSB0aGUgcmVsIHRhZy4gVGhhdCBpcyBlcXVpdmFsZW50IHRvIHRoaXMgYW5kIG1heSBiZSB1c2VkIGludGVyY2hhbmdlYWJseS5qYmVzdFJhdGluZ6JlYW55T2aCoWR0eXBlZm51bWJlcqFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254WFRoZSBoaWdoZXN0IHZhbHVlIGFsbG93ZWQgaW4gdGhpcyByYXRpbmcgc3lzdGVtLiBJZiBiZXN0UmF0aW5nIGlzIG9taXR0ZWQsIDUgaXMgYXNzdW1lZC5rcmF0aW5nVmFsdWWiZWFueU9mgqFkdHlwZWZudW1iZXKhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueQFKVGhlIHJhdGluZyBmb3IgdGhlIGNvbnRlbnQuXG5cblVzYWdlIGd1aWRlbGluZXM6XG5cbiogVXNlIHZhbHVlcyBmcm9tIDAxMjM0NTY3ODkgKFVuaWNvZGUgJ0RJR0lUIFpFUk8nIChVKzAwMzApIHRvICdESUdJVCBOSU5FJyAoVSswMDM5KSkgcmF0aGVyIHRoYW4gc3VwZXJmaWNpYWxseSBzaW1pbGlhciBVbmljb2RlIHN5bWJvbHMuXG4qIFVzZSAnLicgKFVuaWNvZGUgJ0ZVTEwgU1RPUCcgKFUrMDAyRSkpIHJhdGhlciB0aGFuICcsJyB0byBpbmRpY2F0ZSBhIGRlY2ltYWwgcG9pbnQuIEF2b2lkIHVzaW5nIHRoZXNlIHN5bWJvbHMgYXMgYSByZWFkYWJpbGl0eSBzZXBhcmF0b3Iua3dvcnN0UmF0aW5nomVhbnlPZoKhZHR5cGVmbnVtYmVyoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnhYVGhlIGxvd2VzdCB2YWx1ZSBhbGxvd2VkIGluIHRoaXMgcmF0aW5nIHN5c3RlbS4gSWYgd29yc3RSYXRpbmcgaXMgb21pdHRlZCwgMSBpcyBhc3N1bWVkLmxyZXZpZXdBc3BlY3SiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueExUaGlzIFJldmlldyBvciBSYXRpbmcgaXMgcmVsZXZhbnQgdG8gdGhpcyBwYXJ0IG9yIGZhY2V0IG9mIHRoZSBpdGVtUmV2aWV3ZWQucXJhdGluZ0V4cGxhbmF0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnj8QSBzaG9ydCBleHBsYW5hdGlvbiAoZS5nLiBvbmUgdG8gdHdvIHNlbnRlbmNlcykgcHJvdmlkaW5nIGJhY2tncm91bmQgY29udGV4dCBhbmQgb3RoZXIgaW5mb3JtYXRpb24gdGhhdCBsZWQgdG8gdGhlIGNvbmNsdXNpb24gZXhwcmVzc2VkIGluIHRoZSByYXRpbmcuIFRoaXMgaXMgcGFydGljdWxhcmx5IGFwcGxpY2FibGUgdG8gcmF0aW5ncyBhc3NvY2lhdGVkIHdpdGggImZhY3QgY2hlY2siIG1hcmt1cCB1c2luZyBbW0NsYWltUmV2aWV3XV0ua2RlZmluaXRpb25zomVUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uakludGFuZ2libGWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZnMjL2RlZmluaXRpb25zL1RoaW5na2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5ldGl0bGVqSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMua2Rlc2NyaXB0aW9ueENBIHJhdGluZyBpcyBhbiBldmFsdWF0aW9uIG9uIGEgbnVtZXJpYyBzY2FsZSwgc3VjaCBhcyAxIHRvIDUgc3RhcnMuZmhlYWRlcqJmdW5pcXVlcFozR05VWER1c0NIb1N2bzJrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1fry22qwr6j26te8xfntemt06gnov8p4eldpkw1mai7igwc3nz4lssg"},"kjzl6cwe1jw14bab3idovq6i39ammyhw2cplpb2j37pwjhceim87x8spv1228fv":{"alias":"CorrectionComment","commits":[{"jws":{"payload":"AXESIOfX8vj-6TA8mMQk87ar_O74OScVPauZAybhIYzL3lsX","signatures":[{"signature":"AaMARWkOkqPT6bQFzS042u6ctwzx4ucMtyeGmUjxlV5wW3BLxK5bWztIxqnn_lc1pwiilwdLg77avWF9aPNnAQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihh27zpr7xjga6jrrbe6o3kx7ho7a4sofj5vomqgjxbeggmxxs3c4"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fryo9awypcxm68n63kz9b80qe2bypzquw7ejc78e2gcek7wninw0sg"},"kjzl6cwe1jw14a4clfubrpmgexditj2ksmonzh4ga8ezfv3xg23t2a2lz00l5je":{"alias":"AlignmentObject","commits":[{"jws":{"payload":"AXESIF_T4HJ6-L-gtHixy-N354JLlbLUAcY_E55hLml42LRo","signatures":[{"signature":"WRioY3hVQ7X1QWhYVRtuxgX9eLnvXdzGAxvddfuzM5dQvfs28On9bhZuhonS8RRF3teaCEP0kdpQ02YX4QFTDw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreic72pqhe6xyx6qli6frzprxpz4cjok3fvabyy7rhhtbfzuxrwfuna"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlb0FsaWdubWVudE9iamVjdGckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNqcHJvcGVydGllc6VpdGFyZ2V0VXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueDpUaGUgVVJMIG9mIGEgbm9kZSBpbiBhbiBlc3RhYmxpc2hlZCBlZHVjYXRpb25hbCBmcmFtZXdvcmsuanRhcmdldE5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueDtUaGUgbmFtZSBvZiBhIG5vZGUgaW4gYW4gZXN0YWJsaXNoZWQgZWR1Y2F0aW9uYWwgZnJhbWV3b3JrLm1hbGlnbm1lbnRUeXBlomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnixQSBjYXRlZ29yeSBvZiBhbGlnbm1lbnQgYmV0d2VlbiB0aGUgbGVhcm5pbmcgcmVzb3VyY2UgYW5kIHRoZSBmcmFtZXdvcmsgbm9kZS4gUmVjb21tZW5kZWQgdmFsdWVzIGluY2x1ZGU6ICdyZXF1aXJlcycsICd0ZXh0Q29tcGxleGl0eScsICdyZWFkaW5nTGV2ZWwnLCBhbmQgJ2VkdWNhdGlvbmFsU3ViamVjdCcucXRhcmdldERlc2NyaXB0aW9uomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnhCVGhlIGRlc2NyaXB0aW9uIG9mIGEgbm9kZSBpbiBhbiBlc3RhYmxpc2hlZCBlZHVjYXRpb25hbCBmcmFtZXdvcmsudGVkdWNhdGlvbmFsRnJhbWV3b3JromR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbng/VGhlIGZyYW1ld29yayB0byB3aGljaCB0aGUgcmVzb3VyY2UgYmVpbmcgZGVzY3JpYmVkIGlzIGFsaWduZWQua2RlZmluaXRpb25zomVUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uakludGFuZ2libGWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZnMjL2RlZmluaXRpb25zL1RoaW5na2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5ldGl0bGVqSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMua2Rlc2NyaXB0aW9ueQEjQW4gaW50YW5naWJsZSBpdGVtIHRoYXQgZGVzY3JpYmVzIGFuIGFsaWdubWVudCBiZXR3ZWVuIGEgbGVhcm5pbmcgcmVzb3VyY2UgYW5kIGEgbm9kZSBpbiBhbiBlZHVjYXRpb25hbCBmcmFtZXdvcmsuCgpTaG91bGQgbm90IGJlIHVzZWQgd2hlcmUgdGhlIG5hdHVyZSBvZiB0aGUgYWxpZ25tZW50IGNhbiBiZSBkZXNjcmliZWQgdXNpbmcgYSBzaW1wbGUgcHJvcGVydHksIGZvciBleGFtcGxlIHRvIGV4cHJlc3MgdGhhdCBhIHJlc291cmNlIFtbdGVhY2hlc11dIG9yIFtbYXNzZXNzZXNdXSBhIGNvbXBldGVuY3kuZmhlYWRlcqJmdW5pcXVlcDAxejk0SmF3TUdaL0FCS0VrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1fryfyxkgnnp27oq5c5tzmbvlbek9rnsruk0t7xu6z2o7mk8w46fdvk"},"kjzl6cwe1jw1460slyznv48ub6pmo7k5s0xhtz5iwu8bcn4z0btnmkf43mu7sbh":{"alias":"Language","commits":[{"jws":{"payload":"AXESIMEuDTdsl8Zy8XDYz0II1Bn1Jgl1OxhvEhVlvxzNPyy6","signatures":[{"signature":"qiNm9IZjTKaTs2gNmimGLvFfsWpKDk6J38kLjwxO9RM_NUoC1otmfiYjNq4vC5K80juk2Bpv_Hf8oG2oi3f9Bw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreigbfygto3exyzzpc4gyz5barvaz6utas5j3dbxreflfx4om2pzmxi"},"linkedBlock":"omRkYXRhpmR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlaExhbmd1YWdlZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZWZpbml0aW9uc6JlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmtkZXNjcmlwdGlvbnkBY05hdHVyYWwgbGFuZ3VhZ2VzIHN1Y2ggYXMgU3BhbmlzaCwgVGFtaWwsIEhpbmRpLCBFbmdsaXNoLCBldGMuIEZvcm1hbCBsYW5ndWFnZSBjb2RlIHRhZ3MgZXhwcmVzc2VkIGluIFtCQ1AgNDddKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lFVEZfbGFuZ3VhZ2VfdGFnKSBjYW4gYmUgdXNlZCB2aWEgdGhlIFtbYWx0ZXJuYXRlTmFtZV1dIHByb3BlcnR5LiBUaGUgTGFuZ3VhZ2UgdHlwZSBwcmV2aW91c2x5IGFsc28gY292ZXJlZCBwcm9ncmFtbWluZyBsYW5ndWFnZXMgc3VjaCBhcyBTY2hlbWUgYW5kIExpc3AsIHdoaWNoIGFyZSBub3cgYmVzdCByZXByZXNlbnRlZCB1c2luZyBbW0NvbXB1dGVyTGFuZ3VhZ2VdXS5maGVhZGVyomZ1bmlxdWVwdlNSdEFGdWhkMlF4dHl1MGtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frxmtng8tlpa6vjjq985rd3am6t5zahiz4pwjcyc2w0h7h5uevddkw"},"kjzl6cwe1jw145rmp960xvzs5g6h4z3b5n4jgwbw31ksbfvwt6tilo2vwr643ru":{"alias":"InteractionCounter","commits":[{"jws":{"payload":"AXESIK2EyIuhIiZFSoCEnSf5Z7wvAF7xT178E-cOfoMMY8U3","signatures":[{"signature":"5zmKQMXOj_uYVaTSeLeBVkkiZTHC8BF7Q4UmvVZm4IHYXDs3WxGh6zb6VCJcsbJIReSYqdfLX-ywQ_AOBGNSBA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifnqteixijcezcuvaeetut7sz54f4af54kpl36bhzyop2bqyy6fg4"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxl0hfl6uozig6r21vdjjc4gag5wk5n7tdcyxbkhwa38iwx7h6txc"},"kjzl6cwe1jw148he7z8yrw6lk5f17xrpb31nc1kt1i3amko7mpfejn3orwgbi0f":{"alias":"SoftwareApplication","commits":[{"jws":{"payload":"AXESIDB7i6EE1XQzcxrBqgrk9TO_TpAr_al-Vmi_yyResEQg","signatures":[{"signature":"8Zn2QEMek__TlQnRXxKvL702QLEkgrThDOybcxQ_tz2z6ZDrQJ_Xaw8VDbNc8c504C4QHUfkuNO5ziPSNCWzDQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreibqpof2cbgvoqzxggwbvifoj5jtx5hjak75vf7fm2f7zmsf5mceea"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fry4bp4qnracuxbaiwog4zytnpxn7yionfkj069gtjfoa86es1s2yo"},"kjzl6cwe1jw14abpgz7wmfctqtobubglckjjgtsmj5wli2jp0cd29bydc9b1z94":{"alias":"DataFeed","commits":[{"jws":{"payload":"AXESICJ5zoBm5jotWAC3dPgeID8VvhwNE3BI3I-KUimPbKlh","signatures":[{"signature":"kckG7moMvJ0f_6ggAA7xaarNumDhqC-_LLicO5t-C377NGg1SpPq3rHVwrDcHpDxg5c8C5EavhgpRbN-rF_CDQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreibcphhiazxghiwvqafxot4b4ib7cw7byditobenzd4kkiuy63fjme"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fryhf94qg7zh77ir107lhzte2yfnvk89zswi41ufww2d0ev66m2osg"},"kjzl6cwe1jw14b3bjas7cqc66bzwrme95uokqnrptbqyy004g2tgbqrgdlvznty":{"alias":"DataFeedItem","commits":[{"jws":{"payload":"AXESIGrJg4hp6GaW5Y3w8YrPvmQ8Y4GvR2bkNWpIT3qetcUG","signatures":[{"signature":"OI6aihnHnAohGPGJEtRU0Ns6vPSmDY6kbqNlIz77GRnSLGV8vzdJEjcTSnrv97f29OdyoEBQh6Z01N87hdYBCQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreidkzgbyq2pim2loldpq6gfm7ptehrrydl2hm3sdk2sij55j5nofay"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlbERhdGFGZWVkSXRlbWckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNqcHJvcGVydGllc6RkaXRlbaJlb25lT2aCoWQkcmVmbHNjaGVtYTpUaGluZ6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZmxzY2hlbWE6VGhpbmdrZGVzY3JpcHRpb254ZkFuIGVudGl0eSByZXByZXNlbnRlZCBieSBhbiBlbnRyeSBpbiBhIGxpc3Qgb3IgZGF0YSBmZWVkIChlLmcuIGFuICdhcnRpc3QnIGluIGEgbGlzdCBvZiAnYXJ0aXN0cycp4oCZLmtkYXRlQ3JlYXRlZKJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZaJkdHlwZWZzdHJpbmdmZm9ybWF0aWRhdGUtdGltZWtkZXNjcmlwdGlvbnhTVGhlIGRhdGUgb24gd2hpY2ggdGhlIENyZWF0aXZlV29yayB3YXMgY3JlYXRlZCBvciB0aGUgaXRlbSB3YXMgYWRkZWQgdG8gYSBEYXRhRmVlZC5rZGF0ZURlbGV0ZWSiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGWiZHR5cGVmc3RyaW5nZmZvcm1hdGlkYXRlLXRpbWVrZGVzY3JpcHRpb254NFRoZSBkYXRldGltZSB0aGUgaXRlbSB3YXMgcmVtb3ZlZCBmcm9tIHRoZSBEYXRhRmVlZC5sZGF0ZU1vZGlmaWVkomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGRkYXRlomR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1la2Rlc2NyaXB0aW9ueHZUaGUgZGF0ZSBvbiB3aGljaCB0aGUgQ3JlYXRpdmVXb3JrIHdhcyBtb3N0IHJlY2VudGx5IG1vZGlmaWVkIG9yIHdoZW4gdGhlIGl0ZW0ncyBlbnRyeSB3YXMgbW9kaWZpZWQgd2l0aGluIGEgRGF0YUZlZWQua2RlZmluaXRpb25zomVUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uakludGFuZ2libGWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZnMjL2RlZmluaXRpb25zL1RoaW5na2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5ldGl0bGVqSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMua2Rlc2NyaXB0aW9ueChBIHNpbmdsZSBpdGVtIHdpdGhpbiBhIGxhcmdlciBkYXRhIGZlZWQuZmhlYWRlcqJmdW5pcXVlcHE5RGZ2SThsY1N6TmFRUTlrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frymvm18okajajx1bd0f9d5m6rhl13kjjshs0vmc1g3ib8grnhlgxs"},"kjzl6cwe1jw14aab6fectw1dr069tbd1l9puxa9g589qes4tgfej0v6z5d3z4z6":{"alias":"DataCatalog","commits":[{"jws":{"payload":"AXESILFaGwDgNTxJ7MQeEFaMDLlgl-l1drHf1jnsaE3D1upE","signatures":[{"signature":"Q2EaTMfSkLcxZfobcuoAllRM7-e17Bn1LCodzaXtCu2KnmXDBdyxhYgBPJxCoGe6xpB8kNkETyORE6JRrnKNAg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifrlinqbybvhre6zra6cbliydfzmcl6s5lwwhp5mopmnbg4hvxkiq"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fryh5bhpi38jtts18lsgsrb93vwoz6t6t7t429gtjba5tly589ve2o"},"kjzl6cwe1jw148b54vghuguttk84c5uofir42h578v31o8iomknsxqepao5taha":{"alias":"Dataset","commits":[{"jws":{"payload":"AXESIF6G5ZFOy8cceQE3-8WZ62S7QEMABgnooGtVu9AlVc6b","signatures":[{"signature":"pAdQb7cHOr8do1xHz5NQKIcIvDTjNaW6ayyim0fACRpkTXFMYAabQP5Gali2p8ZQ1ZqTTBU5Zf3d3w9Uh6TqDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreic6q3szctwly4ohsajx7pczt23exnaegaagbhuka22vxpickvootm"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fry338inpawnv827tquhm5qdcsxlwzj11nwckv4ix9rvsjvvtcaiv4"},"kjzl6cwe1jw146auw6i41uyi01qpvz582g0m9hoawpv77ygbs1ushf6ux2ijjzi":{"alias":"DataDownload","commits":[{"jws":{"payload":"AXESIE_oDiGMdzTY3tmC4FSvlnLs1MwpuxSFFBwUToSyJ3vM","signatures":[{"signature":"jk6H11Z6ajuyyJNEzPf5oJNvUS3zfPzWqkFnWGvn0yH3FmeeLEYs3U89psRYxMQz1Q4I3pAnHNp6w0EdwSUAAw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicp5ahcdddxgtmn5wmc4bkk7fts5tkmykn3cscrihauj2clej33zq"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxot7ou8st85c0ce03dx5ddwebhotknxvcl03rh6yjw0rv5vv24g0"},"kjzl6cwe1jw14auohsbn8w3ky3f2ltuxi28d0462cd964fm47v31h45gcxc4myt":{"alias":"MediaSubscription","commits":[{"jws":{"payload":"AXESIFnXLWatPfoEW21MYMeQr7sIHq5WXPHt526BaOua4IQz","signatures":[{"signature":"x-zktCG7If8RbXHHnH0YHm5vjp8w77hVdPmHWzuqMa6lSxDEH7nAsbrOoph8qm6kW8jiDmUObUds_bMQVsUEDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicz24wwnlj57icfw3kmmddzbl53bapk4vs46hw6o3ubndvzvyeegm"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlcU1lZGlhU3Vic2NyaXB0aW9uZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzom1hdXRoZW50aWNhdG9yomQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb25rZGVzY3JpcHRpb254wFRoZSBPcmdhbml6YXRpb24gcmVzcG9uc2libGUgZm9yIGF1dGhlbnRpY2F0aW5nIHRoZSB1c2VyJ3Mgc3Vic2NyaXB0aW9uLiBGb3IgZXhhbXBsZSwgbWFueSBtZWRpYSBhcHBzIHJlcXVpcmUgYSBjYWJsZS9zYXRlbGxpdGUgcHJvdmlkZXIgdG8gYXV0aGVudGljYXRlIHlvdXIgc3Vic2NyaXB0aW9uIGJlZm9yZSBwbGF5aW5nIG1lZGlhLnNleHBlY3RzQWNjZXB0YW5jZU9momVvbmVPZoKhZCRyZWZsc2NoZW1hOk9mZmVyomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbHNjaGVtYTpPZmZlcmtkZXNjcmlwdGlvbniUQW4gT2ZmZXIgd2hpY2ggbXVzdCBiZSBhY2NlcHRlZCBiZWZvcmUgdGhlIHVzZXIgY2FuIHBlcmZvcm0gdGhlIEFjdGlvbi4gRm9yIGV4YW1wbGUsIHRoZSB1c2VyIG1heSBuZWVkIHRvIGJ1eSBhIG1vdmllIGJlZm9yZSBiZWluZyBhYmxlIHRvIHdhdGNoIGl0LmtkZWZpbml0aW9uc6JlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmtkZXNjcmlwdGlvbnhWQSBzdWJzY3JpcHRpb24gd2hpY2ggYWxsb3dzIGEgdXNlciB0byBhY2Nlc3MgbWVkaWEgaW5jbHVkaW5nIGF1ZGlvLCB2aWRlbywgYm9va3MsIGV0Yy5maGVhZGVyomZ1bmlxdWVwYnZwNksvaHpHLytLb3lhVWtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1fryl666hetb89gygb6j8by8fvggtn4ny97jj19zx1mhpisbx28zbi8"},"kjzl6cwe1jw146ekq9gr6d44oq9q0irkcr2sgwuck4857vvksw5u8gwsucvutp5":{"alias":"Offer","commits":[{"jws":{"payload":"AXESIAz1ptmNkXypVpnjZZPLUiQHCBsjcpcAITN6Kxv9Ft1J","signatures":[{"signature":"VJbzVPN9qt9-AMCAqebMAlDMVZMJO1FbwGZ6_jNooeePDIVMKRxlcMXO0FBq9MkY1-JPRaOAB76pcTNwC5FyCA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiam6wtntdmrpsuvngpdmwj4wurea4ebwi3ss4accm32fmn72fw5je"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxpjnerb5999dbut4zpg0qojug9jtb21x42ojxgpj08993vmj76rk"},"kjzl6cwe1jw14a5o5xfyuxgxbirqkv6vplt882v3p37ie2qzkzk65ztfi12gti4":{"alias":"LoanOrCredit","commits":[{"jws":{"payload":"AXESICsjSHsCiDDZF41cofgpaTobL2EWmWPSJBPhum_oePuB","signatures":[{"signature":"2n60ifFWNK2KSkvyRgkfnzwmf7w7xI4-ZLTgksDnNY6FnMl614Kqk4NGIBVSNc5lNUcw6oQzLo3aQXJqWCWrAg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiblenehwauigdmrpdk4uh4cs2j2dmxwcfuzmpjcie7bxjx6q6h3qe"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fryg8bu5tjvy0cxxh90dsxi33uhgd6aetes3jx18vfumpa87ljlssg"},"kjzl6cwe1jw14aiec74iim1erioxhuhpjd9ml5dvpg78h357gq5rkfyafv151u0":{"alias":"MonetaryAmount","commits":[{"jws":{"payload":"AXESIA2CRnLc9j3rjKKjKEapJ12ss-E5bQHnAlvMkW-4Qbjb","signatures":[{"signature":"wXkpgZ1eHq7KU8anNQF-eB-W62l02uaItaFOX16Jbh5aFVntkMJHNeE9mWSsoSKhah-FTeAhToUI4XhjV_rxAg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreianqjdhfxhwhxvyzivdfbdksj25vsz6colnahtqew6msfx3qqny3m"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HSMvZGVmaW5pdGlvbnMvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcuZXRpdGxlbk1vbmV0YXJ5QW1vdW50ZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzpmV2YWx1ZaJlYW55T2aEoWR0eXBlZ2Jvb2xlYW6hZHR5cGVmbnVtYmVyoWR0eXBlZnN0cmluZ6FkJHJlZnZzY2hlbWE6U3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueQIPVGhlIHZhbHVlIG9mIHRoZSBxdWFudGl0YXRpdmUgdmFsdWUgb3IgcHJvcGVydHkgdmFsdWUgbm9kZS5cblxuKiBGb3IgW1tRdWFudGl0YXRpdmVWYWx1ZV1dIGFuZCBbW01vbmV0YXJ5QW1vdW50XV0sIHRoZSByZWNvbW1lbmRlZCB0eXBlIGZvciB2YWx1ZXMgaXMgJ051bWJlcicuXG4qIEZvciBbW1Byb3BlcnR5VmFsdWVdXSwgaXQgY2FuIGJlICdUZXh0OycsICdOdW1iZXInLCAnQm9vbGVhbicsIG9yICdTdHJ1Y3R1cmVkVmFsdWUnLlxuKiBVc2UgdmFsdWVzIGZyb20gMDEyMzQ1Njc4OSAoVW5pY29kZSAnRElHSVQgWkVSTycgKFUrMDAzMCkgdG8gJ0RJR0lUIE5JTkUnIChVKzAwMzkpKSByYXRoZXIgdGhhbiBzdXBlcmZpY2lhbGx5IHNpbWlsaWFyIFVuaWNvZGUgc3ltYm9scy5cbiogVXNlICcuJyAoVW5pY29kZSAnRlVMTCBTVE9QJyAoVSswMDJFKSkgcmF0aGVyIHRoYW4gJywnIHRvIGluZGljYXRlIGEgZGVjaW1hbCBwb2ludC4gQXZvaWQgdXNpbmcgdGhlc2Ugc3ltYm9scyBhcyBhIHJlYWRhYmlsaXR5IHNlcGFyYXRvci5oY3VycmVuY3miZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueQGvVGhlIGN1cnJlbmN5IGluIHdoaWNoIHRoZSBtb25ldGFyeSBhbW91bnQgaXMgZXhwcmVzc2VkLlxuXG5Vc2Ugc3RhbmRhcmQgZm9ybWF0czogW0lTTyA0MjE3IGN1cnJlbmN5IGZvcm1hdF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fNDIxNykgZS5nLiAiVVNEIjsgW1RpY2tlciBzeW1ib2xdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfY3J5cHRvY3VycmVuY2llcykgZm9yIGNyeXB0b2N1cnJlbmNpZXMgZS5nLiAiQlRDIjsgd2VsbCBrbm93biBuYW1lcyBmb3IgW0xvY2FsIEV4Y2hhbmdlIFRyYWRpbmdzIFN5c3RlbXNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvY2FsX2V4Y2hhbmdlX3RyYWRpbmdfc3lzdGVtKSAoTEVUUykgYW5kIG90aGVyIGN1cnJlbmN5IHR5cGVzIGUuZy4gIkl0aGFjYSBIT1VSIi5obWF4VmFsdWWiZHR5cGVmbnVtYmVya2Rlc2NyaXB0aW9ueDNUaGUgdXBwZXIgdmFsdWUgb2Ygc29tZSBjaGFyYWN0ZXJpc3RpYyBvciBwcm9wZXJ0eS5obWluVmFsdWWiZHR5cGVmbnVtYmVya2Rlc2NyaXB0aW9ueDNUaGUgbG93ZXIgdmFsdWUgb2Ygc29tZSBjaGFyYWN0ZXJpc3RpYyBvciBwcm9wZXJ0eS5pdmFsaWRGcm9tomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGRkYXRlomR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1la2Rlc2NyaXB0aW9ueCVUaGUgZGF0ZSB3aGVuIHRoZSBpdGVtIGJlY29tZXMgdmFsaWQubHZhbGlkVGhyb3VnaKJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZaJkdHlwZWZzdHJpbmdmZm9ybWF0aWRhdGUtdGltZWtkZXNjcmlwdGlvbnh4VGhlIGRhdGUgYWZ0ZXIgd2hlbiB0aGUgaXRlbSBpcyBub3QgdmFsaWQuIEZvciBleGFtcGxlIHRoZSBlbmQgb2YgYW4gb2ZmZXIsIHNhbGFyeSBwZXJpb2QsIG9yIGEgcGVyaW9kIG9mIG9wZW5pbmcgaG91cnMua2RlZmluaXRpb25zo2VUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uakludGFuZ2libGWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZnMjL2RlZmluaXRpb25zL1RoaW5na2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5ldGl0bGVqSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMub1N0cnVjdHVyZWRWYWx1ZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmeBgjL2RlZmluaXRpb25zL0ludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmV0aXRsZW9TdHJ1Y3R1cmVkVmFsdWVrZGVzY3JpcHRpb254l1N0cnVjdHVyZWQgdmFsdWVzIGFyZSB1c2VkIHdoZW4gdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgaGFzIGEgbW9yZSBjb21wbGV4IHN0cnVjdHVyZSB0aGFuIHNpbXBseSBiZWluZyBhIHRleHR1YWwgdmFsdWUgb3IgYSByZWZlcmVuY2UgdG8gYW5vdGhlciB0aGluZy5rZGVzY3JpcHRpb255AVNBIG1vbmV0YXJ5IHZhbHVlIG9yIHJhbmdlLiBUaGlzIHR5cGUgY2FuIGJlIHVzZWQgdG8gZGVzY3JpYmUgYW4gYW1vdW50IG9mIG1vbmV5IHN1Y2ggYXMgJDUwIFVTRCwgb3IgYSByYW5nZSBhcyBpbiBkZXNjcmliaW5nIGEgYmFuayBhY2NvdW50IGJlaW5nIHN1aXRhYmxlIGZvciBhIGJhbGFuY2UgYmV0d2VlbiDCozEsMDAwIGFuZCDCozEsMDAwLDAwMCBHQlAsIG9yIHRoZSB2YWx1ZSBvZiBhIHNhbGFyeSwgZXRjLiBJdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgW1tQcmljZVNwZWNpZmljYXRpb25dXSBUeXBlcyB0byBkZXNjcmliZSB0aGUgcHJpY2Ugb2YgYW4gT2ZmZXIsIEludm9pY2UsIGV0Yy5maGVhZGVyomZ1bmlxdWVwWW02RTI1YjFhWEFGZGcyWGtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1fryiqtyqo3ocq0zoxa6wtxlqcgmeapgz7g9id12y101dfu8so3x1c0"},"kjzl6cwe1jw145k583bflrqclaia7rnfkvjx08wdqtkio38d45vezalj8gmmdtk":{"alias":"RepaymentSpecification","commits":[{"jws":{"payload":"AXESIMssu1uTiFV8mdXVkLhKFsT4r_clOONu0JSodnXe71o3","signatures":[{"signature":"i_huhrvfpmc0tGQAosjeC1vMkhSSEedDMFa6MWQ0vh4eXnQ--OLcii0uajRKEhuWYwCr0-Uo84aPmHs2QYwbDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiglfs5vxe4ikv6jtvovsc4eufwe7cx7ojjy4nxnbffioz255322g4"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HSMvZGVmaW5pdGlvbnMvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcuZXRpdGxldlJlcGF5bWVudFNwZWNpZmljYXRpb25nJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjanByb3BlcnRpZXOla2Rvd25QYXltZW50omVvbmVPZoKhZWFueU9mgqFkdHlwZWZudW1iZXKhZCRyZWZ1c2NoZW1hOk1vbmV0YXJ5QW1vdW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZHR5cGVmbnVtYmVyoWQkcmVmdXNjaGVtYTpNb25ldGFyeUFtb3VudGtkZXNjcmlwdGlvbnisYSB0eXBlIG9mIHBheW1lbnQgbWFkZSBpbiBjYXNoIGR1cmluZyB0aGUgb25zZXQgb2YgdGhlIHB1cmNoYXNlIG9mIGFuIGV4cGVuc2l2ZSBnb29kL3NlcnZpY2UuIFRoZSBwYXltZW50IHR5cGljYWxseSByZXByZXNlbnRzIG9ubHkgYSBwZXJjZW50YWdlIG9mIHRoZSBmdWxsIHB1cmNoYXNlIHByaWNlLnFsb2FuUGF5bWVudEFtb3VudKJkJHJlZnVzY2hlbWE6TW9uZXRhcnlBbW91bnRrZGVzY3JpcHRpb254L1RoZSBhbW91bnQgb2YgbW9uZXkgdG8gcGF5IGluIGEgc2luZ2xlIHBheW1lbnQudGxvYW5QYXltZW50RnJlcXVlbmN5omVvbmVPZoKhZHR5cGVmbnVtYmVyomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZm51bWJlcmtkZXNjcmlwdGlvbniLRnJlcXVlbmN5IG9mIHBheW1lbnRzIGR1ZSwgaS5lLiBudW1iZXIgb2YgbW9udGhzIGJldHdlZW4gcGF5bWVudHMuIFRoaXMgaXMgZGVmaW5lZCBhcyBhIGZyZXF1ZW5jeSwgaS5lLiB0aGUgcmVjaXByb2NhbCBvZiBhIHBlcmlvZCBvZiB0aW1lLnRudW1iZXJPZkxvYW5QYXltZW50c6JkdHlwZWZudW1iZXJrZGVzY3JpcHRpb254w1RoZSBudW1iZXIgb2YgcGF5bWVudHMgY29udHJhY3R1YWxseSByZXF1aXJlZCBhdCBvcmlnaW5hdGlvbiB0byByZXBheSB0aGUgbG9hbi4gRm9yIG1vbnRobHkgcGF5aW5nIGxvYW5zIHRoaXMgaXMgdGhlIG51bWJlciBvZiBtb250aHMgZnJvbSB0aGUgY29udHJhY3R1YWwgZmlyc3QgcGF5bWVudCBkYXRlIHRvIHRoZSBtYXR1cml0eSBkYXRlLnZlYXJseVByZXBheW1lbnRQZW5hbHR5omQkcmVmdXNjaGVtYTpNb25ldGFyeUFtb3VudGtkZXNjcmlwdGlvbnhNVGhlIGFtb3VudCB0byBiZSBwYWlkIGFzIGEgcGVuYWx0eSBpbiB0aGUgZXZlbnQgb2YgZWFybHkgcGF5bWVudCBvZiB0aGUgbG9hbi5rZGVmaW5pdGlvbnOjZVRoaW5npGR0eXBlZm9iamVjdGV0aXRsZWVUaGluZ2pwcm9wZXJ0aWVzrmN1cmyjZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb25wVVJMIG9mIHRoZSBpdGVtLmRuYW1lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnVUaGUgbmFtZSBvZiB0aGUgaXRlbS5lQHR5cGWhZHR5cGVmc3RyaW5nZWltYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb254UUFuIGltYWdlIG9mIHRoZSBpdGVtLiBUaGlzIGNhbiBiZSBhIFtbVVJMXV0gb3IgYSBmdWxseSBkZXNjcmliZWQgW1tJbWFnZU9iamVjdF1dLmZzYW1lQXOiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnidVVJMIG9mIGEgcmVmZXJlbmNlIFdlYiBwYWdlIHRoYXQgdW5hbWJpZ3VvdXNseSBpbmRpY2F0ZXMgdGhlIGl0ZW0ncyBpZGVudGl0eS4gRS5nLiB0aGUgVVJMIG9mIHRoZSBpdGVtJ3MgV2lraXBlZGlhIHBhZ2UsIFdpa2lkYXRhIGVudHJ5LCBvciBvZmZpY2lhbCB3ZWJzaXRlLmhAY29udGV4dKFkdHlwZWZzdHJpbmdpc3ViamVjdE9momVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueClBIENyZWF0aXZlV29yayBvciBFdmVudCBhYm91dCB0aGlzIFRoaW5nLmppZGVudGlmaWVyomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVla2Rlc2NyaXB0aW9ueQFJVGhlIGlkZW50aWZpZXIgcHJvcGVydHkgcmVwcmVzZW50cyBhbnkga2luZCBvZiBpZGVudGlmaWVyIGZvciBhbnkga2luZCBvZiBbW1RoaW5nXV0sIHN1Y2ggYXMgSVNCTnMsIEdUSU4gY29kZXMsIFVVSURzIGV0Yy4gU2NoZW1hLm9yZyBwcm92aWRlcyBkZWRpY2F0ZWQgcHJvcGVydGllcyBmb3IgcmVwcmVzZW50aW5nIG1hbnkgb2YgdGhlc2UsIGVpdGhlciBhcyB0ZXh0dWFsIHN0cmluZ3Mgb3IgYXMgVVJMIChVUkkpIGxpbmtzLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI2lkZW50aWZpZXJCZykgZm9yIG1vcmUgZGV0YWlscy4KICAgICAgICBrZGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueBpBIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtLm1hbHRlcm5hdGVOYW1lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnZBbiBhbGlhcyBmb3IgdGhlIGl0ZW0ubmFkZGl0aW9uYWxUeXBlomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb255AZ9BbiBhZGRpdGlvbmFsIHR5cGUgZm9yIHRoZSBpdGVtLCB0eXBpY2FsbHkgdXNlZCBmb3IgYWRkaW5nIG1vcmUgc3BlY2lmaWMgdHlwZXMgZnJvbSBleHRlcm5hbCB2b2NhYnVsYXJpZXMgaW4gbWljcm9kYXRhIHN5bnRheC4gVGhpcyBpcyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHNvbWV0aGluZyBhbmQgYSBjbGFzcyB0aGF0IHRoZSB0aGluZyBpcyBpbi4gSW4gUkRGYSBzeW50YXgsIGl0IGlzIGJldHRlciB0byB1c2UgdGhlIG5hdGl2ZSBSREZhIHN5bnRheCAtIHRoZSAndHlwZW9mJyBhdHRyaWJ1dGUgLSBmb3IgbXVsdGlwbGUgdHlwZXMuIFNjaGVtYS5vcmcgdG9vbHMgbWF5IGhhdmUgb25seSB3ZWFrZXIgdW5kZXJzdGFuZGluZyBvZiBleHRyYSB0eXBlcywgaW4gcGFydGljdWxhciB0aG9zZSBkZWZpbmVkIGV4dGVybmFsbHkub3BvdGVudGlhbEFjdGlvbqJlb25lT2aCoWQkcmVmbXNjaGVtYTpBY3Rpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOkFjdGlvbmtkZXNjcmlwdGlvbnhySW5kaWNhdGVzIGEgcG90ZW50aWFsIEFjdGlvbiwgd2hpY2ggZGVzY3JpYmVzIGFuIGlkZWFsaXplZCBhY3Rpb24gaW4gd2hpY2ggdGhpcyB0aGluZyB3b3VsZCBwbGF5IGFuICdvYmplY3QnIHJvbGUucG1haW5FbnRpdHlPZlBhZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueLBJbmRpY2F0ZXMgYSBwYWdlIChvciBvdGhlciBDcmVhdGl2ZVdvcmspIGZvciB3aGljaCB0aGlzIHRoaW5nIGlzIHRoZSBtYWluIGVudGl0eSBiZWluZyBkZXNjcmliZWQuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjbWFpbkVudGl0eUJhY2tncm91bmQpIGZvciBkZXRhaWxzLngZZGlzYW1iaWd1YXRpbmdEZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2547EEgc3ViIHByb3BlcnR5IG9mIGRlc2NyaXB0aW9uLiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGZyb20gb3RoZXIsIHNpbWlsYXIgaXRlbXMuIEluZm9ybWF0aW9uIGZyb20gb3RoZXIgcHJvcGVydGllcyAoaW4gcGFydGljdWxhciwgbmFtZSkgbWF5IGJlIG5lY2Vzc2FyeSBmb3IgdGhlIGRlc2NyaXB0aW9uIHRvIGJlIHVzZWZ1bCBmb3IgZGlzYW1iaWd1YXRpb24ua2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5qSW50YW5naWJsZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmcyMvZGVmaW5pdGlvbnMvVGhpbmdrZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmV0aXRsZWpJbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5vU3RydWN0dXJlZFZhbHVlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlb1N0cnVjdHVyZWRWYWx1ZWtkZXNjcmlwdGlvbniXU3RydWN0dXJlZCB2YWx1ZXMgYXJlIHVzZWQgd2hlbiB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eSBoYXMgYSBtb3JlIGNvbXBsZXggc3RydWN0dXJlIHRoYW4gc2ltcGx5IGJlaW5nIGEgdGV4dHVhbCB2YWx1ZSBvciBhIHJlZmVyZW5jZSB0byBhbm90aGVyIHRoaW5nLmtkZXNjcmlwdGlvbngqQSBzdHJ1Y3R1cmVkIHZhbHVlIHJlcHJlc2VudGluZyByZXBheW1lbnQuZmhlYWRlcqJmdW5pcXVlcE9TYUxQQWtEaUplVStsTDBrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frxjj95jlayt7djeq0n8mmsgdmpra9qq9wrazh9lreizd4s68v6a68"},"kjzl6cwe1jw14bh926qwjxcal1a1aj8ei4d5vcnrtgvkvt4p30bvd3kk3tksguc":{"alias":"ServiceChannel","commits":[{"jws":{"payload":"AXESIAniMIOwKMm1eYZOdfZWDQoEvhCunFXHJaPIe4VosrnR","signatures":[{"signature":"MyLqoOofYlgLDRDZHJ0NizCQo8wpf1lDj89CPkvSq9Ggzx67m5S2SoNAmUhDJR23sxCnUcngmbg30OIU24g6CA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiaj4iyihmbizg2xtbsoox3fmdikas7bblu4kxdsli6ipocwrmvz2e"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlblNlcnZpY2VDaGFubmVsZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzqGpzZXJ2aWNlVXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueCJUaGUgd2Vic2l0ZSB0byBhY2Nlc3MgdGhlIHNlcnZpY2UubHNlcnZpY2VQaG9uZaJkJHJlZnNzY2hlbWE6Q29udGFjdFBvaW50a2Rlc2NyaXB0aW9ueC5UaGUgcGhvbmUgbnVtYmVyIHRvIHVzZSB0byBhY2Nlc3MgdGhlIHNlcnZpY2UubnByb2Nlc3NpbmdUaW1lo2R0eXBlZnN0cmluZ2gkY29tbWVudHgbaHR0cHM6Ly9zY2hlbWEub3JnL0R1cmF0aW9ua2Rlc2NyaXB0aW9ueD1Fc3RpbWF0ZWQgcHJvY2Vzc2luZyB0aW1lIGZvciB0aGUgc2VydmljZSB1c2luZyB0aGlzIGNoYW5uZWwub3Byb3ZpZGVzU2VydmljZaJkJHJlZm5zY2hlbWE6U2VydmljZWtkZXNjcmlwdGlvbnglVGhlIHNlcnZpY2UgcHJvdmlkZWQgYnkgdGhpcyBjaGFubmVsLm9zZXJ2aWNlTG9jYXRpb26iZCRyZWZsc2NoZW1hOlBsYWNla2Rlc2NyaXB0aW9ueGZUaGUgbG9jYXRpb24gKGUuZy4gY2l2aWMgc3RydWN0dXJlLCBsb2NhbCBidXNpbmVzcywgZXRjLikgd2hlcmUgYSBwZXJzb24gY2FuIGdvIHRvIGFjY2VzcyB0aGUgc2VydmljZS5wc2VydmljZVNtc051bWJlcqJkJHJlZnNzY2hlbWE6Q29udGFjdFBvaW50a2Rlc2NyaXB0aW9ueDFUaGUgbnVtYmVyIHRvIGFjY2VzcyB0aGUgc2VydmljZSBieSB0ZXh0IG1lc3NhZ2UucWF2YWlsYWJsZUxhbmd1YWdlomVvbmVPZoKhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZvc2NoZW1hOkxhbmd1YWdlomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmb3NjaGVtYTpMYW5ndWFnZWtkZXNjcmlwdGlvbnjBQSBsYW5ndWFnZSBzb21lb25lIG1heSB1c2Ugd2l0aCBvciBhdCB0aGUgaXRlbSwgc2VydmljZSBvciBwbGFjZS4gUGxlYXNlIHVzZSBvbmUgb2YgdGhlIGxhbmd1YWdlIGNvZGVzIGZyb20gdGhlIFtJRVRGIEJDUCA0NyBzdGFuZGFyZF0oaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvYmNwNDcpLiBTZWUgYWxzbyBbW2luTGFuZ3VhZ2VdXXRzZXJ2aWNlUG9zdGFsQWRkcmVzc6JkJHJlZnRzY2hlbWE6UG9zdGFsQWRkcmVzc2tkZXNjcmlwdGlvbnguVGhlIGFkZHJlc3MgZm9yIGFjY2Vzc2luZyB0aGUgc2VydmljZSBieSBtYWlsLmtkZWZpbml0aW9uc6JlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmtkZXNjcmlwdGlvbnheQSBtZWFucyBmb3IgYWNjZXNzaW5nIGEgc2VydmljZSwgZS5nLiBhIGdvdmVybm1lbnQgb2ZmaWNlIGxvY2F0aW9uLCB3ZWIgc2l0ZSwgb3IgcGhvbmUgbnVtYmVyLmZoZWFkZXKiZnVuaXF1ZXBVTy91YkdzVkxRTG5zWTQ0a2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frypmofjzbhp3f9l3d6wrr4v1lqy11tk0ki75edecf15e6z6bufrpc"},"kjzl6cwe1jw148uec9o89520sg9su0b0vaqeovcfcj1hkisb0ofz871ebxrwn6n":{"alias":"Service","commits":[{"jws":{"payload":"AXESINF5MgPEnLUaRCXM1y3a0oJkJYPOBaj9_jkOJuUgja7J","signatures":[{"signature":"0h3C_a_XTjOsHeNHTBE4BjMce-UPBrxdTVBpMAyPibKGDA22tdeo5xI4ziN5U6zpV0zS0QwURwrFrbfmDcb3Bw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreigrpezahre4wuneijom24w5vuucmqsyhtqfvd674oioe3ssbdnoze"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fry6w5z8saozydmbpp1e6e6kbsguwd53ekxxlacttmia1xww6g4v7k"},"kjzl6cwe1jw147mwn0chu7t6ft8ksa1oca08agzky127pw9g1hch2zp53ycotl9":{"alias":"Brand","commits":[{"jws":{"payload":"AXESIFfaa1VY-cS_JIra31FoiV_0B_4Qm_VMAzzVqD_V0Y6h","signatures":[{"signature":"LfJmbSduW6s2e6Eh1XpiMDJH3EB1eRvb2zbr4w_9OOEXOlRs5iTQe9ZFB8dTfnxU9BOm7-z1MRbPTVwHGnkSAQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicx3jvvkwhzys7sjcw235iwrck76qd74ee36vgagpgvva75lumoue"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlZUJyYW5kZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzpGRsb2dvomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb25zQW4gYXNzb2NpYXRlZCBsb2dvLmZyZXZpZXeiZW9uZU9mgqFkJHJlZm1zY2hlbWE6UmV2aWV3omR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpSZXZpZXdrZGVzY3JpcHRpb251QSByZXZpZXcgb2YgdGhlIGl0ZW0uZnNsb2dhbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254K0Egc2xvZ2FuIG9yIG1vdHRvIGFzc29jaWF0ZWQgd2l0aCB0aGUgaXRlbS5vYWdncmVnYXRlUmF0aW5nomQkcmVmdnNjaGVtYTpBZ2dyZWdhdGVSYXRpbmdrZGVzY3JpcHRpb254TVRoZSBvdmVyYWxsIHJhdGluZywgYmFzZWQgb24gYSBjb2xsZWN0aW9uIG9mIHJldmlld3Mgb3IgcmF0aW5ncywgb2YgdGhlIGl0ZW0ua2RlZmluaXRpb25zomVUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uakludGFuZ2libGWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZnMjL2RlZmluaXRpb25zL1RoaW5na2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5ldGl0bGVqSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMua2Rlc2NyaXB0aW9ueG9BIGJyYW5kIGlzIGEgbmFtZSB1c2VkIGJ5IGFuIG9yZ2FuaXphdGlvbiBvciBidXNpbmVzcyBwZXJzb24gZm9yIGxhYmVsaW5nIGEgcHJvZHVjdCwgcHJvZHVjdCBncm91cCwgb3Igc2ltaWxhci5maGVhZGVyomZ1bmlxdWVwbVZMd1g4OEtuemFwVVVqZ2tjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frxyaw3mguuvjhsfwzt3fx3b5mygt0xzjqw5f62jcph9usc4a8if40"},"kjzl6cwe1jw148ft7mzmz7wlwiareytx85c3sk0f0elgbh4jqxkmjorxmgypikj":{"alias":"Review","commits":[{"jws":{"payload":"AXESIPbRCKAeCCF_f52mUV6BygVvM9FKVgGyGA65qSJXhKFN","signatures":[{"signature":"K4jhIplpAJdWcohcMHHsy721ZaFiXRU-g5cNixb1BmJ6RI8whc9cLuGw-IgKpsNuQkwfBddp3xk0McSFI723DA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihw2eekahqief7x7hngkfpidsqfn4z5csswagzbqdvzverfpbfbju"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fry40fqbhfeg7vr64iyfos9xy2z2ayqvsk1lscfiqoc06n3smtg1z4"},"kjzl6cwe1jw147mdo4b3cpgens43fiykouf32gjwis81q3zacylsblxp5mfxw9f":{"alias":"WebContent","commits":[{"jws":{"payload":"AXESIIzzNiMZc3IOaIZIimbbmTPrGPIWsN0gR3p82O9xrANX","signatures":[{"signature":"ykkWvHh9HnnOn3gwleDsGZsYYwCucu7ElW-XkEqDdayVUSo21DejJQQrqMcvhsOZUr1xLpvfr1B9VLSNpQYYCQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiem6m3cggltoihgrbsirjtnxgjt5mmpefvq3uqeo6t43dxxdladk4"},"linkedBlock":"omRkYXRhpmR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GiMvZGVmaW5pdGlvbnMvQ3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueGVUaGUgbW9zdCBnZW5lcmljIGtpbmQgb2YgY3JlYXRpdmUgd29yaywgaW5jbHVkaW5nIGJvb2tzLCBtb3ZpZXMsIHBob3RvZ3JhcGhzLCBzb2Z0d2FyZSBwcm9ncmFtcywgZXRjLmV0aXRsZWpXZWJDb250ZW50ZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZWZpbml0aW9uc6JlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmxDcmVhdGl2ZVdvcmulZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZnMjL2RlZmluaXRpb25zL1RoaW5na2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5ldGl0bGVsQ3JlYXRpdmVXb3JranByb3BlcnRpZXO4b2RzaXplomVvbmVPZoKhZWFueU9mhKFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJtoWQkcmVmeBhzY2hlbWE6UXVhbnRpdGF0aXZlVmFsdWWhZCRyZWZ4GHNjaGVtYTpTaXplU3BlY2lmaWNhdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aEoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm2hZCRyZWZ4GHNjaGVtYTpRdWFudGl0YXRpdmVWYWx1ZaFkJHJlZngYc2NoZW1hOlNpemVTcGVjaWZpY2F0aW9ua2Rlc2NyaXB0aW9ueQFJQSBzdGFuZGFyZGl6ZWQgc2l6ZSBvZiBhIHByb2R1Y3Qgb3IgY3JlYXRpdmUgd29yaywgc3BlY2lmaWVkIGVpdGhlciB0aHJvdWdoIGEgc2ltcGxlIHRleHR1YWwgc3RyaW5nIChmb3IgZXhhbXBsZSAnWEwnLCAnMzJXeDM0TCcpLCBhICBRdWFudGl0YXRpdmVWYWx1ZSB3aXRoIGEgdW5pdENvZGUsIG9yIGEgY29tcHJlaGVuc2l2ZSBhbmQgc3RydWN0dXJlZCBbW1NpemVTcGVjaWZpY2F0aW9uXV07IGluIG90aGVyIGNhc2VzLCB0aGUgW1t3aWR0aF1dLCBbW2hlaWdodF1dLCBbW2RlcHRoXV0gYW5kIFtbd2VpZ2h0XV0gcHJvcGVydGllcyBtYXkgYmUgbW9yZSBhcHBsaWNhYmxlLiBkdGV4dKJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254KVRoZSB0ZXh0dWFsIGNvbnRlbnQgb2YgdGhpcyBDcmVhdGl2ZVdvcmsuZWFib3V0omQkcmVmbHNjaGVtYTpUaGluZ2tkZXNjcmlwdGlvbngiVGhlIHN1YmplY3QgbWF0dGVyIG9mIHRoZSBjb250ZW50LmVhdWRpb6Jlb25lT2aCoWVhbnlPZoOhZCRyZWZyc2NoZW1hOkF1ZGlvT2JqZWN0oWQkcmVma3NjaGVtYTpDbGlwoWQkcmVmdXNjaGVtYTpNdXNpY1JlY29yZGluZ6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aDoWQkcmVmcnNjaGVtYTpBdWRpb09iamVjdKFkJHJlZmtzY2hlbWE6Q2xpcKFkJHJlZnVzY2hlbWE6TXVzaWNSZWNvcmRpbmdrZGVzY3JpcHRpb254GUFuIGVtYmVkZGVkIGF1ZGlvIG9iamVjdC5lYXdhcmSiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueCFBbiBhd2FyZCB3b24gYnkgb3IgZm9yIHRoaXMgaXRlbS5lZ2VucmWiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254N0dlbnJlIG9mIHRoZSBjcmVhdGl2ZSB3b3JrLCBicm9hZGNhc3QgY2hhbm5lbCBvciBncm91cC5ldmlkZW+iZW9uZU9mgqFlYW55T2aCoWQkcmVma3NjaGVtYTpDbGlwoWQkcmVmcnNjaGVtYTpWaWRlb09iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVma3NjaGVtYTpDbGlwoWQkcmVmcnNjaGVtYTpWaWRlb09iamVjdGtkZXNjcmlwdGlvbngZQW4gZW1iZWRkZWQgdmlkZW8gb2JqZWN0LmZhdXRob3KiZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb25421RoZSBhdXRob3Igb2YgdGhpcyBjb250ZW50IG9yIHJhdGluZy4gUGxlYXNlIG5vdGUgdGhhdCBhdXRob3IgaXMgc3BlY2lhbCBpbiB0aGF0IEhUTUwgNSBwcm92aWRlcyBhIHNwZWNpYWwgbWVjaGFuaXNtIGZvciBpbmRpY2F0aW5nIGF1dGhvcnNoaXAgdmlhIHRoZSByZWwgdGFnLiBUaGF0IGlzIGVxdWl2YWxlbnQgdG8gdGhpcyBhbmQgbWF5IGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5LmZhd2FyZHOiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueB9Bd2FyZHMgd29uIGJ5IG9yIGZvciB0aGlzIGl0ZW0uZmVkaXRvcqJkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueDFTcGVjaWZpZXMgdGhlIFBlcnNvbiB3aG8gZWRpdGVkIHRoZSBDcmVhdGl2ZVdvcmsuZmZ1bmRlcqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29uomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueGhBIHBlcnNvbiBvciBvcmdhbml6YXRpb24gdGhhdCBzdXBwb3J0cyAoc3BvbnNvcnMpIHNvbWV0aGluZyB0aHJvdWdoIHNvbWUga2luZCBvZiBmaW5hbmNpYWwgY29udHJpYnV0aW9uLmZvZmZlcnOiZW9uZU9mgqFlYW55T2aCoWQkcmVmbXNjaGVtYTpEZW1hbmShZCRyZWZsc2NoZW1hOk9mZmVyomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZtc2NoZW1hOkRlbWFuZKFkJHJlZmxzY2hlbWE6T2ZmZXJrZGVzY3JpcHRpb255AgVBbiBvZmZlciB0byBwcm92aWRlIHRoaXMgaXRlbeKAlGZvciBleGFtcGxlLCBhbiBvZmZlciB0byBzZWxsIGEgcHJvZHVjdCwgcmVudCB0aGUgRFZEIG9mIGEgbW92aWUsIHBlcmZvcm0gYSBzZXJ2aWNlLCBvciBnaXZlIGF3YXkgdGlja2V0cyB0byBhbiBldmVudC4gVXNlIFtbYnVzaW5lc3NGdW5jdGlvbl1dIHRvIGluZGljYXRlIHRoZSBraW5kIG9mIHRyYW5zYWN0aW9uIG9mZmVyZWQsIGkuZS4gc2VsbCwgbGVhc2UsIGV0Yy4gVGhpcyBwcm9wZXJ0eSBjYW4gYWxzbyBiZSB1c2VkIHRvIGRlc2NyaWJlIGEgW1tEZW1hbmRdXS4gV2hpbGUgdGhpcyBwcm9wZXJ0eSBpcyBsaXN0ZWQgYXMgZXhwZWN0ZWQgb24gYSBudW1iZXIgb2YgY29tbW9uIHR5cGVzLCBpdCBjYW4gYmUgdXNlZCBpbiBvdGhlcnMuIEluIHRoYXQgY2FzZSwgdXNpbmcgYSBzZWNvbmQgdHlwZSwgc3VjaCBhcyBQcm9kdWN0IG9yIGEgc3VidHlwZSBvZiBQcm9kdWN0LCBjYW4gY2xhcmlmeSB0aGUgbmF0dXJlIG9mIHRoZSBvZmZlci4KICAgICAgZnJldmlld6Jlb25lT2aCoWQkcmVmbXNjaGVtYTpSZXZpZXeiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOlJldmlld2tkZXNjcmlwdGlvbnVBIHJldmlldyBvZiB0aGUgaXRlbS5nY29tbWVudKJlb25lT2aCoWQkcmVmbnNjaGVtYTpDb21tZW50omR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbnNjaGVtYTpDb21tZW50a2Rlc2NyaXB0aW9ueB9Db21tZW50cywgdHlwaWNhbGx5IGZyb20gdXNlcnMuZ2NyZWF0b3KiZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254YlRoZSBjcmVhdG9yL2F1dGhvciBvZiB0aGlzIENyZWF0aXZlV29yay4gVGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgQXV0aG9yIHByb3BlcnR5IGZvciBDcmVhdGl2ZVdvcmsuZ2V4cGlyZXOjZHR5cGVmc3RyaW5nZmZvcm1hdGRkYXRla2Rlc2NyaXB0aW9ueQEvRGF0ZSB0aGUgY29udGVudCBleHBpcmVzIGFuZCBpcyBubyBsb25nZXIgdXNlZnVsIG9yIGF2YWlsYWJsZS4gRm9yIGV4YW1wbGUgYSBbW1ZpZGVvT2JqZWN0XV0gb3IgW1tOZXdzQXJ0aWNsZV1dIHdob3NlIGF2YWlsYWJpbGl0eSBvciByZWxldmFuY2UgaXMgdGltZS1saW1pdGVkLCBvciBhIFtbQ2xhaW1SZXZpZXddXSBmYWN0IGNoZWNrIHdob3NlIHB1Ymxpc2hlciB3YW50cyB0byBpbmRpY2F0ZSB0aGF0IGl0IG1heSBubyBsb25nZXIgYmUgcmVsZXZhbnQgKG9yIGhlbHBmdWwgdG8gaGlnaGxpZ2h0KSBhZnRlciBzb21lIGRhdGUuZ2hhc1BhcnSiZW9uZU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254XUluZGljYXRlcyBhbiBpdGVtIG9yIENyZWF0aXZlV29yayB0aGF0IGlzIHBhcnQgb2YgdGhpcyBpdGVtLCBvciBDcmVhdGl2ZVdvcmsgKGluIHNvbWUgc2Vuc2UpLmdsaWNlbnNlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnhMQSBsaWNlbnNlIGRvY3VtZW50IHRoYXQgYXBwbGllcyB0byB0aGlzIGNvbnRlbnQsIHR5cGljYWxseSBpbmRpY2F0ZWQgYnkgVVJMLmdwYXR0ZXJuomVvbmVPZoKhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJtomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybWtkZXNjcmlwdGlvbni5QSBwYXR0ZXJuIHRoYXQgc29tZXRoaW5nIGhhcywgZm9yIGV4YW1wbGUgJ3BvbGthIGRvdCcsICdzdHJpcGVkJywgJ0NhbmFkaWFuIGZsYWcnLiBWYWx1ZXMgYXJlIHR5cGljYWxseSBleHByZXNzZWQgYXMgdGV4dCwgYWx0aG91Z2ggbGlua3MgdG8gY29udHJvbGxlZCB2YWx1ZSBzY2hlbWVzIGFyZSBhbHNvIHN1cHBvcnRlZC5ncmV2aWV3c6Jlb25lT2aCoWQkcmVmbXNjaGVtYTpSZXZpZXeiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOlJldmlld2tkZXNjcmlwdGlvbnNSZXZpZXcgb2YgdGhlIGl0ZW0uZ3NwYXRpYWyiZCRyZWZsc2NoZW1hOlBsYWNla2Rlc2NyaXB0aW9ueK9UaGUgInNwYXRpYWwiIHByb3BlcnR5IGNhbiBiZSB1c2VkIGluIGNhc2VzIHdoZW4gbW9yZSBzcGVjaWZpYyBwcm9wZXJ0aWVzCihlLmcuIFtbbG9jYXRpb25DcmVhdGVkXV0sIFtbc3BhdGlhbENvdmVyYWdlXV0sIFtbY29udGVudExvY2F0aW9uXV0pIGFyZSBub3Qga25vd24gdG8gYmUgYXBwcm9wcmlhdGUuZ3Nwb25zb3KiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbniqQSBwZXJzb24gb3Igb3JnYW5pemF0aW9uIHRoYXQgc3VwcG9ydHMgYSB0aGluZyB0aHJvdWdoIGEgcGxlZGdlLCBwcm9taXNlLCBvciBmaW5hbmNpYWwgY29udHJpYnV0aW9uLiBlLmcuIGEgc3BvbnNvciBvZiBhIE1lZGljYWwgU3R1ZHkgb3IgYSBjb3Jwb3JhdGUgc3BvbnNvciBvZiBhbiBldmVudC5ndGVhY2hlc6JlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm1rZGVzY3JpcHRpb254flRoZSBpdGVtIGJlaW5nIGRlc2NyaWJlZCBpcyBpbnRlbmRlZCB0byBoZWxwIGEgcGVyc29uIGxlYXJuIHRoZSBjb21wZXRlbmN5IG9yIGxlYXJuaW5nIG91dGNvbWUgZGVmaW5lZCBieSB0aGUgcmVmZXJlbmNlZCB0ZXJtLmd2ZXJzaW9uomVhbnlPZoKhZHR5cGVmbnVtYmVyoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnhBVGhlIHZlcnNpb24gb2YgdGhlIENyZWF0aXZlV29yayBlbWJvZGllZCBieSBhIHNwZWNpZmllZCByZXNvdXJjZS5oYWJzdHJhY3SiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueEZBbiBhYnN0cmFjdCBpcyBhIHNob3J0IGRlc2NyaXB0aW9uIHRoYXQgc3VtbWFyaXplcyBhIFtbQ3JlYXRpdmVXb3JrXV0uaGFzc2Vzc2VzomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybWtkZXNjcmlwdGlvbnhxVGhlIGl0ZW0gYmVpbmcgZGVzY3JpYmVkIGlzIGludGVuZGVkIHRvIGFzc2VzcyB0aGUgY29tcGV0ZW5jeSBvciBsZWFybmluZyBvdXRjb21lIGRlZmluZWQgYnkgdGhlIHJlZmVyZW5jZWQgdGVybS5oYXVkaWVuY2WiZCRyZWZvc2NoZW1hOkF1ZGllbmNla2Rlc2NyaXB0aW9ueEJBbiBpbnRlbmRlZCBhdWRpZW5jZSwgaS5lLiBhIGdyb3VwIGZvciB3aG9tIHNvbWV0aGluZyB3YXMgY3JlYXRlZC5oY2l0YXRpb26iZW9uZU9mgqFlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254cEEgY2l0YXRpb24gb3IgcmVmZXJlbmNlIHRvIGFub3RoZXIgY3JlYXRpdmUgd29yaywgc3VjaCBhcyBhbm90aGVyIHB1YmxpY2F0aW9uLCB3ZWIgcGFnZSwgc2Nob2xhcmx5IGFydGljbGUsIGV0Yy5oZWRpdEVJRFKiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkCcEFuIFtFSURSXShodHRwczovL2VpZHIub3JnLykgKEVudGVydGFpbm1lbnQgSWRlbnRpZmllciBSZWdpc3RyeSkgW1tpZGVudGlmaWVyXV0gcmVwcmVzZW50aW5nIGEgc3BlY2lmaWMgZWRpdCAvIGVkaXRpb24gZm9yIGEgd29yayBvZiBmaWxtIG9yIHRlbGV2aXNpb24uCgpGb3IgZXhhbXBsZSwgdGhlIG1vdGlvbiBwaWN0dXJlIGtub3duIGFzICJHaG9zdGJ1c3RlcnMiIHdob3NlIFtbdGl0bGVFSURSXV0gaXMgIjEwLjUyNDAvN0VDNy0yMjhBLTUxMEEtMDUzRS1DQkI4LUoiLCBoYXMgc2V2ZXJhbCBlZGl0cyBlLmcuICIxMC41MjQwLzFGMkEtRTFDNS02ODBBLTE0QzYtRTc2Qi1JIiBhbmQgIjEwLjUyNDAvOEEzNS0zQkVFLTY0OTctNUQxMi05RTRGLTMiLgoKU2luY2Ugc2NoZW1hLm9yZyB0eXBlcyBsaWtlIFtbTW92aWVdXSBhbmQgW1tUVkVwaXNvZGVdXSBjYW4gYmUgdXNlZCBmb3IgYm90aCB3b3JrcyBhbmQgdGhlaXIgbXVsdGlwbGUgZXhwcmVzc2lvbnMsIGl0IGlzIHBvc3NpYmxlIHRvIHVzZSBbW3RpdGxlRUlEUl1dIGFsb25lIChmb3IgYSBnZW5lcmFsIGRlc2NyaXB0aW9uKSwgb3IgYWxvbmdzaWRlIFtbZWRpdEVJRFJdXSBmb3IgYSBtb3JlIGVkaXQtc3BlY2lmaWMgZGVzY3JpcHRpb24uCmhlbmNvZGluZ6Jlb25lT2aCoWQkcmVmcnNjaGVtYTpNZWRpYU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZnJzY2hlbWE6TWVkaWFPYmplY3RrZGVzY3JpcHRpb254XkEgbWVkaWEgb2JqZWN0IHRoYXQgZW5jb2RlcyB0aGlzIENyZWF0aXZlV29yay4gVGhpcyBwcm9wZXJ0eSBpcyBhIHN5bm9ueW0gZm9yIGFzc29jaWF0ZWRNZWRpYS5oaGVhZGxpbmWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueBhIZWFkbGluZSBvZiB0aGUgYXJ0aWNsZS5oaXNQYXJ0T2aiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueF5JbmRpY2F0ZXMgYW4gaXRlbSBvciBDcmVhdGl2ZVdvcmsgdGhhdCB0aGlzIGl0ZW0sIG9yIENyZWF0aXZlV29yayAoaW4gc29tZSBzZW5zZSksIGlzIHBhcnQgb2YuaGtleXdvcmRzomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybWtkZXNjcmlwdGlvbnh2S2V5d29yZHMgb3IgdGFncyB1c2VkIHRvIGRlc2NyaWJlIHRoaXMgY29udGVudC4gTXVsdGlwbGUgZW50cmllcyBpbiBhIGtleXdvcmRzIGxpc3QgYXJlIHR5cGljYWxseSBkZWxpbWl0ZWQgYnkgY29tbWFzLmhtYXRlcmlhbKJlb25lT2aCoWVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmbnNjaGVtYTpQcm9kdWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmbnNjaGVtYTpQcm9kdWN0a2Rlc2NyaXB0aW9ueEpBIG1hdGVyaWFsIHRoYXQgc29tZXRoaW5nIGlzIG1hZGUgZnJvbSwgZS5nLiBsZWF0aGVyLCB3b29sLCBjb3R0b24sIHBhcGVyLmhtZW50aW9uc6Jlb25lT2aCoWQkcmVmbHNjaGVtYTpUaGluZ6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZmxzY2hlbWE6VGhpbmdrZGVzY3JpcHRpb254YEluZGljYXRlcyB0aGF0IHRoZSBDcmVhdGl2ZVdvcmsgY29udGFpbnMgYSByZWZlcmVuY2UgdG8sIGJ1dCBpcyBub3QgbmVjZXNzYXJpbHkgYWJvdXQgYSBjb25jZXB0Lmhwb3NpdGlvbqJlYW55T2aCoWR0eXBlZ2ludGVnZXKhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueDlUaGUgcG9zaXRpb24gb2YgYW4gaXRlbSBpbiBhIHNlcmllcyBvciBzZXF1ZW5jZSBvZiBpdGVtcy5ocHJvZHVjZXKiZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254YVRoZSBwZXJzb24gb3Igb3JnYW5pemF0aW9uIHdobyBwcm9kdWNlZCB0aGUgd29yayAoZS5nLiBtdXNpYyBhbGJ1bSwgbW92aWUsIHR2L3JhZGlvIHNlcmllcyBldGMuKS5ocHJvdmlkZXKiZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb2540FRoZSBzZXJ2aWNlIHByb3ZpZGVyLCBzZXJ2aWNlIG9wZXJhdG9yLCBvciBzZXJ2aWNlIHBlcmZvcm1lcjsgdGhlIGdvb2RzIHByb2R1Y2VyLiBBbm90aGVyIHBhcnR5IChhIHNlbGxlcikgbWF5IG9mZmVyIHRob3NlIHNlcnZpY2VzIG9yIGdvb2RzIG9uIGJlaGFsZiBvZiB0aGUgcHJvdmlkZXIuIEEgcHJvdmlkZXIgbWF5IGFsc28gc2VydmUgYXMgdGhlIHNlbGxlci5odGVtcG9yYWyiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0aWRhdGUtdGltZaFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254vlRoZSAidGVtcG9yYWwiIHByb3BlcnR5IGNhbiBiZSB1c2VkIGluIGNhc2VzIHdoZXJlIG1vcmUgc3BlY2lmaWMgcHJvcGVydGllcwooZS5nLiBbW3RlbXBvcmFsQ292ZXJhZ2VdXSwgW1tkYXRlQ3JlYXRlZF1dLCBbW2RhdGVNb2RpZmllZF1dLCBbW2RhdGVQdWJsaXNoZWRdXSkgYXJlIG5vdCBrbm93biB0byBiZSBhcHByb3ByaWF0ZS5pY2hhcmFjdGVyomVvbmVPZoKhZCRyZWZtc2NoZW1hOlBlcnNvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueDBGaWN0aW9uYWwgcGVyc29uIGNvbm5lY3RlZCB3aXRoIGEgY3JlYXRpdmUgd29yay5pZW5jb2RpbmdzomVvbmVPZoKhZCRyZWZyc2NoZW1hOk1lZGlhT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmcnNjaGVtYTpNZWRpYU9iamVjdGtkZXNjcmlwdGlvbnguQSBtZWRpYSBvYmplY3QgdGhhdCBlbmNvZGVzIHRoaXMgQ3JlYXRpdmVXb3JrLmlpc0Jhc2VkT26iZW9uZU9mgqFlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZuc2NoZW1hOlByb2R1Y3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbnNjaGVtYTpQcm9kdWN0a2Rlc2NyaXB0aW9ueFpBIHJlc291cmNlIGZyb20gd2hpY2ggdGhpcyB3b3JrIGlzIGRlcml2ZWQgb3IgZnJvbSB3aGljaCBpdCBpcyBhIG1vZGlmaWNhdGlvbiBvciBhZGFwdGlvbi5pcHVibGlzaGVyomVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueCNUaGUgcHVibGlzaGVyIG9mIHRoZSBjcmVhdGl2ZSB3b3JrLmlzZExpY2Vuc2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueFRBIGxpY2Vuc2UgZG9jdW1lbnQgdGhhdCBhcHBsaWVzIHRvIHRoaXMgc3RydWN0dXJlZCBkYXRhLCB0eXBpY2FsbHkgaW5kaWNhdGVkIGJ5IFVSTC5pdXNhZ2VJbmZvomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnkDN1RoZSBzY2hlbWEub3JnIFtbdXNhZ2VJbmZvXV0gcHJvcGVydHkgaW5kaWNhdGVzIGZ1cnRoZXIgaW5mb3JtYXRpb24gYWJvdXQgYSBbW0NyZWF0aXZlV29ya11dLiBUaGlzIHByb3BlcnR5IGlzIGFwcGxpY2FibGUgYm90aCB0byB3b3JrcyB0aGF0IGFyZSBmcmVlbHkgYXZhaWxhYmxlIGFuZCB0byB0aG9zZSB0aGF0IHJlcXVpcmUgcGF5bWVudCBvciBvdGhlciB0cmFuc2FjdGlvbnMuIEl0IGNhbiByZWZlcmVuY2UgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBlLmcuIGNvbW11bml0eSBleHBlY3RhdGlvbnMgb24gcHJlZmVycmVkIGxpbmtpbmcgYW5kIGNpdGF0aW9uIGNvbnZlbnRpb25zLCBhcyB3ZWxsIGFzIHB1cmNoYXNpbmcgZGV0YWlscy4gRm9yIHNvbWV0aGluZyB0aGF0IGNhbiBiZSBjb21tZXJjaWFsbHkgbGljZW5zZWQsIHVzYWdlSW5mbyBjYW4gcHJvdmlkZSBkZXRhaWxlZCwgcmVzb3VyY2Utc3BlY2lmaWMgaW5mb3JtYXRpb24gYWJvdXQgbGljZW5zaW5nIG9wdGlvbnMuCgpUaGlzIHByb3BlcnR5IGNhbiBiZSB1c2VkIGFsb25nc2lkZSB0aGUgbGljZW5zZSBwcm9wZXJ0eSB3aGljaCBpbmRpY2F0ZXMgbGljZW5zZShzKSBhcHBsaWNhYmxlIHRvIHNvbWUgcGllY2Ugb2YgY29udGVudC4gVGhlIHVzYWdlSW5mbyBwcm9wZXJ0eSBjYW4gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCBvdGhlciBsaWNlbnNpbmcgb3B0aW9ucywgZS5nLiBhY3F1aXJpbmcgY29tbWVyY2lhbCB1c2FnZSByaWdodHMgZm9yIGFuIGltYWdlIHRoYXQgaXMgYWxzbyBhdmFpbGFibGUgdW5kZXIgbm9uLWNvbW1lcmNpYWwgY3JlYXRpdmUgY29tbW9ucyBsaWNlbnNlcy5qYWNjZXNzTW9kZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255ASFUaGUgaHVtYW4gc2Vuc29yeSBwZXJjZXB0dWFsIHN5c3RlbSBvciBjb2duaXRpdmUgZmFjdWx0eSB0aHJvdWdoIHdoaWNoIGEgcGVyc29uIG1heSBwcm9jZXNzIG9yIHBlcmNlaXZlIGluZm9ybWF0aW9uLiBFeHBlY3RlZCB2YWx1ZXMgaW5jbHVkZTogYXVkaXRvcnksIHRhY3RpbGUsIHRleHR1YWwsIHZpc3VhbCwgY29sb3JEZXBlbmRlbnQsIGNoYXJ0T25WaXN1YWwsIGNoZW1PblZpc3VhbCwgZGlhZ3JhbU9uVmlzdWFsLCBtYXRoT25WaXN1YWwsIG11c2ljT25WaXN1YWwsIHRleHRPblZpc3VhbC4KICAgICAgamFyY2hpdmVkQXSiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmbnNjaGVtYTpXZWJQYWdlomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZuc2NoZW1hOldlYlBhZ2VrZGVzY3JpcHRpb255AUxJbmRpY2F0ZXMgYSBwYWdlIG9yIG90aGVyIGxpbmsgaW52b2x2ZWQgaW4gYXJjaGl2YWwgb2YgYSBbW0NyZWF0aXZlV29ya11dLiBJbiB0aGUgY2FzZSBvZiBbW01lZGlhUmV2aWV3XV0sIHRoZSBpdGVtcyBpbiBhIFtbTWVkaWFSZXZpZXdJdGVtXV0gbWF5IG9mdGVuIGJlY29tZSBpbmFjY2Vzc2libGUsIGJ1dCBiZSBhcmNoaXZlZCBieSBhcmNoaXZhbCwgam91cm5hbGlzdGljLCBhY3RpdmlzdCwgb3IgbGF3IGVuZm9yY2VtZW50IG9yZ2FuaXphdGlvbnMuIEluIHN1Y2ggY2FzZXMsIHRoZSByZWZlcmVuY2VkIHBhZ2UgbWF5IG5vdCBkaXJlY3RseSBwdWJsaXNoIHRoZSBjb250ZW50Lmpjb3JyZWN0aW9uomVvbmVPZoKhZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ4GHNjaGVtYTpDb3JyZWN0aW9uQ29tbWVudKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZngYc2NoZW1hOkNvcnJlY3Rpb25Db21tZW50a2Rlc2NyaXB0aW9ueHNJbmRpY2F0ZXMgYSBjb3JyZWN0aW9uIHRvIGEgW1tDcmVhdGl2ZVdvcmtdXSwgZWl0aGVyIHZpYSBhIFtbQ29ycmVjdGlvbkNvbW1lbnRdXSwgdGV4dHVhbGx5IG9yIGluIGFub3RoZXIgZG9jdW1lbnQuamNyZWRpdFRleHSiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueGtUZXh0IHRoYXQgY2FuIGJlIHVzZWQgdG8gY3JlZGl0IHBlcnNvbihzKSBhbmQvb3Igb3JnYW5pemF0aW9uKHMpIGFzc29jaWF0ZWQgd2l0aCBhIHB1Ymxpc2hlZCBDcmVhdGl2ZSBXb3JrLmpmaWxlRm9ybWF0omVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueQHlTWVkaWEgdHlwZSwgdHlwaWNhbGx5IE1JTUUgZm9ybWF0IChzZWUgW0lBTkEgc2l0ZV0oaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9tZWRpYS10eXBlcy9tZWRpYS10eXBlcy54aHRtbCkpIG9mIHRoZSBjb250ZW50IGUuZy4gYXBwbGljYXRpb24vemlwIG9mIGEgU29mdHdhcmVBcHBsaWNhdGlvbiBiaW5hcnkuIEluIGNhc2VzIHdoZXJlIGEgQ3JlYXRpdmVXb3JrIGhhcyBzZXZlcmFsIG1lZGlhIHR5cGUgcmVwcmVzZW50YXRpb25zLCAnZW5jb2RpbmcnIGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIGVhY2ggTWVkaWFPYmplY3QgYWxvbmdzaWRlIHBhcnRpY3VsYXIgZmlsZUZvcm1hdCBpbmZvcm1hdGlvbi4gVW5yZWdpc3RlcmVkIG9yIG5pY2hlIGZpbGUgZm9ybWF0cyBjYW4gYmUgaW5kaWNhdGVkIGluc3RlYWQgdmlhIHRoZSBtb3N0IGFwcHJvcHJpYXRlIFVSTCwgZS5nLiBkZWZpbmluZyBXZWIgcGFnZSBvciBhIFdpa2lwZWRpYSBlbnRyeS5qaW5MYW5ndWFnZaJlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZm9zY2hlbWE6TGFuZ3VhZ2VrZGVzY3JpcHRpb254yFRoZSBsYW5ndWFnZSBvZiB0aGUgY29udGVudCBvciBwZXJmb3JtYW5jZSBvciB1c2VkIGluIGFuIGFjdGlvbi4gUGxlYXNlIHVzZSBvbmUgb2YgdGhlIGxhbmd1YWdlIGNvZGVzIGZyb20gdGhlIFtJRVRGIEJDUCA0NyBzdGFuZGFyZF0oaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvYmNwNDcpLiBTZWUgYWxzbyBbW2F2YWlsYWJsZUxhbmd1YWdlXV0uam1haW5FbnRpdHmiZW9uZU9mgqFkJHJlZmxzY2hlbWE6VGhpbmeiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZsc2NoZW1hOlRoaW5na2Rlc2NyaXB0aW9ueEpJbmRpY2F0ZXMgdGhlIHByaW1hcnkgZW50aXR5IGRlc2NyaWJlZCBpbiBzb21lIHBhZ2Ugb3Igb3RoZXIgQ3JlYXRpdmVXb3JrLmptYWludGFpbmVyomVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb26iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb255A1xBIG1haW50YWluZXIgb2YgYSBbW0RhdGFzZXRdXSwgc29mdHdhcmUgcGFja2FnZSAoW1tTb2Z0d2FyZUFwcGxpY2F0aW9uXV0pLCBvciBvdGhlciBbW1Byb2plY3RdXS4gQSBtYWludGFpbmVyIGlzIGEgW1tQZXJzb25dXSBvciBbW09yZ2FuaXphdGlvbl1dIHRoYXQgbWFuYWdlcyBjb250cmlidXRpb25zIHRvLCBhbmQvb3IgcHVibGljYXRpb24gb2YsIHNvbWUgKHR5cGljYWxseSBjb21wbGV4KSBhcnRpZmFjdC4gSXQgaXMgY29tbW9uIGZvciBkaXN0cmlidXRpb25zIG9mIHNvZnR3YXJlIGFuZCBkYXRhIHRvIGJlIGJhc2VkIG9uICJ1cHN0cmVhbSIgc291cmNlcy4gV2hlbiBbW21haW50YWluZXJdXSBpcyBhcHBsaWVkIHRvIGEgc3BlY2lmaWMgdmVyc2lvbiBvZiBzb21ldGhpbmcgZS5nLiBhIHBhcnRpY3VsYXIgdmVyc2lvbiBvciBwYWNrYWdpbmcgb2YgYSBbW0RhdGFzZXRdXSwgaXQgaXMgYWx3YXlzICBwb3NzaWJsZSB0aGF0IHRoZSB1cHN0cmVhbSBzb3VyY2UgaGFzIGEgZGlmZmVyZW50IG1haW50YWluZXIuIFRoZSBbW2lzQmFzZWRPbl1dIHByb3BlcnR5IGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIHN1Y2ggcmVsYXRpb25zaGlwcyBiZXR3ZWVuIGRhdGFzZXRzIHRvIG1ha2UgdGhlIGRpZmZlcmVudCBtYWludGVuYW5jZSByb2xlcyBjbGVhci4gU2ltaWxhcmx5IGluIHRoZSBjYXNlIG9mIHNvZnR3YXJlLCBhIHBhY2thZ2UgbWF5IGhhdmUgZGVkaWNhdGVkIG1haW50YWluZXJzIHdvcmtpbmcgb24gaW50ZWdyYXRpb24gaW50byBzb2Z0d2FyZSBkaXN0cmlidXRpb25zIHN1Y2ggYXMgVWJ1bnR1LCBhcyB3ZWxsIGFzIHVwc3RyZWFtIG1haW50YWluZXJzIG9mIHRoZSB1bmRlcmx5aW5nIHdvcmsuCiAgICAgIGpyZWNvcmRlZEF0omQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbnhlVGhlIEV2ZW50IHdoZXJlIHRoZSBDcmVhdGl2ZVdvcmsgd2FzIHJlY29yZGVkLiBUaGUgQ3JlYXRpdmVXb3JrIG1heSBjYXB0dXJlIGFsbCBvciBwYXJ0IG9mIHRoZSBldmVudC5qdHJhbnNsYXRvcqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29uomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueLNPcmdhbml6YXRpb24gb3IgcGVyc29uIHdobyBhZGFwdHMgYSBjcmVhdGl2ZSB3b3JrIHRvIGRpZmZlcmVudCBsYW5ndWFnZXMsIHJlZ2lvbmFsIGRpZmZlcmVuY2VzIGFuZCB0ZWNobmljYWwgcmVxdWlyZW1lbnRzIG9mIGEgdGFyZ2V0IG1hcmtldCwgb3IgdGhhdCB0cmFuc2xhdGVzIGR1cmluZyBzb21lIGV2ZW50Lmtjb250cmlidXRvcqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29uomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueDVBIHNlY29uZGFyeSBjb250cmlidXRvciB0byB0aGUgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50LmtkYXRlQ3JlYXRlZKJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZaJkdHlwZWZzdHJpbmdmZm9ybWF0aWRhdGUtdGltZWtkZXNjcmlwdGlvbnhTVGhlIGRhdGUgb24gd2hpY2ggdGhlIENyZWF0aXZlV29yayB3YXMgY3JlYXRlZCBvciB0aGUgaXRlbSB3YXMgYWRkZWQgdG8gYSBEYXRhRmVlZC5rcHVibGljYXRpb26iZW9uZU9mgqFkJHJlZndzY2hlbWE6UHVibGljYXRpb25FdmVudKJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZndzY2hlbWE6UHVibGljYXRpb25FdmVudGtkZXNjcmlwdGlvbngtQSBwdWJsaWNhdGlvbiBldmVudCBhc3NvY2lhdGVkIHdpdGggdGhlIGl0ZW0ua3NkUHVibGlzaGVyomVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb26iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb255AbRJbmRpY2F0ZXMgdGhlIHBhcnR5IHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIGFuZCBwdWJsaXNoaW5nIHRoZSBjdXJyZW50IHN0cnVjdHVyZWQgZGF0YSBtYXJrdXAsIHR5cGljYWxseSBpbiBjYXNlcyB3aGVyZSB0aGUgc3RydWN0dXJlZCBkYXRhIGlzIGRlcml2ZWQgYXV0b21hdGljYWxseSBmcm9tIGV4aXN0aW5nIHB1Ymxpc2hlZCBjb250ZW50IGJ1dCBwdWJsaXNoZWQgb24gYSBkaWZmZXJlbnQgc2l0ZS4gRm9yIGV4YW1wbGUsIHN0dWRlbnQgcHJvamVjdHMgYW5kIG9wZW4gZGF0YSBpbml0aWF0aXZlcyBvZnRlbiByZS1wdWJsaXNoIGV4aXN0aW5nIGNvbnRlbnQgd2l0aCBtb3JlIGV4cGxpY2l0bHkgc3RydWN0dXJlZCBtZXRhZGF0YS4gVGhlCltbc2RQdWJsaXNoZXJdXSBwcm9wZXJ0eSBoZWxwcyBtYWtlIHN1Y2ggcHJhY3RpY2VzIG1vcmUgZXhwbGljaXQua3dvcmtFeGFtcGxlomVvbmVPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueIFFeGFtcGxlL2luc3RhbmNlL3JlYWxpemF0aW9uL2Rlcml2YXRpb24gb2YgdGhlIGNvbmNlcHQgb2YgdGhpcyBjcmVhdGl2ZSB3b3JrLiBlZy4gVGhlIHBhcGVyYmFjayBlZGl0aW9uLCBmaXJzdCBlZGl0aW9uLCBvciBlQm9vay5sY29tbWVudENvdW50omR0eXBlZ2ludGVnZXJrZGVzY3JpcHRpb2540lRoZSBudW1iZXIgb2YgY29tbWVudHMgdGhpcyBDcmVhdGl2ZVdvcmsgKGUuZy4gQXJ0aWNsZSwgUXVlc3Rpb24gb3IgQW5zd2VyKSBoYXMgcmVjZWl2ZWQuIFRoaXMgaXMgbW9zdCBhcHBsaWNhYmxlIHRvIHdvcmtzIHB1Ymxpc2hlZCBpbiBXZWIgc2l0ZXMgd2l0aCBjb21tZW50aW5nIHN5c3RlbTsgYWRkaXRpb25hbCBjb21tZW50cyBtYXkgZXhpc3QgZWxzZXdoZXJlLmxkYXRlTW9kaWZpZWSiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGWiZHR5cGVmc3RyaW5nZmZvcm1hdGlkYXRlLXRpbWVrZGVzY3JpcHRpb254dlRoZSBkYXRlIG9uIHdoaWNoIHRoZSBDcmVhdGl2ZVdvcmsgd2FzIG1vc3QgcmVjZW50bHkgbW9kaWZpZWQgb3Igd2hlbiB0aGUgaXRlbSdzIGVudHJ5IHdhcyBtb2RpZmllZCB3aXRoaW4gYSBEYXRhRmVlZC5saXNCYXNlZE9uVXJsomVvbmVPZoKhZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbnNjaGVtYTpQcm9kdWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZm5zY2hlbWE6UHJvZHVjdGtkZXNjcmlwdGlvbnirQSByZXNvdXJjZSB0aGF0IHdhcyB1c2VkIGluIHRoZSBjcmVhdGlvbiBvZiB0aGlzIHJlc291cmNlLiBUaGlzIHRlcm0gY2FuIGJlIHJlcGVhdGVkIGZvciBtdWx0aXBsZSBzb3VyY2VzLiBGb3IgZXhhbXBsZSwgaHR0cDovL2V4YW1wbGUuY29tL2dyZWF0LW11bHRpcGxpY2F0aW9uLWludHJvLmh0bWwubHRodW1ibmFpbFVybKJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueChBIHRodW1ibmFpbCBpbWFnZSByZWxldmFudCB0byB0aGUgVGhpbmcubHRpbWVSZXF1aXJlZKNkdHlwZWZzdHJpbmdoJGNvbW1lbnR4G2h0dHBzOi8vc2NoZW1hLm9yZy9EdXJhdGlvbmtkZXNjcmlwdGlvbniWQXBwcm94aW1hdGUgb3IgdHlwaWNhbCB0aW1lIGl0IHRha2VzIHRvIHdvcmsgd2l0aCBvciB0aHJvdWdoIHRoaXMgbGVhcm5pbmcgcmVzb3VyY2UgZm9yIHRoZSB0eXBpY2FsIGludGVuZGVkIHRhcmdldCBhdWRpZW5jZSwgZS5nLiAnUFQzME0nLCAnUFQxSDI1TScubWNvbnRlbnRSYXRpbmeiZW9uZU9mgqFlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZm1zY2hlbWE6UmF0aW5nomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmbXNjaGVtYTpSYXRpbmdrZGVzY3JpcHRpb254QU9mZmljaWFsIHJhdGluZyBvZiBhIHBpZWNlIG9mIGNvbnRlbnTigJRmb3IgZXhhbXBsZSwnTVBBQSBQRy0xMycubWNvcHlyaWdodFllYXKiZHR5cGVmbnVtYmVya2Rlc2NyaXB0aW9ueFRUaGUgeWVhciBkdXJpbmcgd2hpY2ggdGhlIGNsYWltZWQgY29weXJpZ2h0IGZvciB0aGUgQ3JlYXRpdmVXb3JrIHdhcyBmaXJzdCBhc3NlcnRlZC5tZGF0ZVB1Ymxpc2hlZKJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZaJkdHlwZWZzdHJpbmdmZm9ybWF0aWRhdGUtdGltZWtkZXNjcmlwdGlvbngkRGF0ZSBvZiBmaXJzdCBicm9hZGNhc3QvcHVibGljYXRpb24ubWRpc2N1c3Npb25VcmyiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbng/QSBsaW5rIHRvIHRoZSBwYWdlIGNvbnRhaW5pbmcgdGhlIGNvbW1lbnRzIG9mIHRoZSBDcmVhdGl2ZVdvcmsubWV4YW1wbGVPZldvcmuiZW9uZU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254UEEgY3JlYXRpdmUgd29yayB0aGF0IHRoaXMgd29yayBpcyBhbiBleGFtcGxlL2luc3RhbmNlL3JlYWxpemF0aW9uL2Rlcml2YXRpb24gb2YubXJlbGVhc2VkRXZlbnSiZCRyZWZ3c2NoZW1hOlB1YmxpY2F0aW9uRXZlbnRrZGVzY3JpcHRpb254S1RoZSBwbGFjZSBhbmQgdGltZSB0aGUgcmVsZWFzZSB3YXMgaXNzdWVkLCBleHByZXNzZWQgYXMgYSBQdWJsaWNhdGlvbkV2ZW50Lm1zY2hlbWFWZXJzaW9uomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255AgdJbmRpY2F0ZXMgKGJ5IFVSTCBvciBzdHJpbmcpIGEgcGFydGljdWxhciB2ZXJzaW9uIG9mIGEgc2NoZW1hIHVzZWQgaW4gc29tZSBDcmVhdGl2ZVdvcmsuIFRoaXMgcHJvcGVydHkgd2FzIGNyZWF0ZWQgcHJpbWFyaWx5IHRvCiAgICBpbmRpY2F0ZSB0aGUgdXNlIG9mIGEgc3BlY2lmaWMgc2NoZW1hLm9yZyByZWxlYXNlLCBlLmcuIGBgYDEwLjBgYGAgYXMgYSBzaW1wbGUgc3RyaW5nLCBvciBtb3JlIGV4cGxpY2l0bHkgdmlhIFVSTCwgYGBgaHR0cHM6Ly9zY2hlbWEub3JnL2RvY3MvcmVsZWFzZXMuaHRtbCN2MTAuMGBgYC4gVGhlcmUgbWF5IGJlIHNpdHVhdGlvbnMgaW4gd2hpY2ggb3RoZXIgc2NoZW1hcyBtaWdodCB1c2VmdWxseSBiZSByZWZlcmVuY2VkIHRoaXMgd2F5LCBlLmcuIGBgYGh0dHA6Ly9kdWJsaW5jb3JlLm9yZy9zcGVjaWZpY2F0aW9ucy9kdWJsaW4tY29yZS9kY2VzLzE5OTktMDctMDIvYGBgIGJ1dCB0aGlzIGhhcyBub3QgYmVlbiBjYXJlZnVsbHkgZXhwbG9yZWQgaW4gdGhlIGNvbW11bml0eS5uZWR1Y2F0aW9uYWxVc2WiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueFtUaGUgcHVycG9zZSBvZiBhIHdvcmsgaW4gdGhlIGNvbnRleHQgb2YgZWR1Y2F0aW9uOyBmb3IgZXhhbXBsZSwgJ2Fzc2lnbm1lbnQnLCAnZ3JvdXAgd29yaycubmVuY29kaW5nRm9ybWF0omVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueQKOTWVkaWEgdHlwZSB0eXBpY2FsbHkgZXhwcmVzc2VkIHVzaW5nIGEgTUlNRSBmb3JtYXQgKHNlZSBbSUFOQSBzaXRlXShodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL21lZGlhLXR5cGVzL21lZGlhLXR5cGVzLnhodG1sKSBhbmQgW01ETiByZWZlcmVuY2VdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvQmFzaWNzX29mX0hUVFAvTUlNRV90eXBlcykpIGUuZy4gYXBwbGljYXRpb24vemlwIGZvciBhIFNvZnR3YXJlQXBwbGljYXRpb24gYmluYXJ5LCBhdWRpby9tcGVnIGZvciAubXAzIGV0Yy4pLgoKSW4gY2FzZXMgd2hlcmUgYSBbW0NyZWF0aXZlV29ya11dIGhhcyBzZXZlcmFsIG1lZGlhIHR5cGUgcmVwcmVzZW50YXRpb25zLCBbW2VuY29kaW5nXV0gY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgZWFjaCBbW01lZGlhT2JqZWN0XV0gYWxvbmdzaWRlIHBhcnRpY3VsYXIgW1tlbmNvZGluZ0Zvcm1hdF1dIGluZm9ybWF0aW9uLgoKVW5yZWdpc3RlcmVkIG9yIG5pY2hlIGVuY29kaW5nIGFuZCBmaWxlIGZvcm1hdHMgY2FuIGJlIGluZGljYXRlZCBpbnN0ZWFkIHZpYSB0aGUgbW9zdCBhcHByb3ByaWF0ZSBVUkwsIGUuZy4gZGVmaW5pbmcgV2ViIHBhZ2Ugb3IgYSBXaWtpcGVkaWEvV2lraWRhdGEgZW50cnkub1tvYmplY3QgT2JqZWN0XaJlb25lT2aCoWVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmeBhzY2hlbWE6UXVhbnRpdGF0aXZlVmFsdWWiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZ4GHNjaGVtYTpRdWFudGl0YXRpdmVWYWx1ZWtkZXNjcmlwdGlvbmBvYWdncmVnYXRlUmF0aW5nomQkcmVmdnNjaGVtYTpBZ2dyZWdhdGVSYXRpbmdrZGVzY3JpcHRpb254TVRoZSBvdmVyYWxsIHJhdGluZywgYmFzZWQgb24gYSBjb2xsZWN0aW9uIG9mIHJldmlld3Mgb3IgcmF0aW5ncywgb2YgdGhlIGl0ZW0ub2Fzc29jaWF0ZWRNZWRpYaJkJHJlZnJzY2hlbWE6TWVkaWFPYmplY3RrZGVzY3JpcHRpb254V0EgbWVkaWEgb2JqZWN0IHRoYXQgZW5jb2RlcyB0aGlzIENyZWF0aXZlV29yay4gVGhpcyBwcm9wZXJ0eSBpcyBhIHN5bm9ueW0gZm9yIGVuY29kaW5nLm9jb250ZW50TG9jYXRpb26iZCRyZWZsc2NoZW1hOlBsYWNla2Rlc2NyaXB0aW9ueGlUaGUgbG9jYXRpb24gZGVwaWN0ZWQgb3IgZGVzY3JpYmVkIGluIHRoZSBjb250ZW50LiBGb3IgZXhhbXBsZSwgdGhlIGxvY2F0aW9uIGluIGEgcGhvdG9ncmFwaCBvciBwYWludGluZy5vY29weXJpZ2h0SG9sZGVyomVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueDpUaGUgcGFydHkgaG9sZGluZyB0aGUgbGVnYWwgY29weXJpZ2h0IHRvIHRoZSBDcmVhdGl2ZVdvcmsub2NvcHlyaWdodE5vdGljZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254lFRleHQgb2YgYSBub3RpY2UgYXBwcm9wcmlhdGUgZm9yIGRlc2NyaWJpbmcgdGhlIGNvcHlyaWdodCBhc3BlY3RzIG9mIHRoaXMgQ3JlYXRpdmUgV29yaywgaWRlYWxseSBpbmRpY2F0aW5nIHRoZSBvd25lciBvZiB0aGUgY29weXJpZ2h0IGZvciB0aGUgV29yay5vY291bnRyeU9mT3JpZ2luomQkcmVmbnNjaGVtYTpDb3VudHJ5a2Rlc2NyaXB0aW9ueQJhVGhlIGNvdW50cnkgb2Ygb3JpZ2luIG9mIHNvbWV0aGluZywgaW5jbHVkaW5nIHByb2R1Y3RzIGFzIHdlbGwgYXMgY3JlYXRpdmUgIHdvcmtzIHN1Y2ggYXMgbW92aWUgYW5kIFRWIGNvbnRlbnQuCgpJbiB0aGUgY2FzZSBvZiBUViBhbmQgbW92aWUsIHRoaXMgd291bGQgYmUgdGhlIGNvdW50cnkgb2YgdGhlIHByaW5jaXBsZSBvZmZpY2VzIG9mIHRoZSBwcm9kdWN0aW9uIGNvbXBhbnkgb3IgaW5kaXZpZHVhbCByZXNwb25zaWJsZSBmb3IgdGhlIG1vdmllLiBGb3Igb3RoZXIga2luZHMgb2YgW1tDcmVhdGl2ZVdvcmtdXSBpdCBpcyBkaWZmaWN1bHQgdG8gcHJvdmlkZSBmdWxseSBnZW5lcmFsIGd1aWRhbmNlLCBhbmQgcHJvcGVydGllcyBzdWNoIGFzIFtbY29udGVudExvY2F0aW9uXV0gYW5kIFtbbG9jYXRpb25DcmVhdGVkXV0gbWF5IGJlIG1vcmUgYXBwbGljYWJsZS4KCkluIHRoZSBjYXNlIG9mIHByb2R1Y3RzLCB0aGUgY291bnRyeSBvZiBvcmlnaW4gb2YgdGhlIHByb2R1Y3QuIFRoZSBleGFjdCBpbnRlcnByZXRhdGlvbiBvZiB0aGlzIG1heSB2YXJ5IGJ5IGNvbnRleHQgYW5kIHByb2R1Y3QgdHlwZSwgYW5kIGNhbm5vdCBiZSBmdWxseSBlbnVtZXJhdGVkIGhlcmUub2xvY2F0aW9uQ3JlYXRlZKJkJHJlZmxzY2hlbWE6UGxhY2VrZGVzY3JpcHRpb254eFRoZSBsb2NhdGlvbiB3aGVyZSB0aGUgQ3JlYXRpdmVXb3JrIHdhcyBjcmVhdGVkLCB3aGljaCBtYXkgbm90IGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhdGlvbiBkZXBpY3RlZCBpbiB0aGUgQ3JlYXRpdmVXb3JrLm9zZERhdGVQdWJsaXNoZWSiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGWiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGRkYXRla2Rlc2NyaXB0aW9ueHtJbmRpY2F0ZXMgdGhlIGRhdGUgb24gd2hpY2ggdGhlIGN1cnJlbnQgc3RydWN0dXJlZCBkYXRhIHdhcyBnZW5lcmF0ZWQgLyBwdWJsaXNoZWQuIFR5cGljYWxseSB1c2VkIGFsb25nc2lkZSBbW3NkUHVibGlzaGVyXV1vc3BhdGlhbENvdmVyYWdlomQkcmVmbHNjaGVtYTpQbGFjZWtkZXNjcmlwdGlvbnkBgVRoZSBzcGF0aWFsQ292ZXJhZ2Ugb2YgYSBDcmVhdGl2ZVdvcmsgaW5kaWNhdGVzIHRoZSBwbGFjZShzKSB3aGljaCBhcmUgdGhlIGZvY3VzIG9mIHRoZSBjb250ZW50LiBJdCBpcyBhIHN1YnByb3BlcnR5IG9mCiAgICAgIGNvbnRlbnRMb2NhdGlvbiBpbnRlbmRlZCBwcmltYXJpbHkgZm9yIG1vcmUgdGVjaG5pY2FsIGFuZCBkZXRhaWxlZCBtYXRlcmlhbHMuIEZvciBleGFtcGxlIHdpdGggYSBEYXRhc2V0LCBpdCBpbmRpY2F0ZXMKICAgICAgYXJlYXMgdGhhdCB0aGUgZGF0YXNldCBkZXNjcmliZXM6IGEgZGF0YXNldCBvZiBOZXcgWW9yayB3ZWF0aGVyIHdvdWxkIGhhdmUgc3BhdGlhbENvdmVyYWdlIHdoaWNoIHdhcyB0aGUgcGxhY2U6IHRoZSBzdGF0ZSBvZiBOZXcgWW9yay5vdHlwaWNhbEFnZVJhbmdlomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngyVGhlIHR5cGljYWwgZXhwZWN0ZWQgYWdlIHJhbmdlLCBlLmcuICc3LTknLCAnMTEtJy5vd29ya1RyYW5zbGF0aW9uomVvbmVPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueOxBIHdvcmsgdGhhdCBpcyBhIHRyYW5zbGF0aW9uIG9mIHRoZSBjb250ZW50IG9mIHRoaXMgd29yay4gZS5nLiDopb/pgYroqJggaGFzIGFuIEVuZ2xpc2ggd29ya1RyYW5zbGF0aW9uIOKAnEpvdXJuZXkgdG8gdGhlIFdlc3TigJ0sYSBHZXJtYW4gd29ya1RyYW5zbGF0aW9uIOKAnE1vbmtleXMgUGlsZ2VyZmFocnTigJ0gYW5kIGEgVmlldG5hbWVzZSAgdHJhbnNsYXRpb24gVMOieSBkdSBrw70gYsOsbmgga2jhuqNvLnBhY2Nlc3NpYmlsaXR5QVBJomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnirSW5kaWNhdGVzIHRoYXQgdGhlIHJlc291cmNlIGlzIGNvbXBhdGlibGUgd2l0aCB0aGUgcmVmZXJlbmNlZCBhY2Nlc3NpYmlsaXR5IEFQSSAoW1dlYlNjaGVtYXMgd2lraSBsaXN0cyBwb3NzaWJsZSB2YWx1ZXNdKGh0dHA6Ly93d3cudzMub3JnL3dpa2kvV2ViU2NoZW1hcy9BY2Nlc3NpYmlsaXR5KSkucGVkdWNhdGlvbmFsTGV2ZWyiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueMNUaGUgbGV2ZWwgaW4gdGVybXMgb2YgcHJvZ3Jlc3Npb24gdGhyb3VnaCBhbiBlZHVjYXRpb25hbCBvciB0cmFpbmluZyBjb250ZXh0LiBFeGFtcGxlcyBvZiBlZHVjYXRpb25hbCBsZXZlbHMgaW5jbHVkZSAnYmVnaW5uZXInLCAnaW50ZXJtZWRpYXRlJyBvciAnYWR2YW5jZWQnLCBhbmQgZm9ybWFsIHNldHMgb2YgbGV2ZWwgaW5kaWNhdG9ycy5waXNGYW1pbHlGcmllbmRseaJkdHlwZWdib29sZWFua2Rlc2NyaXB0aW9ueDJJbmRpY2F0ZXMgd2hldGhlciB0aGlzIGNvbnRlbnQgaXMgZmFtaWx5IGZyaWVuZGx5LnBwdWJsaXNoZXJJbXByaW50omQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb25rZGVzY3JpcHRpb254MlRoZSBwdWJsaXNoaW5nIGRpdmlzaW9uIHdoaWNoIHB1Ymxpc2hlZCB0aGUgY29taWMucHRlbXBvcmFsQ292ZXJhZ2WiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0aWRhdGUtdGltZaJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255BCtUaGUgdGVtcG9yYWxDb3ZlcmFnZSBvZiBhIENyZWF0aXZlV29yayBpbmRpY2F0ZXMgdGhlIHBlcmlvZCB0aGF0IHRoZSBjb250ZW50IGFwcGxpZXMgdG8sIGkuZS4gdGhhdCBpdCBkZXNjcmliZXMsIGVpdGhlciBhcyBhIERhdGVUaW1lIG9yIGFzIGEgdGV4dHVhbCBzdHJpbmcgaW5kaWNhdGluZyBhIHRpbWUgcGVyaW9kIGluIFtJU08gODYwMSB0aW1lIGludGVydmFsIGZvcm1hdF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHMpLiBJbgogICAgICB0aGUgY2FzZSBvZiBhIERhdGFzZXQgaXQgd2lsbCB0eXBpY2FsbHkgaW5kaWNhdGUgdGhlIHJlbGV2YW50IHRpbWUgcGVyaW9kIGluIGEgcHJlY2lzZSBub3RhdGlvbiAoZS5nLiBmb3IgYSAyMDExIGNlbnN1cyBkYXRhc2V0LCB0aGUgeWVhciAyMDExIHdvdWxkIGJlIHdyaXR0ZW4gIjIwMTEvMjAxMiIpLiBPdGhlciBmb3JtcyBvZiBjb250ZW50IGUuZy4gU2Nob2xhcmx5QXJ0aWNsZSwgQm9vaywgVFZTZXJpZXMgb3IgVFZFcGlzb2RlIG1heSBpbmRpY2F0ZSB0aGVpciB0ZW1wb3JhbENvdmVyYWdlIGluIGJyb2FkZXIgdGVybXMgLSB0ZXh0dWFsbHkgb3IgdmlhIHdlbGwta25vd24gVVJMLgogICAgICBXcml0dGVuIHdvcmtzIHN1Y2ggYXMgYm9va3MgbWF5IHNvbWV0aW1lcyBoYXZlIHByZWNpc2UgdGVtcG9yYWwgY292ZXJhZ2UgdG9vLCBlLmcuIGEgd29yayBzZXQgaW4gMTkzOSAtIDE5NDUgY2FuIGJlIGluZGljYXRlZCBpbiBJU08gODYwMSBpbnRlcnZhbCBmb3JtYXQgZm9ybWF0IHZpYSAiMTkzOS8xOTQ1Ii4KCk9wZW4tZW5kZWQgZGF0ZSByYW5nZXMgY2FuIGJlIHdyaXR0ZW4gd2l0aCAiLi4iIGluIHBsYWNlIG9mIHRoZSBlbmQgZGF0ZS4gRm9yIGV4YW1wbGUsICIyMDE1LTExLy4uIiBpbmRpY2F0ZXMgYSByYW5nZSBiZWdpbm5pbmcgaW4gTm92ZW1iZXIgMjAxNSBhbmQgd2l0aCBubyBzcGVjaWZpZWQgZmluYWwgZGF0ZS4gVGhpcyBpcyB0ZW50YXRpdmUgYW5kIG1pZ2h0IGJlIHVwZGF0ZWQgaW4gZnV0dXJlIHdoZW4gSVNPIDg2MDEgaXMgb2ZmaWNpYWxseSB1cGRhdGVkLnFhY2NvdW50YWJsZVBlcnNvbqJkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueEZTcGVjaWZpZXMgdGhlIFBlcnNvbiB0aGF0IGlzIGxlZ2FsbHkgYWNjb3VudGFibGUgZm9yIHRoZSBDcmVhdGl2ZVdvcmsucWludGVyYWN0aXZpdHlUeXBlomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnh+VGhlIHByZWRvbWluYW50IG1vZGUgb2YgbGVhcm5pbmcgc3VwcG9ydGVkIGJ5IHRoZSBsZWFybmluZyByZXNvdXJjZS4gQWNjZXB0YWJsZSB2YWx1ZXMgYXJlICdhY3RpdmUnLCAnZXhwb3NpdGl2ZScsIG9yICdtaXhlZCcucXRyYW5zbGF0aW9uT2ZXb3JromQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254dVRoZSB3b3JrIHRoYXQgdGhpcyB3b3JrIGhhcyBiZWVuIHRyYW5zbGF0ZWQgZnJvbS4gZS5nLiDniannp43otbfmupAgaXMgYSB0cmFuc2xhdGlvbk9mIOKAnE9uIHRoZSBPcmlnaW4gb2YgU3BlY2llc+KAnXJhY3F1aXJlTGljZW5zZVBhZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueGdJbmRpY2F0ZXMgYSBwYWdlIGRvY3VtZW50aW5nIGhvdyBsaWNlbnNlcyBjYW4gYmUgcHVyY2hhc2VkIG9yIG90aGVyd2lzZSBhY3F1aXJlZCwgZm9yIHRoZSBjdXJyZW50IGl0ZW0ucmNvbmRpdGlvbnNPZkFjY2Vzc6Jlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255AaJDb25kaXRpb25zIHRoYXQgYWZmZWN0IHRoZSBhdmFpbGFiaWxpdHkgb2YsIG9yIG1ldGhvZChzKSBvZiBhY2Nlc3MgdG8sIGFuIGl0ZW0uIFR5cGljYWxseSB1c2VkIGZvciByZWFsIHdvcmxkIGl0ZW1zIHN1Y2ggYXMgYW4gW1tBcmNoaXZlQ29tcG9uZW50XV0gaGVsZCBieSBhbiBbW0FyY2hpdmVPcmdhbml6YXRpb25dXS4gVGhpcyBwcm9wZXJ0eSBpcyBub3Qgc3VpdGFibGUgZm9yIHVzZSBhcyBhIGdlbmVyYWwgV2ViIGFjY2VzcyBjb250cm9sIG1lY2hhbmlzbS4gSXQgaXMgZXhwcmVzc2VkIG9ubHkgaW4gbmF0dXJhbCBsYW5ndWFnZS5cblxuRm9yIGV4YW1wbGUgIkF2YWlsYWJsZSBieSBhcHBvaW50bWVudCBmcm9tIHRoZSBSZWFkaW5nIFJvb20iIG9yICJBY2Nlc3NpYmxlIG9ubHkgZnJvbSBsb2dnZWQtaW4gYWNjb3VudHMgIi4gcmNyZWF0aXZlV29ya1N0YXR1c6JlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm1rZGVzY3JpcHRpb2542VRoZSBzdGF0dXMgb2YgYSBjcmVhdGl2ZSB3b3JrIGluIHRlcm1zIG9mIGl0cyBzdGFnZSBpbiBhIGxpZmVjeWNsZS4gRXhhbXBsZSB0ZXJtcyBpbmNsdWRlIEluY29tcGxldGUsIERyYWZ0LCBQdWJsaXNoZWQsIE9ic29sZXRlLiBTb21lIG9yZ2FuaXphdGlvbnMgZGVmaW5lIGEgc2V0IG9mIHRlcm1zIGZvciB0aGUgc3RhZ2VzIG9mIHRoZWlyIHB1YmxpY2F0aW9uIGxpZmVjeWNsZS5yaW50ZXJwcmV0ZWRBc0NsYWltomVvbmVPZoKhZCRyZWZsc2NoZW1hOkNsYWltomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbHNjaGVtYTpDbGFpbWtkZXNjcmlwdGlvbnjQVXNlZCB0byBpbmRpY2F0ZSBhIHNwZWNpZmljIGNsYWltIGNvbnRhaW5lZCwgaW1wbGllZCwgdHJhbnNsYXRlZCBvciByZWZpbmVkIGZyb20gdGhlIGNvbnRlbnQgb2YgYSBbW01lZGlhT2JqZWN0XV0gb3Igb3RoZXIgW1tDcmVhdGl2ZVdvcmtdXS4gVGhlIGludGVycHJldGluZyBwYXJ0eSBjYW4gYmUgaW5kaWNhdGVkIHVzaW5nIFtbY2xhaW1JbnRlcnByZXRlcl1dLnJzb3VyY2VPcmdhbml6YXRpb26iZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbmtkZXNjcmlwdGlvbng5VGhlIE9yZ2FuaXphdGlvbiBvbiB3aG9zZSBiZWhhbGYgdGhlIGNyZWF0b3Igd2FzIHdvcmtpbmcuc2FjY2Vzc2liaWxpdHlIYXphcmSiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueNlBIGNoYXJhY3RlcmlzdGljIG9mIHRoZSBkZXNjcmliZWQgcmVzb3VyY2UgdGhhdCBpcyBwaHlzaW9sb2dpY2FsbHkgZGFuZ2Vyb3VzIHRvIHNvbWUgdXNlcnMuIFJlbGF0ZWQgdG8gV0NBRyAyLjAgZ3VpZGVsaW5lIDIuMyAoW1dlYlNjaGVtYXMgd2lraSBsaXN0cyBwb3NzaWJsZSB2YWx1ZXNdKGh0dHA6Ly93d3cudzMub3JnL3dpa2kvV2ViU2NoZW1hcy9BY2Nlc3NpYmlsaXR5KSkuc2FsdGVybmF0aXZlSGVhZGxpbmWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueCZBIHNlY29uZGFyeSB0aXRsZSBvZiB0aGUgQ3JlYXRpdmVXb3JrLnNpc0FjY2Vzc2libGVGb3JGcmVlomR0eXBlZ2Jvb2xlYW5rZGVzY3JpcHRpb254R0EgZmxhZyB0byBzaWduYWwgdGhhdCB0aGUgaXRlbSwgZXZlbnQsIG9yIHBsYWNlIGlzIGFjY2Vzc2libGUgZm9yIGZyZWUudGFjY2Vzc01vZGVTdWZmaWNpZW50omVvbmVPZoKhZCRyZWZvc2NoZW1hOkl0ZW1MaXN0omR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmb3NjaGVtYTpJdGVtTGlzdGtkZXNjcmlwdGlvbni7QSBsaXN0IG9mIHNpbmdsZSBvciBjb21iaW5lZCBhY2Nlc3NNb2RlcyB0aGF0IGFyZSBzdWZmaWNpZW50IHRvIHVuZGVyc3RhbmQgYWxsIHRoZSBpbnRlbGxlY3R1YWwgY29udGVudCBvZiBhIHJlc291cmNlLiBFeHBlY3RlZCB2YWx1ZXMgaW5jbHVkZTogIGF1ZGl0b3J5LCB0YWN0aWxlLCB0ZXh0dWFsLCB2aXN1YWwuCiAgICAgIHRhY2Nlc3NpYmlsaXR5Q29udHJvbKJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254sElkZW50aWZpZXMgaW5wdXQgbWV0aG9kcyB0aGF0IGFyZSBzdWZmaWNpZW50IHRvIGZ1bGx5IGNvbnRyb2wgdGhlIGRlc2NyaWJlZCByZXNvdXJjZSAoW1dlYlNjaGVtYXMgd2lraSBsaXN0cyBwb3NzaWJsZSB2YWx1ZXNdKGh0dHA6Ly93d3cudzMub3JnL3dpa2kvV2ViU2NoZW1hcy9BY2Nlc3NpYmlsaXR5KSkudGFjY2Vzc2liaWxpdHlGZWF0dXJlomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjRQ29udGVudCBmZWF0dXJlcyBvZiB0aGUgcmVzb3VyY2UsIHN1Y2ggYXMgYWNjZXNzaWJsZSBtZWRpYSwgYWx0ZXJuYXRpdmVzIGFuZCBzdXBwb3J0ZWQgZW5oYW5jZW1lbnRzIGZvciBhY2Nlc3NpYmlsaXR5IChbV2ViU2NoZW1hcyB3aWtpIGxpc3RzIHBvc3NpYmxlIHZhbHVlc10oaHR0cDovL3d3dy53My5vcmcvd2lraS9XZWJTY2hlbWFzL0FjY2Vzc2liaWxpdHkpKS50YWNjZXNzaWJpbGl0eVN1bW1hcnmiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueQFDQSBodW1hbi1yZWFkYWJsZSBzdW1tYXJ5IG9mIHNwZWNpZmljIGFjY2Vzc2liaWxpdHkgZmVhdHVyZXMgb3IgZGVmaWNpZW5jaWVzLCBjb25zaXN0ZW50IHdpdGggdGhlIG90aGVyIGFjY2Vzc2liaWxpdHkgbWV0YWRhdGEgYnV0IGV4cHJlc3Npbmcgc3VidGxldGllcyBzdWNoIGFzICJzaG9ydCBkZXNjcmlwdGlvbnMgYXJlIHByZXNlbnQgYnV0IGxvbmcgZGVzY3JpcHRpb25zIHdpbGwgYmUgbmVlZGVkIGZvciBub24tdmlzdWFsIHVzZXJzIiBvciAic2hvcnQgZGVzY3JpcHRpb25zIGFyZSBwcmVzZW50IGFuZCBubyBsb25nIGRlc2NyaXB0aW9ucyBhcmUgbmVlZGVkLiJ0Y29udGVudFJlZmVyZW5jZVRpbWWjZHR5cGVmc3RyaW5nZmZvcm1hdGlkYXRlLXRpbWVrZGVzY3JpcHRpb254kVRoZSBzcGVjaWZpYyB0aW1lIGRlc2NyaWJlZCBieSBhIGNyZWF0aXZlIHdvcmssIGZvciB3b3JrcyAoZS5nLiBhcnRpY2xlcywgdmlkZW8gb2JqZWN0cyBldGMuKSB0aGF0IGVtcGhhc2lzZSBhIHBhcnRpY3VsYXIgbW9tZW50IHdpdGhpbiBhbiBFdmVudC50ZWR1Y2F0aW9uYWxBbGlnbm1lbnSiZW9uZU9mgqFkJHJlZnZzY2hlbWE6QWxpZ25tZW50T2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmdnNjaGVtYTpBbGlnbm1lbnRPYmplY3RrZGVzY3JpcHRpb2549EFuIGFsaWdubWVudCB0byBhbiBlc3RhYmxpc2hlZCBlZHVjYXRpb25hbCBmcmFtZXdvcmsuCgpUaGlzIHByb3BlcnR5IHNob3VsZCBub3QgYmUgdXNlZCB3aGVyZSB0aGUgbmF0dXJlIG9mIHRoZSBhbGlnbm1lbnQgY2FuIGJlIGRlc2NyaWJlZCB1c2luZyBhIHNpbXBsZSBwcm9wZXJ0eSwgZm9yIGV4YW1wbGUgdG8gZXhwcmVzcyB0aGF0IGEgcmVzb3VyY2UgW1t0ZWFjaGVzXV0gb3IgW1thc3Nlc3Nlc11dIGEgY29tcGV0ZW5jeS50aW50ZXJhY3Rpb25TdGF0aXN0aWOiZCRyZWZ4GXNjaGVtYTpJbnRlcmFjdGlvbkNvdW50ZXJrZGVzY3JpcHRpb254nFRoZSBudW1iZXIgb2YgaW50ZXJhY3Rpb25zIGZvciB0aGUgQ3JlYXRpdmVXb3JrIHVzaW5nIHRoZSBXZWJTaXRlIG9yIFNvZnR3YXJlQXBwbGljYXRpb24uIFRoZSBtb3N0IHNwZWNpZmljIGNoaWxkIHR5cGUgb2YgSW50ZXJhY3Rpb25Db3VudGVyIHNob3VsZCBiZSB1c2VkLnRsZWFybmluZ1Jlc291cmNlVHlwZaJlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm1rZGVzY3JpcHRpb254alRoZSBwcmVkb21pbmFudCB0eXBlIG9yIGtpbmQgY2hhcmFjdGVyaXppbmcgdGhlIGxlYXJuaW5nIHJlc291cmNlLiBGb3IgZXhhbXBsZSwgJ3ByZXNlbnRhdGlvbicsICdoYW5kb3V0Jy50cHVibGlzaGluZ1ByaW5jaXBsZXOiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueQJhVGhlIHB1Ymxpc2hpbmdQcmluY2lwbGVzIHByb3BlcnR5IGluZGljYXRlcyAodHlwaWNhbGx5IHZpYSBbW1VSTF1dKSBhIGRvY3VtZW50IGRlc2NyaWJpbmcgdGhlIGVkaXRvcmlhbCBwcmluY2lwbGVzIG9mIGFuIFtbT3JnYW5pemF0aW9uXV0gKG9yIGluZGl2aWR1YWwgZS5nLiBhIFtbUGVyc29uXV0gd3JpdGluZyBhIGJsb2cpIHRoYXQgcmVsYXRlIHRvIHRoZWlyIGFjdGl2aXRpZXMgYXMgYSBwdWJsaXNoZXIsIGUuZy4gZXRoaWNzIG9yIGRpdmVyc2l0eSBwb2xpY2llcy4gV2hlbiBhcHBsaWVkIHRvIGEgW1tDcmVhdGl2ZVdvcmtdXSAoZS5nLiBbW05ld3NBcnRpY2xlXV0pIHRoZSBwcmluY2lwbGVzIGFyZSB0aG9zZSBvZiB0aGUgcGFydHkgcHJpbWFyaWx5IHJlc3BvbnNpYmxlIGZvciB0aGUgY3JlYXRpb24gb2YgdGhlIFtbQ3JlYXRpdmVXb3JrXV0uCgpXaGlsZSBzdWNoIHBvbGljaWVzIGFyZSBtb3N0IHR5cGljYWxseSBleHByZXNzZWQgaW4gbmF0dXJhbCBsYW5ndWFnZSwgc29tZXRpbWVzIHJlbGF0ZWQgaW5mb3JtYXRpb24gKGUuZy4gaW5kaWNhdGluZyBhIFtbZnVuZGVyXV0pIGNhbiBiZSBleHByZXNzZWQgdXNpbmcgc2NoZW1hLm9yZyB0ZXJtaW5vbG9neS4Ka2Rlc2NyaXB0aW9ueGVUaGUgbW9zdCBnZW5lcmljIGtpbmQgb2YgY3JlYXRpdmUgd29yaywgaW5jbHVkaW5nIGJvb2tzLCBtb3ZpZXMsIHBob3RvZ3JhcGhzLCBzb2Z0d2FyZSBwcm9ncmFtcywgZXRjLmtkZXNjcmlwdGlvbnkB+FdlYkNvbnRlbnQgaXMgYSB0eXBlIHJlcHJlc2VudGluZyBhbGwgW1tXZWJQYWdlXV0sIFtbV2ViU2l0ZV1dIGFuZCBbW1dlYlBhZ2VFbGVtZW50XV0gY29udGVudC4gSXQgaXMgc29tZXRpbWVzIHRoZSBjYXNlIHRoYXQgZGV0YWlsZWQgZGlzdGluY3Rpb25zIGJldHdlZW4gV2ViIHBhZ2VzLCBzaXRlcyBhbmQgdGhlaXIgcGFydHMgaXMgbm90IGFsd2F5cyBpbXBvcnRhbnQgb3Igb2J2aW91cy4gVGhlICBbW1dlYkNvbnRlbnRdXSB0eXBlIG1ha2VzIGl0IGVhc2llciB0byBkZXNjcmliZSBXZWItYWRkcmVzc2FibGUgY29udGVudCB3aXRob3V0IHJlcXVpcmluZyBzdWNoIGRpc3RpbmN0aW9ucyB0byBhbHdheXMgYmUgc3RhdGVkLiAoVGhlIGludGVudCBpcyB0aGF0IHRoZSBleGlzdGluZyB0eXBlcyBbW1dlYlBhZ2VdXSwgW1tXZWJTaXRlXV0gYW5kIFtbV2ViUGFnZUVsZW1lbnRdXSB3aWxsIGV2ZW50dWFsbHkgYmUgZGVjbGFyZWQgYXMgc3VidHlwZXMgb2YgW1tXZWJDb250ZW50XV0pLmZoZWFkZXKiZnVuaXF1ZXAyQXJ4emRyRkJVK284Znp2a2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frxy757imvud0o93x4eetv4ob9thpj9kp89oaxo62xejzmvzld1eyo"},"kjzl6cwe1jw147f4uywrr0c6aspdvfzh0azva7dxjeo7d4hilvzkb69syu5bubi":{"alias":"Product","commits":[{"jws":{"payload":"AXESIGes4Ld-1P-phqqf3Vp4s6jnLOr8-cfQwMGHuNIEXdMH","signatures":[{"signature":"6ZlYlKFJZbxPIHuR12GqFkpinLpzEeeJt_vSVmQoD5xtxellzaeAc3fmtWb_mkJ8leW0ccr78nZ0VxUco3byBA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreidhvtqlo7wu76uynku73vnhrm5i44wov7hzy7imbqmhxdjaixota4"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxwrmk891c2ekss4inlo8y672gkj2i0c4dbwkbngwfglpzqdw7ls0"},"kjzl6cwe1jw147i1j294urs9vueus3sdjtg9lklsucg5f44p2o7u4ixsc4nhxvr":{"alias":"PhysicalActivityCategory","commits":[{"jws":{"payload":"AXESIEKFEAinE2jXIAq2ANWmRoHdE9ASzJcBmTqVgiNNCGsd","signatures":[{"signature":"E2CLwmU_TXvIP83tHXmf901PKIOso4SX6ugKaPU7HxvdmqkztBHfisRS-5UdQzsmoFnp-RnOu6tLpWV1QnHaDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiccquiarjytndlsacvwadk2mrub3uj5aewms4azsouvqiru2cdldu"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoeiZWNvbnN0b0Flcm9iaWNBY3Rpdml0eWtkZXNjcmlwdGlvbnjVUGh5c2ljYWwgYWN0aXZpdHkgb2YgcmVsYXRpdmVseSBsb3cgaW50ZW5zaXR5IHRoYXQgZGVwZW5kcyBwcmltYXJpbHkgb24gdGhlIGFlcm9iaWMgZW5lcmd5LWdlbmVyYXRpbmcgcHJvY2VzczsgZHVyaW5nIGFjdGl2aXR5LCB0aGUgYWVyb2JpYyBtZXRhYm9saXNtIHVzZXMgb3h5Z2VuIHRvIGFkZXF1YXRlbHkgbWVldCBlbmVyZ3kgZGVtYW5kcyBkdXJpbmcgZXhlcmNpc2UuomVjb25zdHFBbmFlcm9iaWNBY3Rpdml0eWtkZXNjcmlwdGlvbnhgUGh5c2ljYWwgYWN0aXZpdHkgdGhhdCBpcyBvZiBoaWdoLWludGVuc2l0eSB3aGljaCB1dGlsaXplcyB0aGUgYW5hZXJvYmljIG1ldGFib2xpc20gb2YgdGhlIGJvZHkuomVjb25zdGdCYWxhbmNla2Rlc2NyaXB0aW9ueEdQaHlzaWNhbCBhY3Rpdml0eSB0aGF0IGlzIGVuZ2FnZWQgdG8gaGVscCBtYWludGFpbiBwb3N0dXJlIGFuZCBiYWxhbmNlLqJlY29uc3RrRmxleGliaWxpdHlrZGVzY3JpcHRpb254TVBoeXNpY2FsIGFjdGl2aXR5IHRoYXQgaXMgZW5nYWdlZCBpbiB0byBpbXByb3ZlIGpvaW50IGFuZCBtdXNjbGUgZmxleGliaWxpdHkuomVjb25zdHNMZWlzdXJlVGltZUFjdGl2aXR5a2Rlc2NyaXB0aW9ueIpBbnkgcGh5c2ljYWwgYWN0aXZpdHkgZW5nYWdlZCBpbiBmb3IgcmVjcmVhdGlvbmFsIHB1cnBvc2VzLiBFeGFtcGxlcyBtYXkgaW5jbHVkZSBiYWxscm9vbSBkYW5jaW5nLCByb2xsZXIgc2thdGluZywgY2Fub2VpbmcsIGZpc2hpbmcsIGV0Yy6iZWNvbnN0dE9jY3VwYXRpb25hbEFjdGl2aXR5a2Rlc2NyaXB0aW9ueLdBbnkgcGh5c2ljYWwgYWN0aXZpdHkgZW5nYWdlZCBpbiBmb3Igam9iLXJlbGF0ZWQgcHVycG9zZXMuIEV4YW1wbGVzIG1heSBpbmNsdWRlIHdhaXRpbmcgdGFibGVzLCBtYWlkIHNlcnZpY2UsIGNhcnJ5aW5nIGEgbWFpbGJhZywgcGlja2luZyBmcnVpdHMgb3IgdmVnZXRhYmxlcywgY29uc3RydWN0aW9uIHdvcmssIGV0Yy6iZWNvbnN0cFN0cmVuZ3RoVHJhaW5pbmdrZGVzY3JpcHRpb254clBoeXNpY2FsIGFjdGl2aXR5IHRoYXQgaXMgZW5nYWdlZCBpbiB0byBpbXByb3ZlIG11c2NsZSBhbmQgYm9uZSBzdHJlbmd0aC4gQWxzbyByZWZlcnJlZCB0byBhcyByZXNpc3RhbmNlIHRyYWluaW5nLmV0aXRsZXgYUGh5c2ljYWxBY3Rpdml0eUNhdGVnb3J5ZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZXNjcmlwdGlvbnhJQ2F0ZWdvcmllcyBvZiBwaHlzaWNhbCBhY3Rpdml0eSwgb3JnYW5pemVkIGJ5IHBoeXNpb2xvZ2ljIGNsYXNzaWZpY2F0aW9uLmZoZWFkZXKiZnVuaXF1ZXBubWlRcWNWWGFOam84TTVRa2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frxxcavk0yitl2ag9mvuxscxfo9ej13siujhdeb07q86o9i933kxs0"},"kjzl6cwe1jw148zcp8tibt293t3cj3kg56fe72076pxutj6jz76j5k3km4d2apq":{"alias":"EnergyConsumptionDetails","commits":[{"jws":{"payload":"AXESILSqsAF-uVwVa7T6P32DyhqZ-qsFxzi4GL3S0Kc2Bcvc","signatures":[{"signature":"CPr-Eg3WPOAezHZ6dWTPt2xhMfegeBVpXtkv2p7X34l9hyLuJ_e3dj_48bAWgviyV-pmcYgQzvczJBAwPuMGBg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifuvkyac7vzlqkwxnh2h56yhsq2th5kwbohhc4brpos2cttmbol3q"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxleBhFbmVyZ3lDb25zdW1wdGlvbkRldGFpbHNnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjanByb3BlcnRpZXOjeBhlbmVyZ3lFZmZpY2llbmN5U2NhbGVNYXiiZW9uZU9mgqFkJHJlZngkc2NoZW1hOkVVRW5lcmd5RWZmaWNpZW5jeUVudW1lcmF0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmeCRzY2hlbWE6RVVFbmVyZ3lFZmZpY2llbmN5RW51bWVyYXRpb25rZGVzY3JpcHRpb254+lNwZWNpZmllcyB0aGUgbW9zdCBlbmVyZ3kgZWZmaWNpZW50IGNsYXNzIG9uIHRoZSByZWd1bGF0ZWQgRVUgZW5lcmd5IGNvbnN1bXB0aW9uIHNjYWxlIGZvciB0aGUgcHJvZHVjdCBjYXRlZ29yeSBhIHByb2R1Y3QgYmVsb25ncyB0by4gRm9yIGV4YW1wbGUsIGVuZXJneSBjb25zdW1wdGlvbiBmb3IgdGVsZXZpc2lvbnMgcGxhY2VkIG9uIHRoZSBtYXJrZXQgYWZ0ZXIgSmFudWFyeSAxLCAyMDIwIGlzIHNjYWxlZCBmcm9tIEQgdG8gQSsrKy54GGVuZXJneUVmZmljaWVuY3lTY2FsZU1pbqJlb25lT2aCoWQkcmVmeCRzY2hlbWE6RVVFbmVyZ3lFZmZpY2llbmN5RW51bWVyYXRpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ4JHNjaGVtYTpFVUVuZXJneUVmZmljaWVuY3lFbnVtZXJhdGlvbmtkZXNjcmlwdGlvbnj7U3BlY2lmaWVzIHRoZSBsZWFzdCBlbmVyZ3kgZWZmaWNpZW50IGNsYXNzIG9uIHRoZSByZWd1bGF0ZWQgRVUgZW5lcmd5IGNvbnN1bXB0aW9uIHNjYWxlIGZvciB0aGUgcHJvZHVjdCBjYXRlZ29yeSBhIHByb2R1Y3QgYmVsb25ncyB0by4gRm9yIGV4YW1wbGUsIGVuZXJneSBjb25zdW1wdGlvbiBmb3IgdGVsZXZpc2lvbnMgcGxhY2VkIG9uIHRoZSBtYXJrZXQgYWZ0ZXIgSmFudWFyeSAxLCAyMDIwIGlzIHNjYWxlZCBmcm9tIEQgdG8gQSsrKy54G2hhc0VuZXJneUVmZmljaWVuY3lDYXRlZ29yeaJlb25lT2aCoWQkcmVmeCJzY2hlbWE6RW5lcmd5RWZmaWNpZW5jeUVudW1lcmF0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmeCJzY2hlbWE6RW5lcmd5RWZmaWNpZW5jeUVudW1lcmF0aW9ua2Rlc2NyaXB0aW9ueMBEZWZpbmVzIHRoZSBlbmVyZ3kgZWZmaWNpZW5jeSBDYXRlZ29yeSAod2hpY2ggY291bGQgYmUgZWl0aGVyIGEgcmF0aW5nIG91dCBvZiByYW5nZSBvZiB2YWx1ZXMgb3IgYSB5ZXMvbm8gY2VydGlmaWNhdGlvbikgZm9yIGEgcHJvZHVjdCBhY2NvcmRpbmcgdG8gYW4gaW50ZXJuYXRpb25hbCBlbmVyZ3kgZWZmaWNpZW5jeSBzdGFuZGFyZC5rZGVmaW5pdGlvbnOiZVRoaW5npGR0eXBlZm9iamVjdGV0aXRsZWVUaGluZ2pwcm9wZXJ0aWVzrmN1cmyjZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb25wVVJMIG9mIHRoZSBpdGVtLmRuYW1lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnVUaGUgbmFtZSBvZiB0aGUgaXRlbS5lQHR5cGWhZHR5cGVmc3RyaW5nZWltYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb254UUFuIGltYWdlIG9mIHRoZSBpdGVtLiBUaGlzIGNhbiBiZSBhIFtbVVJMXV0gb3IgYSBmdWxseSBkZXNjcmliZWQgW1tJbWFnZU9iamVjdF1dLmZzYW1lQXOiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnidVVJMIG9mIGEgcmVmZXJlbmNlIFdlYiBwYWdlIHRoYXQgdW5hbWJpZ3VvdXNseSBpbmRpY2F0ZXMgdGhlIGl0ZW0ncyBpZGVudGl0eS4gRS5nLiB0aGUgVVJMIG9mIHRoZSBpdGVtJ3MgV2lraXBlZGlhIHBhZ2UsIFdpa2lkYXRhIGVudHJ5LCBvciBvZmZpY2lhbCB3ZWJzaXRlLmhAY29udGV4dKFkdHlwZWZzdHJpbmdpc3ViamVjdE9momVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueClBIENyZWF0aXZlV29yayBvciBFdmVudCBhYm91dCB0aGlzIFRoaW5nLmppZGVudGlmaWVyomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVla2Rlc2NyaXB0aW9ueQFJVGhlIGlkZW50aWZpZXIgcHJvcGVydHkgcmVwcmVzZW50cyBhbnkga2luZCBvZiBpZGVudGlmaWVyIGZvciBhbnkga2luZCBvZiBbW1RoaW5nXV0sIHN1Y2ggYXMgSVNCTnMsIEdUSU4gY29kZXMsIFVVSURzIGV0Yy4gU2NoZW1hLm9yZyBwcm92aWRlcyBkZWRpY2F0ZWQgcHJvcGVydGllcyBmb3IgcmVwcmVzZW50aW5nIG1hbnkgb2YgdGhlc2UsIGVpdGhlciBhcyB0ZXh0dWFsIHN0cmluZ3Mgb3IgYXMgVVJMIChVUkkpIGxpbmtzLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI2lkZW50aWZpZXJCZykgZm9yIG1vcmUgZGV0YWlscy4KICAgICAgICBrZGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueBpBIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtLm1hbHRlcm5hdGVOYW1lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnZBbiBhbGlhcyBmb3IgdGhlIGl0ZW0ubmFkZGl0aW9uYWxUeXBlomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb255AZ9BbiBhZGRpdGlvbmFsIHR5cGUgZm9yIHRoZSBpdGVtLCB0eXBpY2FsbHkgdXNlZCBmb3IgYWRkaW5nIG1vcmUgc3BlY2lmaWMgdHlwZXMgZnJvbSBleHRlcm5hbCB2b2NhYnVsYXJpZXMgaW4gbWljcm9kYXRhIHN5bnRheC4gVGhpcyBpcyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHNvbWV0aGluZyBhbmQgYSBjbGFzcyB0aGF0IHRoZSB0aGluZyBpcyBpbi4gSW4gUkRGYSBzeW50YXgsIGl0IGlzIGJldHRlciB0byB1c2UgdGhlIG5hdGl2ZSBSREZhIHN5bnRheCAtIHRoZSAndHlwZW9mJyBhdHRyaWJ1dGUgLSBmb3IgbXVsdGlwbGUgdHlwZXMuIFNjaGVtYS5vcmcgdG9vbHMgbWF5IGhhdmUgb25seSB3ZWFrZXIgdW5kZXJzdGFuZGluZyBvZiBleHRyYSB0eXBlcywgaW4gcGFydGljdWxhciB0aG9zZSBkZWZpbmVkIGV4dGVybmFsbHkub3BvdGVudGlhbEFjdGlvbqJlb25lT2aCoWQkcmVmbXNjaGVtYTpBY3Rpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOkFjdGlvbmtkZXNjcmlwdGlvbnhySW5kaWNhdGVzIGEgcG90ZW50aWFsIEFjdGlvbiwgd2hpY2ggZGVzY3JpYmVzIGFuIGlkZWFsaXplZCBhY3Rpb24gaW4gd2hpY2ggdGhpcyB0aGluZyB3b3VsZCBwbGF5IGFuICdvYmplY3QnIHJvbGUucG1haW5FbnRpdHlPZlBhZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueLBJbmRpY2F0ZXMgYSBwYWdlIChvciBvdGhlciBDcmVhdGl2ZVdvcmspIGZvciB3aGljaCB0aGlzIHRoaW5nIGlzIHRoZSBtYWluIGVudGl0eSBiZWluZyBkZXNjcmliZWQuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjbWFpbkVudGl0eUJhY2tncm91bmQpIGZvciBkZXRhaWxzLngZZGlzYW1iaWd1YXRpbmdEZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2547EEgc3ViIHByb3BlcnR5IG9mIGRlc2NyaXB0aW9uLiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGZyb20gb3RoZXIsIHNpbWlsYXIgaXRlbXMuIEluZm9ybWF0aW9uIGZyb20gb3RoZXIgcHJvcGVydGllcyAoaW4gcGFydGljdWxhciwgbmFtZSkgbWF5IGJlIG5lY2Vzc2FyeSBmb3IgdGhlIGRlc2NyaXB0aW9uIHRvIGJlIHVzZWZ1bCBmb3IgZGlzYW1iaWd1YXRpb24ua2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5qSW50YW5naWJsZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmcyMvZGVmaW5pdGlvbnMvVGhpbmdrZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmV0aXRsZWpJbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5rZGVzY3JpcHRpb255AgBFbmVyZ3lDb25zdW1wdGlvbkRldGFpbHMgcmVwcmVzZW50cyBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBlbmVyZ3kgZWZmaWNpZW5jeSBvZiBhIHByb2R1Y3QgdGhhdCBjb25zdW1lcyBlbmVyZ3kuIFRoZSBpbmZvcm1hdGlvbiB0aGF0IGNhbiBiZSBwcm92aWRlZCBpcyBiYXNlZCBvbiBpbnRlcm5hdGlvbmFsIHJlZ3VsYXRpb25zIHN1Y2ggYXMgZm9yIGV4YW1wbGUgW0VVIGRpcmVjdGl2ZSAyMDE3LzEzNjldKGh0dHBzOi8vZXVyLWxleC5ldXJvcGEuZXUvZWxpL3JlZy8yMDE3LzEzNjkvb2opIGZvciBlbmVyZ3kgbGFiZWxpbmcgYW5kIHRoZSBbRW5lcmd5IGxhYmVsaW5nIHJ1bGVdKGh0dHBzOi8vd3d3LmZ0Yy5nb3YvZW5mb3JjZW1lbnQvcnVsZXMvcnVsZW1ha2luZy1yZWd1bGF0b3J5LXJlZm9ybS1wcm9jZWVkaW5ncy9lbmVyZ3ktd2F0ZXItdXNlLWxhYmVsaW5nLWNvbnN1bWVyKSB1bmRlciB0aGUgRW5lcmd5IFBvbGljeSBhbmQgQ29uc2VydmF0aW9uIEFjdCAoRVBDQSkgaW4gdGhlIFVTLmZoZWFkZXKiZnVuaXF1ZXAwRE95TXhlb3QxSi9OWnpGa2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1fry7vebipubyo0r2vt3tdestpgy69f3sgr60em2b2g7ixelb0wc6ww"},"kjzl6cwe1jw147gto7d4zrhzfkg195pwcyn3cloxy4lez38ldvrezikm5jp4rsh":{"alias":"EUEnergyEfficiencyEnumeration","commits":[{"jws":{"payload":"AXESIGdRIZ1xRECCbvh5cLFWLgCJycyKpQFWS6yoGT7sGL-z","signatures":[{"signature":"1Uq7Q7oAlB8Z6AKj6rQWzrpCwkJK9eC0tpeuFJ0-u9wQVeAnbg3x068lGSCx4A8OPqknfbNj2d2Ils29njBaCQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreidhkeqz24keicbg56dzocyvmlqarhe4zcvfaflexlfide7oygf7wm"},"linkedBlock":"omRkYXRhpmR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4KSMvZGVmaW5pdGlvbnMvRW5lcmd5RWZmaWNpZW5jeUVudW1lcmF0aW9ua2Rlc2NyaXB0aW9ueKFFbnVtZXJhdGVzIGVuZXJneSBlZmZpY2llbmN5IGxldmVscyAoYWxzbyBrbm93biBhcyAiY2xhc3NlcyIgb3IgInJhdGluZ3MiKSBhbmQgY2VydGlmaWNhdGlvbnMgdGhhdCBhcmUgcGFydCBvZiBzZXZlcmFsIGludGVybmF0aW9uYWwgZW5lcmd5IGVmZmljaWVuY3kgc3RhbmRhcmRzLmV0aXRsZXgdRVVFbmVyZ3lFZmZpY2llbmN5RW51bWVyYXRpb25nJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEja2RlZmluaXRpb25zoXgbRW5lcmd5RWZmaWNpZW5jeUVudW1lcmF0aW9uo2R0eXBlZm9iamVjdGV0aXRsZXgbRW5lcmd5RWZmaWNpZW5jeUVudW1lcmF0aW9ua2Rlc2NyaXB0aW9ueKFFbnVtZXJhdGVzIGVuZXJneSBlZmZpY2llbmN5IGxldmVscyAoYWxzbyBrbm93biBhcyAiY2xhc3NlcyIgb3IgInJhdGluZ3MiKSBhbmQgY2VydGlmaWNhdGlvbnMgdGhhdCBhcmUgcGFydCBvZiBzZXZlcmFsIGludGVybmF0aW9uYWwgZW5lcmd5IGVmZmljaWVuY3kgc3RhbmRhcmRzLmtkZXNjcmlwdGlvbnhyRW51bWVyYXRlcyB0aGUgRVUgZW5lcmd5IGVmZmljaWVuY3kgY2xhc3NlcyBBLUcgYXMgd2VsbCBhcyBBKywgQSsrLCBhbmQgQSsrKyBhcyBkZWZpbmVkIGluIEVVIGRpcmVjdGl2ZSAyMDE3LzEzNjkuZmhlYWRlcqJmdW5pcXVlcEZrSTNBWGJTWGxVdEJaVTRrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frxx3n04dfibjvype0x4o646c7tm9deooahj142puykk2ljg2pxmgw"},"kjzl6cwe1jw148jmt04po2raxguwcxowj063g0x3wt4fwdty0opd0dqkbg2uhlq":{"alias":"EnergyEfficiencyEnumeration","commits":[{"jws":{"payload":"AXESIGP6JVNt6jA_fa6G5UNB-MCUJU-VIg8IEldECteAvA9f","signatures":[{"signature":"i3fX4BPzOHJFTFy1iU3tyf0KQvyldTLi4UZ5YBYlh52Md6hZP6FJOcK07cXpiISVHumjgNaeTuZ144MCH0vcBQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreidd7isvg3pkga7x3lug4vbud6gasqsu7fjcb4ebev2ebllybpapl4"},"linkedBlock":"omRkYXRhpGR0eXBlZm9iamVjdGV0aXRsZXgbRW5lcmd5RWZmaWNpZW5jeUVudW1lcmF0aW9uZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZXNjcmlwdGlvbnihRW51bWVyYXRlcyBlbmVyZ3kgZWZmaWNpZW5jeSBsZXZlbHMgKGFsc28ga25vd24gYXMgImNsYXNzZXMiIG9yICJyYXRpbmdzIikgYW5kIGNlcnRpZmljYXRpb25zIHRoYXQgYXJlIHBhcnQgb2Ygc2V2ZXJhbCBpbnRlcm5hdGlvbmFsIGVuZXJneSBlZmZpY2llbmN5IHN0YW5kYXJkcy5maGVhZGVyomZ1bmlxdWVwZ08rVHhoZHpqOUFxZ1Mvdmtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1fry4rm68xij7m5pzvq3zl3b57chyjftb3l2acxwvocipowhec8t6gw"},"kjzl6cwe1jw1492pypl7gjdnmocjuhxdx7ftzoca6y07tx7s5g47ncspva7b2d1":{"alias":"MerchantReturnPolicy","commits":[{"jws":{"payload":"AXESIMtj6eysi3DegFXEQEH0ggf4mb7dObZT_L8GujfqqS1l","signatures":[{"signature":"eus2_GvLRfCLS37bbulH6IwQtXxHA4Gc4JIqwjCVeuFiF8SK6W3IEtPbNgwtDzAEFp_dH0XRCrBQ14sMgN00Aw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiglmpu6zlelodpiavoeiba7jaqh7cm35xjzwzj7zpygxi36vkjnmu"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxldE1lcmNoYW50UmV0dXJuUG9saWN5ZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVztGpyZWZ1bmRUeXBlomVvbmVPZoKhZCRyZWZ4HHNjaGVtYTpSZWZ1bmRUeXBlRW51bWVyYXRpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ4HHNjaGVtYTpSZWZ1bmRUeXBlRW51bWVyYXRpb25rZGVzY3JpcHRpb254J0EgcmVmdW5kIHR5cGUsIGZyb20gYW4gZW51bWVyYXRlZCBsaXN0LmpyZXR1cm5GZWVzomQkcmVmeBxzY2hlbWE6UmV0dXJuRmVlc0VudW1lcmF0aW9ua2Rlc2NyaXB0aW9ueEZUaGUgdHlwZSBvZiByZXR1cm4gZmVlcyBmb3IgcHVyY2hhc2VkIHByb2R1Y3RzIChmb3IgYW55IHJldHVybiByZWFzb24pbHJldHVybk1ldGhvZKJkJHJlZngec2NoZW1hOlJldHVybk1ldGhvZEVudW1lcmF0aW9ua2Rlc2NyaXB0aW9ueEFUaGUgdHlwZSBvZiByZXR1cm4gbWV0aG9kIG9mZmVyZWQsIHNwZWNpZmllZCBmcm9tIGFuIGVudW1lcmF0aW9uLm1pdGVtQ29uZGl0aW9uomVvbmVPZoKhZCRyZWZ4GXNjaGVtYTpPZmZlckl0ZW1Db25kaXRpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ4GXNjaGVtYTpPZmZlckl0ZW1Db25kaXRpb25rZGVzY3JpcHRpb2548kEgcHJlZGVmaW5lZCB2YWx1ZSBmcm9tIE9mZmVySXRlbUNvbmRpdGlvbiBzcGVjaWZ5aW5nIHRoZSBjb25kaXRpb24gb2YgdGhlIHByb2R1Y3Qgb3Igc2VydmljZSwgb3IgdGhlIHByb2R1Y3RzIG9yIHNlcnZpY2VzIGluY2x1ZGVkIGluIHRoZSBvZmZlci4gQWxzbyB1c2VkIGZvciBwcm9kdWN0IHJldHVybiBwb2xpY2llcyB0byBzcGVjaWZ5IHRoZSBjb25kaXRpb24gb2YgcHJvZHVjdHMgYWNjZXB0ZWQgZm9yIHJldHVybnMubXJlc3RvY2tpbmdGZWWiZW9uZU9mgqFlYW55T2aCoWR0eXBlZm51bWJlcqFkJHJlZnVzY2hlbWE6TW9uZXRhcnlBbW91bnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkdHlwZWZudW1iZXKhZCRyZWZ1c2NoZW1hOk1vbmV0YXJ5QW1vdW50a2Rlc2NyaXB0aW9ueKJVc2UgW1tNb25ldGFyeUFtb3VudF1dIHRvIHNwZWNpZnkgYSBmaXhlZCByZXN0b2NraW5nIGZlZSBmb3IgcHJvZHVjdCByZXR1cm5zLCBvciB1c2UgW1tOdW1iZXJdXSB0byBzcGVjaWZ5IGEgcGVyY2VudGFnZSBvZiB0aGUgcHJvZHVjdCBwcmljZSBwYWlkIGJ5IHRoZSBjdXN0b21lci5xcmV0dXJuTGFiZWxTb3VyY2WiZCRyZWZ4I3NjaGVtYTpSZXR1cm5MYWJlbFNvdXJjZUVudW1lcmF0aW9ua2Rlc2NyaXB0aW9ueH1UaGUgbWV0aG9kIChmcm9tIGFuIGVudW1lcmF0aW9uKSBieSB3aGljaCB0aGUgY3VzdG9tZXIgb2J0YWlucyBhIHJldHVybiBzaGlwcGluZyBsYWJlbCBmb3IgYSBwcm9kdWN0IHJldHVybmVkIGZvciBhbnkgcmVhc29uLnJhZGRpdGlvbmFsUHJvcGVydHmiZW9uZU9mgqFkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZaJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkB+EEgcHJvcGVydHktdmFsdWUgcGFpciByZXByZXNlbnRpbmcgYW4gYWRkaXRpb25hbCBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIGVudGl0aXR5LCBlLmcuIGEgcHJvZHVjdCBmZWF0dXJlIG9yIGFub3RoZXIgY2hhcmFjdGVyaXN0aWMgZm9yIHdoaWNoIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHByb3BlcnR5IGluIHNjaGVtYS5vcmcuXG5cbk5vdGU6IFB1Ymxpc2hlcnMgc2hvdWxkIGJlIGF3YXJlIHRoYXQgYXBwbGljYXRpb25zIGRlc2lnbmVkIHRvIHVzZSBzcGVjaWZpYyBzY2hlbWEub3JnIHByb3BlcnRpZXMgKGUuZy4gaHR0cHM6Ly9zY2hlbWEub3JnL3dpZHRoLCBodHRwczovL3NjaGVtYS5vcmcvY29sb3IsIGh0dHBzOi8vc2NoZW1hLm9yZy9ndGluMTMsIC4uLikgd2lsbCB0eXBpY2FsbHkgZXhwZWN0IHN1Y2ggZGF0YSB0byBiZSBwcm92aWRlZCB1c2luZyB0aG9zZSBwcm9wZXJ0aWVzLCByYXRoZXIgdGhhbiB1c2luZyB0aGUgZ2VuZXJpYyBwcm9wZXJ0eS92YWx1ZSBtZWNoYW5pc20uCnJtZXJjaGFudFJldHVybkRheXOiZW9uZU9mgqFlYW55T2aDoWR0eXBlZ2ludGVnZXKiZHR5cGVmc3RyaW5nZmZvcm1hdGRkYXRlomR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1lomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoOhZHR5cGVnaW50ZWdlcqJkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGWiZHR5cGVmc3RyaW5nZmZvcm1hdGlkYXRlLXRpbWVrZGVzY3JpcHRpb2542VNwZWNpZmllcyBlaXRoZXIgYSBmaXhlZCByZXR1cm4gZGF0ZSBvciB0aGUgbnVtYmVyIG9mIGRheXMgKGZyb20gdGhlIGRlbGl2ZXJ5IGRhdGUpIHRoYXQgYSBwcm9kdWN0IGNhbiBiZSByZXR1cm5lZC4gVXNlZCB3aGVuIHRoZSBbW3JldHVyblBvbGljeUNhdGVnb3J5XV0gcHJvcGVydHkgaXMgc3BlY2lmaWVkIGFzIFtbTWVyY2hhbnRSZXR1cm5GaW5pdGVSZXR1cm5XaW5kb3ddXS5ybWVyY2hhbnRSZXR1cm5MaW5romVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254PFNwZWNpZmllcyBhIFdlYiBwYWdlIG9yIHNlcnZpY2UgYnkgVVJMLCBmb3IgcHJvZHVjdCByZXR1cm5zLnNyZXR1cm5Qb2xpY3lDb3VudHJ5omVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmbnNjaGVtYTpDb3VudHJ5a2Rlc2NyaXB0aW9ueQFaVGhlIGNvdW50cnkgd2hlcmUgdGhlIHByb2R1Y3QgaGFzIHRvIGJlIHNlbnQgdG8gZm9yIHJldHVybnMsIGZvciBleGFtcGxlICJJcmVsYW5kIiB1c2luZyB0aGUgW1tuYW1lXV0gcHJvcGVydHkgb2YgW1tDb3VudHJ5XV0uIFlvdSBjYW4gYWxzbyBwcm92aWRlIHRoZSB0d28tbGV0dGVyIFtJU08gMzE2Ni0xIGFscGhhLTIgY291bnRyeSBjb2RlXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT18zMTY2LTEpLiBOb3RlIHRoYXQgdGhpcyBjYW4gYmUgZGlmZmVyZW50IGZyb20gdGhlIGNvdW50cnkgd2hlcmUgdGhlIHByb2R1Y3Qgd2FzIG9yaWdpbmFsbHkgc2hpcHBlZCBmcm9tIG9yIHNlbnQgdG9vLnRpdGVtRGVmZWN0UmV0dXJuRmVlc6JkJHJlZngcc2NoZW1hOlJldHVybkZlZXNFbnVtZXJhdGlvbmtkZXNjcmlwdGlvbng3VGhlIHR5cGUgb2YgcmV0dXJuIGZlZXMgZm9yIHJldHVybnMgb2YgZGVmZWN0IHByb2R1Y3RzLnRyZXR1cm5Qb2xpY3lDYXRlZ29yeaJlb25lT2aCoWQkcmVmeCBzY2hlbWE6TWVyY2hhbnRSZXR1cm5FbnVtZXJhdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZnggc2NoZW1hOk1lcmNoYW50UmV0dXJuRW51bWVyYXRpb25rZGVzY3JpcHRpb254PFNwZWNpZmllcyBhbiBhcHBsaWNhYmxlIHJldHVybiBwb2xpY3kgKGZyb20gYW4gZW51bWVyYXRpb24pLnVpblN0b3JlUmV0dXJuc09mZmVyZWSiZHR5cGVnYm9vbGVhbmtkZXNjcmlwdGlvbnhiQXJlIGluLXN0b3JlIHJldHVybnMgb2ZmZXJlZD8gKGZvciBtb3JlIGFkdmFuY2VkIHJldHVybiBtZXRob2RzIHVzZSB0aGUgW1tyZXR1cm5NZXRob2RdXSBwcm9wZXJ0eSl4GHJldHVyblNoaXBwaW5nRmVlc0Ftb3VudKJlb25lT2aCoWQkcmVmdXNjaGVtYTpNb25ldGFyeUFtb3VudKJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZnVzY2hlbWE6TW9uZXRhcnlBbW91bnRrZGVzY3JpcHRpb254hUFtb3VudCBvZiBzaGlwcGluZyBjb3N0cyBmb3IgcHJvZHVjdCByZXR1cm5zIChmb3IgYW55IHJlYXNvbikuIEFwcGxpY2FibGUgd2hlbiBwcm9wZXJ0eSBbW3JldHVybkZlZXNdXSBlcXVhbHMgW1tSZXR1cm5TaGlwcGluZ0ZlZXNdXS54GWN1c3RvbWVyUmVtb3JzZVJldHVybkZlZXOiZCRyZWZ4HHNjaGVtYTpSZXR1cm5GZWVzRW51bWVyYXRpb25rZGVzY3JpcHRpb254S1RoZSB0eXBlIG9mIHJldHVybiBmZWVzIGlmIHRoZSBwcm9kdWN0IGlzIHJldHVybmVkIGR1ZSB0byBjdXN0b21lciByZW1vcnNlLngbaXRlbURlZmVjdFJldHVybkxhYmVsU291cmNlomQkcmVmeCNzY2hlbWE6UmV0dXJuTGFiZWxTb3VyY2VFbnVtZXJhdGlvbmtkZXNjcmlwdGlvbnhsVGhlIG1ldGhvZCAoZnJvbSBhbiBlbnVtZXJhdGlvbikgYnkgd2hpY2ggdGhlIGN1c3RvbWVyIG9idGFpbnMgYSByZXR1cm4gc2hpcHBpbmcgbGFiZWwgZm9yIGEgZGVmZWN0IHByb2R1Y3QueBxyZXR1cm5Qb2xpY3lTZWFzb25hbE92ZXJyaWRlomVvbmVPZoKhZCRyZWZ4K3NjaGVtYTpNZXJjaGFudFJldHVyblBvbGljeVNlYXNvbmFsT3ZlcnJpZGWiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ4K3NjaGVtYTpNZXJjaGFudFJldHVyblBvbGljeVNlYXNvbmFsT3ZlcnJpZGVrZGVzY3JpcHRpb254JVNlYXNvbmFsIG92ZXJyaWRlIG9mIGEgcmV0dXJuIHBvbGljeS54IGN1c3RvbWVyUmVtb3JzZVJldHVybkxhYmVsU291cmNlomQkcmVmeCNzY2hlbWE6UmV0dXJuTGFiZWxTb3VyY2VFbnVtZXJhdGlvbmtkZXNjcmlwdGlvbniGVGhlIG1ldGhvZCAoZnJvbSBhbiBlbnVtZXJhdGlvbikgYnkgd2hpY2ggdGhlIGN1c3RvbWVyIG9idGFpbnMgYSByZXR1cm4gc2hpcHBpbmcgbGFiZWwgZm9yIGEgcHJvZHVjdCByZXR1cm5lZCBkdWUgdG8gY3VzdG9tZXIgcmVtb3JzZS54Iml0ZW1EZWZlY3RSZXR1cm5TaGlwcGluZ0ZlZXNBbW91bnSiZW9uZU9mgqFkJHJlZnVzY2hlbWE6TW9uZXRhcnlBbW91bnSiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ1c2NoZW1hOk1vbmV0YXJ5QW1vdW50a2Rlc2NyaXB0aW9ueIVBbW91bnQgb2Ygc2hpcHBpbmcgY29zdHMgZm9yIGRlZmVjdCBwcm9kdWN0IHJldHVybnMuIEFwcGxpY2FibGUgd2hlbiBwcm9wZXJ0eSBbW2l0ZW1EZWZlY3RSZXR1cm5GZWVzXV0gZXF1YWxzIFtbUmV0dXJuU2hpcHBpbmdGZWVzXV0ueCdjdXN0b21lclJlbW9yc2VSZXR1cm5TaGlwcGluZ0ZlZXNBbW91bnSiZCRyZWZ1c2NoZW1hOk1vbmV0YXJ5QW1vdW50a2Rlc2NyaXB0aW9ueKRUaGUgYW1vdW50IG9mIHNoaXBwaW5nIGNvc3RzIGlmIGEgcHJvZHVjdCBpcyByZXR1cm5lZCBkdWUgdG8gY3VzdG9tZXIgcmVtb3JzZS4gQXBwbGljYWJsZSB3aGVuIHByb3BlcnR5IFtbY3VzdG9tZXJSZW1vcnNlUmV0dXJuRmVlc11dIGVxdWFscyBbW1JldHVyblNoaXBwaW5nRmVlc11dLmtkZWZpbml0aW9uc6JlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmtkZXNjcmlwdGlvbniJQSBNZXJjaGFudFJldHVyblBvbGljeSBwcm92aWRlcyBpbmZvcm1hdGlvbiBhYm91dCBwcm9kdWN0IHJldHVybiBwb2xpY2llcyBhc3NvY2lhdGVkIHdpdGggYW4gW1tPcmdhbml6YXRpb25dXSwgW1tQcm9kdWN0XV0sIG9yIFtbT2ZmZXJdXS5maGVhZGVyomZ1bmlxdWVwUksyaE8yUS9MOVZDbDQyYWtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1fry8jcmtyt1lt419594vhf04wl9p3chdtjos7c6qlye307ygjyosn4"},"kjzl6cwe1jw14b7j0ku5qv45fx4shnjzmg2samac7m62g1utzl1ajcvprmy8jzz":{"alias":"ReturnFeesEnumeration","commits":[{"jws":{"payload":"AXESIE904kbR-vscfjthbgbdKSAXni-UGi4fwuDIxekLterQ","signatures":[{"signature":"OCsz1i7gBxtLZi7ii0qNXji6E9ORe7Ddv6eqxYbrTzSdhi5L1JxkiZahdP0a96IoaO2Xmzv1aZL8hcaLe2i6CA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicpotrenup27moh4o3bnydn2kjac6pc7fa2fyp4fygiyxuqxnpk2a"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoWiZWNvbnN0akZyZWVSZXR1cm5rZGVzY3JpcHRpb254Q1NwZWNpZmllcyB0aGF0IHByb2R1Y3QgcmV0dXJucyBhcmUgZnJlZSBvZiBjaGFyZ2UgZm9yIHRoZSBjdXN0b21lci6iZWNvbnN0dE9yaWdpbmFsU2hpcHBpbmdGZWVza2Rlc2NyaXB0aW9ueFpTcGVjaWZpZXMgdGhhdCB0aGUgY3VzdG9tZXIgbXVzdCBwYXkgdGhlIG9yaWdpbmFsIHNoaXBwaW5nIGNvc3RzIHdoZW4gcmV0dXJuaW5nIGEgcHJvZHVjdC6iZWNvbnN0blJlc3RvY2tpbmdGZWVza2Rlc2NyaXB0aW9ueE5TcGVjaWZpZXMgdGhhdCB0aGUgY3VzdG9tZXIgbXVzdCBwYXkgYSByZXN0b2NraW5nIGZlZSB3aGVuIHJldHVybmluZyBhIHByb2R1Y3SiZWNvbnN0eCBSZXR1cm5GZWVzQ3VzdG9tZXJSZXNwb25zaWJpbGl0eWtkZXNjcmlwdGlvbnhdU3BlY2lmaWVzIHRoYXQgcHJvZHVjdCByZXR1cm5zIG11c3QgYmUgcGFpZCBmb3IsIGFuZCBhcmUgdGhlIHJlc3BvbnNpYmlsaXR5IG9mLCB0aGUgY3VzdG9tZXIuomVjb25zdHJSZXR1cm5TaGlwcGluZ0ZlZXNrZGVzY3JpcHRpb254V1NwZWNpZmllcyB0aGF0IHRoZSBjdXN0b21lciBtdXN0IHBheSB0aGUgcmV0dXJuIHNoaXBwaW5nIGNvc3RzIHdoZW4gcmV0dXJuaW5nIGEgcHJvZHVjdGV0aXRsZXVSZXR1cm5GZWVzRW51bWVyYXRpb25nJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEja2Rlc2NyaXB0aW9ueD1FbnVtZXJhdGVzIHNldmVyYWwga2luZHMgb2YgcG9saWNpZXMgZm9yIHByb2R1Y3QgcmV0dXJuIGZlZXMuZmhlYWRlcqJmdW5pcXVlcGNodU8rbkxRNW51Q0Q4MVdrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frynpj846gv19ip7m2lji5bmbt7ihiu5n5e57991l6xnlj8j7gu7sw"},"kjzl6cwe1jw146z6n8zyzyg4nt95kylj5zrv31d43uf0n791yti2p99zb7mkmsp":{"alias":"ReturnLabelSourceEnumeration","commits":[{"jws":{"payload":"AXESIJR5N1JtNua7lJB1014ZVx5NIZkjpovZAyi5X1m-fiuR","signatures":[{"signature":"-UHAGZU06RKsWwgWUV8r11u6D6CQlLETiX-gnaSHsOXkK7C_EwkqhsBQTOir7uQFiTKx1qpnMH6M43Jf2b8fDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreieupe3ve3jw425zjedv2npbsvy6juqzsi5grpmqgkfzl5m347rlse"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoOiZWNvbnN0eCFSZXR1cm5MYWJlbEN1c3RvbWVyUmVzcG9uc2liaWxpdHlrZGVzY3JpcHRpb254TUluZGljYXRlZCB0aGF0IGNyZWF0aW5nIGEgcmV0dXJuIGxhYmVsIGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgY3VzdG9tZXIuomVjb25zdHgbUmV0dXJuTGFiZWxEb3dubG9hZEFuZFByaW50a2Rlc2NyaXB0aW9ueE1JbmRpY2F0ZWQgdGhhdCBhIHJldHVybiBsYWJlbCBtdXN0IGJlIGRvd25sb2FkZWQgYW5kIHByaW50ZWQgYnkgdGhlIGN1c3RvbWVyLqJlY29uc3RwUmV0dXJuTGFiZWxJbkJveGtkZXNjcmlwdGlvbnhRU3BlY2lmaWVzIHRoYXQgYSByZXR1cm4gbGFiZWwgd2lsbCBiZSBwcm92aWRlZCBieSB0aGUgc2VsbGVyIGluIHRoZSBzaGlwcGluZyBib3guZXRpdGxleBxSZXR1cm5MYWJlbFNvdXJjZUVudW1lcmF0aW9uZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZXNjcmlwdGlvbng+RW51bWVyYXRlcyBzZXZlcmFsIHR5cGVzIG9mIHJldHVybiBsYWJlbHMgZm9yIHByb2R1Y3QgcmV0dXJucy5maGVhZGVyomZ1bmlxdWVwM1puY09wUjNISFgyalZPMmtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frxtm79bzsvoyp5c13p214ame51lp97caskzkdzlsj7lyz3q8iq41s"},"kjzl6cwe1jw14b3erzg92qhpdl8p9j7lwz7xiwhfwjfd0bqba34400lgtb20aex":{"alias":"OfferItemCondition","commits":[{"jws":{"payload":"AXESIEsm8ec9eNJIfLg7zeQnv1j74iGFUy5Ps--iEv4BLh5T","signatures":[{"signature":"eU3tUDjGaQdpI_LfcFa6DN0KEokRNpsIn8_ThhY8UhIjlHJOUirQhWSPHgM1qMjqIZvbdG1ChQ4_XpM14_rEDw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicle3y6oply2jehzob3zxscpp2y7prcdbktfzh3h35ccl7aclq6km"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoSiZWNvbnN0cERhbWFnZWRDb25kaXRpb25rZGVzY3JpcHRpb254I0luZGljYXRlcyB0aGF0IHRoZSBpdGVtIGlzIGRhbWFnZWQuomVjb25zdGxOZXdDb25kaXRpb25rZGVzY3JpcHRpb254H0luZGljYXRlcyB0aGF0IHRoZSBpdGVtIGlzIG5ldy6iZWNvbnN0dFJlZnVyYmlzaGVkQ29uZGl0aW9ua2Rlc2NyaXB0aW9ueCdJbmRpY2F0ZXMgdGhhdCB0aGUgaXRlbSBpcyByZWZ1cmJpc2hlZC6iZWNvbnN0bVVzZWRDb25kaXRpb25rZGVzY3JpcHRpb254IEluZGljYXRlcyB0aGF0IHRoZSBpdGVtIGlzIHVzZWQuZXRpdGxlck9mZmVySXRlbUNvbmRpdGlvbmckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNrZGVzY3JpcHRpb254K0EgbGlzdCBvZiBwb3NzaWJsZSBjb25kaXRpb25zIGZvciB0aGUgaXRlbS5maGVhZGVyomZ1bmlxdWVwK2xON0REK1lLYU9Tc1RvYmtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frymw9303kjgdwgn1vnsm3uigeef013e58ibf47q58g48nkema222o"},"kjzl6cwe1jw147hec8zp4i2j6awt19hnk439qet74qp3n2yr0t01bes2dtapbpf":{"alias":"RefundTypeEnumeration","commits":[{"jws":{"payload":"AXESIOnnSPlyp1FK7vJDgPt6IdjjHrtQZ70fNXI16AnIvIND","signatures":[{"signature":"LWe7VS3WoW9_xAnoUGi21DkKNzMfiowA6WvcJyPUZx9a5nTaL40-fO37USDMg2dRRNVlxysgWnWgH9cqI0_ICg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihj45eps4vhkffo54sdqd5xuioy4mplwudhxuptk4rv5ae4rpedim"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoOiZWNvbnN0bkV4Y2hhbmdlUmVmdW5ka2Rlc2NyaXB0aW9ueEhTcGVjaWZpZXMgdGhhdCBhIHJlZnVuZCBjYW4gYmUgZG9uZSBhcyBhbiBleGNoYW5nZSBmb3IgdGhlIHNhbWUgcHJvZHVjdC6iZWNvbnN0akZ1bGxSZWZ1bmRrZGVzY3JpcHRpb254WFNwZWNpZmllcyB0aGF0IGEgcmVmdW5kIGNhbiBiZSBkb25lIGluIHRoZSBmdWxsIGFtb3VudCB0aGUgY3VzdG9tZXIgcGFpZCBmb3IgdGhlIHByb2R1Y3SiZWNvbnN0cVN0b3JlQ3JlZGl0UmVmdW5ka2Rlc2NyaXB0aW9ueFZTcGVjaWZpZXMgdGhhdCB0aGUgY3VzdG9tZXIgcmVjZWl2ZXMgYSBzdG9yZSBjcmVkaXQgYXMgcmVmdW5kIHdoZW4gcmV0dXJuaW5nIGEgcHJvZHVjdGV0aXRsZXVSZWZ1bmRUeXBlRW51bWVyYXRpb25nJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEja2Rlc2NyaXB0aW9ueDhFbnVtZXJhdGVzIHNldmVyYWwga2luZHMgb2YgcHJvZHVjdCByZXR1cm4gcmVmdW5kIHR5cGVzLmZoZWFkZXKiZnVuaXF1ZXBtYTRmdmNLMG9Lb1BDdnRNa2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frxx7pz3xuo0i0ctlagzhjj1397tbmppuhw5345q89d53ky8c438qo"},"kjzl6cwe1jw149zonx3wnhub5z22oeoiruc0910bqeuty7vuq9r57vmq5z69smf":{"alias":"ReturnMethodEnumeration","commits":[{"jws":{"payload":"AXESIAcJl-aZxfKd72OM-qbF7gZDOcqwh8X9D_dXkZDQalcS","signatures":[{"signature":"YA-HaUpVL1NOEk248WoXjVXWWDO-9XjpCxTt-lPMFQ3rcUFOwHfaeUJPlO54XHJXAl6yfjqtfG86b2TvWb_xDw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiahbgl6ngof6ko66y4m7ktml3qgim44vmehyx6q752xsgina2sxci"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoOiZWNvbnN0bVJldHVybkF0S2lvc2trZGVzY3JpcHRpb254N1NwZWNpZmllcyB0aGF0IHByb2R1Y3QgcmV0dXJucyBtdXN0IGJlIG1hZGUgYXQgYSBraW9zay6iZWNvbnN0bFJldHVybkJ5TWFpbGtkZXNjcmlwdGlvbng3U3BlY2lmaWVzIHRoYXQgcHJvZHVjdCByZXR1cm5zIG11c3QgdG8gYmUgZG9uZSBieSBtYWlsLqJlY29uc3RtUmV0dXJuSW5TdG9yZWtkZXNjcmlwdGlvbng3U3BlY2lmaWVzIHRoYXQgcHJvZHVjdCByZXR1cm5zIG11c3QgYmUgbWFkZSBpbiBhIHN0b3JlLmV0aXRsZXdSZXR1cm5NZXRob2RFbnVtZXJhdGlvbmckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNrZGVzY3JpcHRpb254M0VudW1lcmF0ZXMgc2V2ZXJhbCB0eXBlcyBvZiBwcm9kdWN0IHJldHVybiBtZXRob2RzLmZoZWFkZXKiZnVuaXF1ZXB5NDBmclpFdWd3MnNDS3pSa2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1fryf1re3fs72vjehar1kedhzpds76bftn8zc2iitd140xm2i4lnjeo"},"kjzl6cwe1jw14b0ahi158vyvhvby1cgv4bowlz7wvxilcmsnnkkg65l50jq5yve":{"alias":"MerchantReturnEnumeration","commits":[{"jws":{"payload":"AXESIOiB0RlFQy7v3cC4sg8SFDYFR7NoNfDKkHid6PFd5OGt","signatures":[{"signature":"4F30lpVsCeJ_b7OoQ5tCC4aSw7kEnpXcQPXD2J8LAXIkPsJLcJzvZ5Vx2cIMBWrDrbS1203dKuyGvnorAvdGDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihiqhirsrkdf3x53qfywihrefbwavd3g2bv6dfja6e55dyv3zhbvu"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoSiZWNvbnN0eCBNZXJjaGFudFJldHVybkZpbml0ZVJldHVybldpbmRvd2tkZXNjcmlwdGlvbng8U3BlY2lmaWVzIHRoYXQgdGhlcmUgaXMgYSBmaW5pdGUgd2luZG93IGZvciBwcm9kdWN0IHJldHVybnMuomVjb25zdHgaTWVyY2hhbnRSZXR1cm5Ob3RQZXJtaXR0ZWRrZGVzY3JpcHRpb254MVNwZWNpZmllcyB0aGF0IHByb2R1Y3QgcmV0dXJucyBhcmUgbm90IHBlcm1pdHRlZC6iZWNvbnN0eB1NZXJjaGFudFJldHVyblVubGltaXRlZFdpbmRvd2tkZXNjcmlwdGlvbnhAU3BlY2lmaWVzIHRoYXQgdGhlcmUgaXMgYW4gdW5saW1pdGVkIHdpbmRvdyBmb3IgcHJvZHVjdCByZXR1cm5zLqJlY29uc3R4GU1lcmNoYW50UmV0dXJuVW5zcGVjaWZpZWRrZGVzY3JpcHRpb254N1NwZWNpZmllcyB0aGF0IGEgcHJvZHVjdCByZXR1cm4gcG9saWN5IGlzIG5vdCBwcm92aWRlZC5ldGl0bGV4GU1lcmNoYW50UmV0dXJuRW51bWVyYXRpb25nJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEja2Rlc2NyaXB0aW9ueDRFbnVtZXJhdGVzIHNldmVyYWwga2luZHMgb2YgcHJvZHVjdCByZXR1cm4gcG9saWNpZXMuZmhlYWRlcqJmdW5pcXVlcGRhQ0V3NkVRa2VxMTJIellrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1fryma2kg85b7bzz2sy1knxar53wag9v2c7tu3s7m9ezrqbnwa2fz7k"},"kjzl6cwe1jw147kj7ry7nkin9lo76t8mt3ijwcxljz9oi9qkm0wzbbes9wen0fc":{"alias":"MerchantReturnPolicySeasonalOverride","commits":[{"jws":{"payload":"AXESIMgnU1PIoWnsXjBufT0gody1LQODXiEWQ2MPbzRRwwRi","signatures":[{"signature":"LdpxwV69NGRNCEYZX65PDXr6hCoeUMavwIfVsvtz3rumtHCqoujUk1-OsNpXOsmBPzPFoKn9jmpX5Mpf3ne9Dg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreigie5jvhsfbnhwf4mdopu6sbio4wuwqha26eelegyypn42fdqyemi"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxleCRNZXJjaGFudFJldHVyblBvbGljeVNlYXNvbmFsT3ZlcnJpZGVnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjanByb3BlcnRpZXOkZ2VuZERhdGWiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGWiZHR5cGVmc3RyaW5nZmZvcm1hdGlkYXRlLXRpbWVrZGVzY3JpcHRpb254ZVRoZSBlbmQgZGF0ZSBhbmQgdGltZSBvZiB0aGUgaXRlbSAoaW4gW0lTTyA4NjAxIGRhdGUgZm9ybWF0XShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxKSkuaXN0YXJ0RGF0ZaJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZaJkdHlwZWZzdHJpbmdmZm9ybWF0aWRhdGUtdGltZWtkZXNjcmlwdGlvbnhnVGhlIHN0YXJ0IGRhdGUgYW5kIHRpbWUgb2YgdGhlIGl0ZW0gKGluIFtJU08gODYwMSBkYXRlIGZvcm1hdF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSkpLnJtZXJjaGFudFJldHVybkRheXOiZW9uZU9mgqFlYW55T2aDoWR0eXBlZ2ludGVnZXKiZHR5cGVmc3RyaW5nZmZvcm1hdGRkYXRlomR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1lomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoOhZHR5cGVnaW50ZWdlcqJkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGWiZHR5cGVmc3RyaW5nZmZvcm1hdGlkYXRlLXRpbWVrZGVzY3JpcHRpb2542VNwZWNpZmllcyBlaXRoZXIgYSBmaXhlZCByZXR1cm4gZGF0ZSBvciB0aGUgbnVtYmVyIG9mIGRheXMgKGZyb20gdGhlIGRlbGl2ZXJ5IGRhdGUpIHRoYXQgYSBwcm9kdWN0IGNhbiBiZSByZXR1cm5lZC4gVXNlZCB3aGVuIHRoZSBbW3JldHVyblBvbGljeUNhdGVnb3J5XV0gcHJvcGVydHkgaXMgc3BlY2lmaWVkIGFzIFtbTWVyY2hhbnRSZXR1cm5GaW5pdGVSZXR1cm5XaW5kb3ddXS50cmV0dXJuUG9saWN5Q2F0ZWdvcnmiZW9uZU9mgqFkJHJlZnggc2NoZW1hOk1lcmNoYW50UmV0dXJuRW51bWVyYXRpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ4IHNjaGVtYTpNZXJjaGFudFJldHVybkVudW1lcmF0aW9ua2Rlc2NyaXB0aW9ueDxTcGVjaWZpZXMgYW4gYXBwbGljYWJsZSByZXR1cm4gcG9saWN5IChmcm9tIGFuIGVudW1lcmF0aW9uKS5rZGVmaW5pdGlvbnOiZVRoaW5npGR0eXBlZm9iamVjdGV0aXRsZWVUaGluZ2pwcm9wZXJ0aWVzrmN1cmyjZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb25wVVJMIG9mIHRoZSBpdGVtLmRuYW1lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnVUaGUgbmFtZSBvZiB0aGUgaXRlbS5lQHR5cGWhZHR5cGVmc3RyaW5nZWltYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb254UUFuIGltYWdlIG9mIHRoZSBpdGVtLiBUaGlzIGNhbiBiZSBhIFtbVVJMXV0gb3IgYSBmdWxseSBkZXNjcmliZWQgW1tJbWFnZU9iamVjdF1dLmZzYW1lQXOiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnidVVJMIG9mIGEgcmVmZXJlbmNlIFdlYiBwYWdlIHRoYXQgdW5hbWJpZ3VvdXNseSBpbmRpY2F0ZXMgdGhlIGl0ZW0ncyBpZGVudGl0eS4gRS5nLiB0aGUgVVJMIG9mIHRoZSBpdGVtJ3MgV2lraXBlZGlhIHBhZ2UsIFdpa2lkYXRhIGVudHJ5LCBvciBvZmZpY2lhbCB3ZWJzaXRlLmhAY29udGV4dKFkdHlwZWZzdHJpbmdpc3ViamVjdE9momVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueClBIENyZWF0aXZlV29yayBvciBFdmVudCBhYm91dCB0aGlzIFRoaW5nLmppZGVudGlmaWVyomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVla2Rlc2NyaXB0aW9ueQFJVGhlIGlkZW50aWZpZXIgcHJvcGVydHkgcmVwcmVzZW50cyBhbnkga2luZCBvZiBpZGVudGlmaWVyIGZvciBhbnkga2luZCBvZiBbW1RoaW5nXV0sIHN1Y2ggYXMgSVNCTnMsIEdUSU4gY29kZXMsIFVVSURzIGV0Yy4gU2NoZW1hLm9yZyBwcm92aWRlcyBkZWRpY2F0ZWQgcHJvcGVydGllcyBmb3IgcmVwcmVzZW50aW5nIG1hbnkgb2YgdGhlc2UsIGVpdGhlciBhcyB0ZXh0dWFsIHN0cmluZ3Mgb3IgYXMgVVJMIChVUkkpIGxpbmtzLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI2lkZW50aWZpZXJCZykgZm9yIG1vcmUgZGV0YWlscy4KICAgICAgICBrZGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueBpBIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtLm1hbHRlcm5hdGVOYW1lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnZBbiBhbGlhcyBmb3IgdGhlIGl0ZW0ubmFkZGl0aW9uYWxUeXBlomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb255AZ9BbiBhZGRpdGlvbmFsIHR5cGUgZm9yIHRoZSBpdGVtLCB0eXBpY2FsbHkgdXNlZCBmb3IgYWRkaW5nIG1vcmUgc3BlY2lmaWMgdHlwZXMgZnJvbSBleHRlcm5hbCB2b2NhYnVsYXJpZXMgaW4gbWljcm9kYXRhIHN5bnRheC4gVGhpcyBpcyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHNvbWV0aGluZyBhbmQgYSBjbGFzcyB0aGF0IHRoZSB0aGluZyBpcyBpbi4gSW4gUkRGYSBzeW50YXgsIGl0IGlzIGJldHRlciB0byB1c2UgdGhlIG5hdGl2ZSBSREZhIHN5bnRheCAtIHRoZSAndHlwZW9mJyBhdHRyaWJ1dGUgLSBmb3IgbXVsdGlwbGUgdHlwZXMuIFNjaGVtYS5vcmcgdG9vbHMgbWF5IGhhdmUgb25seSB3ZWFrZXIgdW5kZXJzdGFuZGluZyBvZiBleHRyYSB0eXBlcywgaW4gcGFydGljdWxhciB0aG9zZSBkZWZpbmVkIGV4dGVybmFsbHkub3BvdGVudGlhbEFjdGlvbqJlb25lT2aCoWQkcmVmbXNjaGVtYTpBY3Rpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOkFjdGlvbmtkZXNjcmlwdGlvbnhySW5kaWNhdGVzIGEgcG90ZW50aWFsIEFjdGlvbiwgd2hpY2ggZGVzY3JpYmVzIGFuIGlkZWFsaXplZCBhY3Rpb24gaW4gd2hpY2ggdGhpcyB0aGluZyB3b3VsZCBwbGF5IGFuICdvYmplY3QnIHJvbGUucG1haW5FbnRpdHlPZlBhZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueLBJbmRpY2F0ZXMgYSBwYWdlIChvciBvdGhlciBDcmVhdGl2ZVdvcmspIGZvciB3aGljaCB0aGlzIHRoaW5nIGlzIHRoZSBtYWluIGVudGl0eSBiZWluZyBkZXNjcmliZWQuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjbWFpbkVudGl0eUJhY2tncm91bmQpIGZvciBkZXRhaWxzLngZZGlzYW1iaWd1YXRpbmdEZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2547EEgc3ViIHByb3BlcnR5IG9mIGRlc2NyaXB0aW9uLiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGZyb20gb3RoZXIsIHNpbWlsYXIgaXRlbXMuIEluZm9ybWF0aW9uIGZyb20gb3RoZXIgcHJvcGVydGllcyAoaW4gcGFydGljdWxhciwgbmFtZSkgbWF5IGJlIG5lY2Vzc2FyeSBmb3IgdGhlIGRlc2NyaXB0aW9uIHRvIGJlIHVzZWZ1bCBmb3IgZGlzYW1iaWd1YXRpb24ua2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5qSW50YW5naWJsZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmcyMvZGVmaW5pdGlvbnMvVGhpbmdrZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmV0aXRsZWpJbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5rZGVzY3JpcHRpb254RkEgc2Vhc29uYWwgb3ZlcnJpZGUgb2YgYSByZXR1cm4gcG9saWN5LCBmb3IgZXhhbXBsZSB1c2VkIGZvciBob2xpZGF5cy5maGVhZGVyomZ1bmlxdWVwZlgzZHFhek5YSkVlMEx2RWtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frxxu0naraflwlga434fxe6wzxi3yxa2su9x8ykmij4h552eg3n11c"},"kjzl6cwe1jw14b28pip3wmyhbvr7kemrrw406f69rorri6mhfazd3yyue3rrlv8":{"alias":"ProductGroup","commits":[{"jws":{"payload":"AXESICOVVlh4s3dOWr88jiPEWb3xkq7khDooCZG42N0GbIav","signatures":[{"signature":"js7hDOErdJnzsJ0LOkatEoxfe1gI-We1O8I6ssZwVqtki2xJuz7pdYpc2dJms8QsPypMrBjcfAnGpaS281U5DQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreibdsvlfq6fto5hfvpz4ryr4iwn56gjk5zeehiuateny3doqm3egv4"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frymnxxgyjs3978htht41xicch9nwlgw5flb3vwu3h88ns4atgbi0w"},"kjzl6cwe1jw148jfzv2im88pq3j6j0454jfihgi1rs302as0jegj4um9pgu6hpt":{"alias":"ProductModel","commits":[{"jws":{"payload":"AXESIH3fb4ILH2EIdW7fyA3UGYGf8lkAk1axTyb3RdUQbY3u","signatures":[{"signature":"jh21pcCb-797ngAxtjmB4R4MzjkrCTmS2x8X4HtCYrQyQ0jrPdYMWMQy692h7H15Drq_u8h0YTl6xcxxk9QaBw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreid535xyecy7meehk3w7zag5igmbt7zfsaetk2yu6jxxixkra3mn5y"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fry4q9r0xwe2lyxl4ef4tgga6bg5ccljpcgcn7tytk2hqd13qm5zi8"},"kjzl6cwe1jw148ki7pyg6dpf59ebj3d6rdxasb4j090b1nx9gr345x6eym47wat":{"alias":"Demand","commits":[{"jws":{"payload":"AXESILSCnFF_qGPTqwFLSc3uUxCR87ceLCXekp93DYy4aMWi","signatures":[{"signature":"k3Qid0eFyvcWy2gzJKbsh7K1KMjSvEkwQ-vyNhx26CRPiAKEhpZynV6xymzQOrlpEBHsu0m3Rc8MMerm7jLCBw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifuqkofc75impj2wakljhg64uyqshz3ohrmexpjfh3xbwglq2gfui"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fry4xtiwkz1dgrpettzrxs2r0spb475s26ju4jb4m5m3xme5a05ou8"},"kjzl6cwe1jw14bbi6l04ct9zif7n9mxqqwh459h727zcn8bpwig1zrwarux6ayf":{"alias":"PaymentMethod","commits":[{"jws":{"payload":"AXESILgELUgfswXTmyk5uFy_RTAuQI4xZ-1ws-cHFtmnadpj","signatures":[{"signature":"F8_NLwFyVTAqWd-P9qywGsaJs8R70qY_7wzBsqQh4C3rScdmHEtWuLU-QAUnC_fwwzBIdGv5PySPdXyPk7H2BQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifyaqwuqh5taxjzwkjzxbol6rjqfzai4mlh5vylhzyhc3m2o2o2mm"},"linkedBlock":"omRkYXRhpGR0eXBlZm9iamVjdGV0aXRsZW1QYXltZW50TWV0aG9kZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZXNjcmlwdGlvbnkCu0EgcGF5bWVudCBtZXRob2QgaXMgYSBzdGFuZGFyZGl6ZWQgcHJvY2VkdXJlIGZvciB0cmFuc2ZlcnJpbmcgdGhlIG1vbmV0YXJ5IGFtb3VudCBmb3IgYSBwdXJjaGFzZS4gUGF5bWVudCBtZXRob2RzIGFyZSBjaGFyYWN0ZXJpemVkIGJ5IHRoZSBsZWdhbCBhbmQgdGVjaG5pY2FsIHN0cnVjdHVyZXMgdXNlZCwgYW5kIGJ5IHRoZSBvcmdhbml6YXRpb24gb3IgZ3JvdXAgY2Fycnlpbmcgb3V0IHRoZSB0cmFuc2FjdGlvbi5cblxuQ29tbW9ubHkgdXNlZCB2YWx1ZXM6XG5cbiogaHR0cDovL3B1cmwub3JnL2dvb2RyZWxhdGlvbnMvdjEjQnlCYW5rVHJhbnNmZXJJbkFkdmFuY2VcbiogaHR0cDovL3B1cmwub3JnL2dvb2RyZWxhdGlvbnMvdjEjQnlJbnZvaWNlXG4qIGh0dHA6Ly9wdXJsLm9yZy9nb29kcmVsYXRpb25zL3YxI0Nhc2hcbiogaHR0cDovL3B1cmwub3JnL2dvb2RyZWxhdGlvbnMvdjEjQ2hlY2tJbkFkdmFuY2VcbiogaHR0cDovL3B1cmwub3JnL2dvb2RyZWxhdGlvbnMvdjEjQ09EXG4qIGh0dHA6Ly9wdXJsLm9yZy9nb29kcmVsYXRpb25zL3YxI0RpcmVjdERlYml0XG4qIGh0dHA6Ly9wdXJsLm9yZy9nb29kcmVsYXRpb25zL3YxI0dvb2dsZUNoZWNrb3V0XG4qIGh0dHA6Ly9wdXJsLm9yZy9nb29kcmVsYXRpb25zL3YxI1BheVBhbFxuKiBodHRwOi8vcHVybC5vcmcvZ29vZHJlbGF0aW9ucy92MSNQYXlTd2FybQogICAgICAgIGZoZWFkZXKiZnVuaXF1ZXBDRzZ6dnp3bFFueHJKdjFha2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1fryohtatcuz470j06dgj3y7axphfea7srdx77c77666edom3vwtwqo"},"kjzl6cwe1jw146g6l8y0fynzdtqjpq5ie16j0v3b8i3eghpei1iwrr3gd3q20qm":{"alias":"ItemAvailability","commits":[{"jws":{"payload":"AXESIPIXLJjN5dy9L_JySshQnFcMqfd7B_vDGZizDmKp0Voa","signatures":[{"signature":"4A1rYhE003y-xDNZNFNj5USA0XRGjQ2dbsQZC5TqMfhmE4pIcAHRgzX3bUfSvc3z3cljrtqacGi7BxVEHUU7BQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihsc4wjrtpf3s6s74tsjlefbhcxbsu7o6yh7pbrtgftbzrktuk2di"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoqiZWNvbnN0aUJhY2tPcmRlcmtkZXNjcmlwdGlvbngzSW5kaWNhdGVzIHRoYXQgdGhlIGl0ZW0gaXMgYXZhaWxhYmxlIG9uIGJhY2sgb3JkZXIuomVjb25zdGxEaXNjb250aW51ZWRrZGVzY3JpcHRpb254LkluZGljYXRlcyB0aGF0IHRoZSBpdGVtIGhhcyBiZWVuIGRpc2NvbnRpbnVlZC6iZWNvbnN0Z0luU3RvY2trZGVzY3JpcHRpb254JEluZGljYXRlcyB0aGF0IHRoZSBpdGVtIGlzIGluIHN0b2NrLqJlY29uc3RrSW5TdG9yZU9ubHlrZGVzY3JpcHRpb254QEluZGljYXRlcyB0aGF0IHRoZSBpdGVtIGlzIGF2YWlsYWJsZSBvbmx5IGF0IHBoeXNpY2FsIGxvY2F0aW9ucy6iZWNvbnN0c0xpbWl0ZWRBdmFpbGFiaWxpdHlrZGVzY3JpcHRpb254MUluZGljYXRlcyB0aGF0IHRoZSBpdGVtIGhhcyBsaW1pdGVkIGF2YWlsYWJpbGl0eS6iZWNvbnN0ak9ubGluZU9ubHlrZGVzY3JpcHRpb254MUluZGljYXRlcyB0aGF0IHRoZSBpdGVtIGlzIGF2YWlsYWJsZSBvbmx5IG9ubGluZS6iZWNvbnN0ak91dE9mU3RvY2trZGVzY3JpcHRpb254KEluZGljYXRlcyB0aGF0IHRoZSBpdGVtIGlzIG91dCBvZiBzdG9jay6iZWNvbnN0aFByZU9yZGVya2Rlc2NyaXB0aW9ueDNJbmRpY2F0ZXMgdGhhdCB0aGUgaXRlbSBpcyBhdmFpbGFibGUgZm9yIHByZS1vcmRlci6iZWNvbnN0Z1ByZVNhbGVrZGVzY3JpcHRpb254W0luZGljYXRlcyB0aGF0IHRoZSBpdGVtIGlzIGF2YWlsYWJsZSBmb3Igb3JkZXJpbmcgYW5kIGRlbGl2ZXJ5IGJlZm9yZSBnZW5lcmFsIGF2YWlsYWJpbGl0eS6iZWNvbnN0Z1NvbGRPdXRrZGVzY3JpcHRpb254JUluZGljYXRlcyB0aGF0IHRoZSBpdGVtIGhhcyBzb2xkIG91dC5ldGl0bGVwSXRlbUF2YWlsYWJpbGl0eWckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNrZGVzY3JpcHRpb254MEEgbGlzdCBvZiBwb3NzaWJsZSBwcm9kdWN0IGF2YWlsYWJpbGl0eSBvcHRpb25zLmZoZWFkZXKiZnVuaXF1ZXBVRFpta0s3R1UweHNzNE44a2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frxpv2v3lv5iijmbgs6xz6rsefa53jwgo6t9wn4auh1cokd6had98g"},"kjzl6cwe1jw14a8ya9osozweii6xzqu1ubtidlw0jzjqcvu0sr4w5rf8aidm361":{"alias":"DeliveryMethod","commits":[{"jws":{"payload":"AXESIHuBOVO-IS1kP_iPTvN8Et_PxTAvxGH5VHJCznpyrGZX","signatures":[{"signature":"W484-dJTOL9iGrrUq20ULp8_pwiQ4Rlkj6rRz-QMKFRUROToMYuekOemJbFhAsJja0K4_zcNaJwGHPDlhmNZDQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreid3qe4vhprbfvsd76epj3zxyew7z7ctal6emh4vi4sczz5hfldgk4"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoOiZWNvbnN0bkxvY2tlckRlbGl2ZXJ5a2Rlc2NyaXB0aW9ueD9BIERlbGl2ZXJ5TWV0aG9kIGluIHdoaWNoIGFuIGl0ZW0gaXMgbWFkZSBhdmFpbGFibGUgdmlhIGxvY2tlci6iZWNvbnN0bE9uU2l0ZVBpY2t1cGtkZXNjcmlwdGlvbnhbQSBEZWxpdmVyeU1ldGhvZCBpbiB3aGljaCBhbiBpdGVtIGlzIGNvbGxlY3RlZCBvbiBzaXRlLCBlLmcuIGluIGEgc3RvcmUgb3IgYXQgYSBib3ggb2ZmaWNlLqJlY29uc3RtUGFyY2VsU2VydmljZWtkZXNjcmlwdGlvbnjxQSBwcml2YXRlIHBhcmNlbCBzZXJ2aWNlIGFzIHRoZSBkZWxpdmVyeSBtb2RlIGF2YWlsYWJsZSBmb3IgYSBjZXJ0YWluIG9mZmVyLlxuXG5Db21tb25seSB1c2VkIHZhbHVlczpcblxuKiBodHRwOi8vcHVybC5vcmcvZ29vZHJlbGF0aW9ucy92MSNESExcbiogaHR0cDovL3B1cmwub3JnL2dvb2RyZWxhdGlvbnMvdjEjRmVkZXJhbEV4cHJlc3NcbiogaHR0cDovL3B1cmwub3JnL2dvb2RyZWxhdGlvbnMvdjEjVVBTCiAgICAgIGV0aXRsZW5EZWxpdmVyeU1ldGhvZGckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNrZGVzY3JpcHRpb255AwFBIGRlbGl2ZXJ5IG1ldGhvZCBpcyBhIHN0YW5kYXJkaXplZCBwcm9jZWR1cmUgZm9yIHRyYW5zZmVycmluZyB0aGUgcHJvZHVjdCBvciBzZXJ2aWNlIHRvIHRoZSBkZXN0aW5hdGlvbiBvZiBmdWxmaWxsbWVudCBjaG9zZW4gYnkgdGhlIGN1c3RvbWVyLiBEZWxpdmVyeSBtZXRob2RzIGFyZSBjaGFyYWN0ZXJpemVkIGJ5IHRoZSBtZWFucyBvZiB0cmFuc3BvcnRhdGlvbiB1c2VkLCBhbmQgYnkgdGhlIG9yZ2FuaXphdGlvbiBvciBncm91cCB0aGF0IGlzIHRoZSBjb250cmFjdGluZyBwYXJ0eSBmb3IgdGhlIHNlbmRpbmcgb3JnYW5pemF0aW9uIG9yIHBlcnNvbi5cblxuQ29tbW9ubHkgdXNlZCB2YWx1ZXM6XG5cbiogaHR0cDovL3B1cmwub3JnL2dvb2RyZWxhdGlvbnMvdjEjRGVsaXZlcnlNb2RlRGlyZWN0RG93bmxvYWRcbiogaHR0cDovL3B1cmwub3JnL2dvb2RyZWxhdGlvbnMvdjEjRGVsaXZlcnlNb2RlRnJlaWdodFxuKiBodHRwOi8vcHVybC5vcmcvZ29vZHJlbGF0aW9ucy92MSNEZWxpdmVyeU1vZGVNYWlsXG4qIGh0dHA6Ly9wdXJsLm9yZy9nb29kcmVsYXRpb25zL3YxI0RlbGl2ZXJ5TW9kZU93bkZsZWV0XG4qIGh0dHA6Ly9wdXJsLm9yZy9nb29kcmVsYXRpb25zL3YxI0RlbGl2ZXJ5TW9kZVBpY2tVcFxuKiBodHRwOi8vcHVybC5vcmcvZ29vZHJlbGF0aW9ucy92MSNESExcbiogaHR0cDovL3B1cmwub3JnL2dvb2RyZWxhdGlvbnMvdjEjRmVkZXJhbEV4cHJlc3NcbiogaHR0cDovL3B1cmwub3JnL2dvb2RyZWxhdGlvbnMvdjEjVVBTCiAgICAgICAgZmhlYWRlcqJmdW5pcXVlcFh1aVJBb1NFb1F5d3lsdkVrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frygvnt0wc1raf7lddq6tp3o1uornny4sbfmdhogysoz0ayqot2iv4"},"kjzl6cwe1jw1461cjs4ls5c01xvq3p7xbddh8a5setala8wt08fe5g2aa2ng84q":{"alias":"BusinessFunction","commits":[{"jws":{"payload":"AXESIKMj3kPthdF59MMcLRRfThMZL5I7Cra8H5lyB7Ka50jO","signatures":[{"signature":"0ipgkISHm2EEbi3TU_KZEl9qKHWJkvz73LNKd0JT6PWK97MN0UYvzHeQfNELSHjttDo9yOeenB6MWCvkETsEBg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifdeppeh3mf2f47jqy4fukf6tqtdexzeoykw26b7glsa6zjvz2izy"},"linkedBlock":"omRkYXRhpGR0eXBlZm9iamVjdGV0aXRsZXBCdXNpbmVzc0Z1bmN0aW9uZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZXNjcmlwdGlvbnkDElRoZSBidXNpbmVzcyBmdW5jdGlvbiBzcGVjaWZpZXMgdGhlIHR5cGUgb2YgYWN0aXZpdHkgb3IgYWNjZXNzIChpLmUuLCB0aGUgYnVuZGxlIG9mIHJpZ2h0cykgb2ZmZXJlZCBieSB0aGUgb3JnYW5pemF0aW9uIG9yIGJ1c2luZXNzIHBlcnNvbiB0aHJvdWdoIHRoZSBvZmZlci4gVHlwaWNhbCBhcmUgc2VsbCwgcmVudGFsIG9yIGxlYXNlLCBtYWludGVuYW5jZSBvciByZXBhaXIsIG1hbnVmYWN0dXJlIC8gcHJvZHVjZSwgcmVjeWNsZSAvIGRpc3Bvc2UsIGVuZ2luZWVyaW5nIC8gY29uc3RydWN0aW9uLCBvciBpbnN0YWxsYXRpb24uIFByb3ByaWV0YXJ5IHNwZWNpZmljYXRpb25zIG9mIGFjY2VzcyByaWdodHMgYXJlIGFsc28gaW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MuXG5cbkNvbW1vbmx5IHVzZWQgdmFsdWVzOlxuXG4qIGh0dHA6Ly9wdXJsLm9yZy9nb29kcmVsYXRpb25zL3YxI0NvbnN0cnVjdGlvbkluc3RhbGxhdGlvblxuKiBodHRwOi8vcHVybC5vcmcvZ29vZHJlbGF0aW9ucy92MSNEaXNwb3NlXG4qIGh0dHA6Ly9wdXJsLm9yZy9nb29kcmVsYXRpb25zL3YxI0xlYXNlT3V0XG4qIGh0dHA6Ly9wdXJsLm9yZy9nb29kcmVsYXRpb25zL3YxI01haW50YWluXG4qIGh0dHA6Ly9wdXJsLm9yZy9nb29kcmVsYXRpb25zL3YxI1Byb3ZpZGVTZXJ2aWNlXG4qIGh0dHA6Ly9wdXJsLm9yZy9nb29kcmVsYXRpb25zL3YxI1JlcGFpclxuKiBodHRwOi8vcHVybC5vcmcvZ29vZHJlbGF0aW9ucy92MSNTZWxsXG4qIGh0dHA6Ly9wdXJsLm9yZy9nb29kcmVsYXRpb25zL3YxI0J1eQogICAgICAgIGZoZWFkZXKiZnVuaXF1ZXBwZGIxOHNSY3JYL09JcHpja2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frxmxl8o0qw5xcdsxlmbccwv3uiw961cbbcvda9nxgmq893murdtkw"},"kjzl6cwe1jw14aqd7sj871pdaj26ct19m4pf4lfg0z0sqidu60r2qjih1gbgsmw":{"alias":"BusinessEntityType","commits":[{"jws":{"payload":"AXESIKn5oX7cjDBf-rS02iL4jJrJJK-zxVhsEkMz515Wt5KS","signatures":[{"signature":"yA4rR0OrfU5jRY83EtwEgphj8Xih5ntNrY_zZhTJddplH0NfpjFKS2jd_8nFRxMKNRDVF28-5_7MlVe0yOntAA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifj7gqx5xemgbp7vnfu3irprde2zesk7m6flbwbeqzt45pfnn4ssi"},"linkedBlock":"omRkYXRhpGR0eXBlZm9iamVjdGV0aXRsZXJCdXNpbmVzc0VudGl0eVR5cGVnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEja2Rlc2NyaXB0aW9ueQGuQSBidXNpbmVzcyBlbnRpdHkgdHlwZSBpcyBhIGNvbmNlcHR1YWwgZW50aXR5IHJlcHJlc2VudGluZyB0aGUgbGVnYWwgZm9ybSwgdGhlIHNpemUsIHRoZSBtYWluIGxpbmUgb2YgYnVzaW5lc3MsIHRoZSBwb3NpdGlvbiBpbiB0aGUgdmFsdWUgY2hhaW4sIG9yIGFueSBjb21iaW5hdGlvbiB0aGVyZW9mLCBvZiBhbiBvcmdhbml6YXRpb24gb3IgYnVzaW5lc3MgcGVyc29uLlxuXG5Db21tb25seSB1c2VkIHZhbHVlczpcblxuKiBodHRwOi8vcHVybC5vcmcvZ29vZHJlbGF0aW9ucy92MSNCdXNpbmVzc1xuKiBodHRwOi8vcHVybC5vcmcvZ29vZHJlbGF0aW9ucy92MSNFbmR1c2VyXG4qIGh0dHA6Ly9wdXJsLm9yZy9nb29kcmVsYXRpb25zL3YxI1B1YmxpY0luc3RpdHV0aW9uXG4qIGh0dHA6Ly9wdXJsLm9yZy9nb29kcmVsYXRpb25zL3YxI1Jlc2VsbGVyCgkgIGZoZWFkZXKiZnVuaXF1ZXAwTjZGMnR6YnU0di91NVM3a2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frykbhzewqa44eivjh72h0ddgrkodtyx1ociqeitcjgqrd6c1jfmrk"},"kjzl6cwe1jw147dra2av6p3w18ktvc9r2yk5un7slciv0w7tq65yfp42tvmh6tc":{"alias":"PriceSpecification","commits":[{"jws":{"payload":"AXESIMDtba4WxwKXrvP7JMox1AH064jEm6h6ZM8JdxyWr1Ld","signatures":[{"signature":"GQ5coFoxa7fxO7s3O4AH2Qm9-ILfhCOxwZAePOS0rlaUQ0ubSmkwsM--EioqBmVGaLtg95If21Zj4sTjw9grBQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiga5vw24fwhakl25473etfddvab6tvyrre3vb5gjtyjo4ojnl2s3u"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxwhtzkd9rmjnst04ev9cl1rdlx3fbt24md3ne3ucvml04gvu8glc"},"kjzl6cwe1jw149wtl2lfchbqgrr0ckgy2g3rg17e6pj91868omd6r7vpdc26j3j":{"alias":"TypeAndQuantityNode","commits":[{"jws":{"payload":"AXESIDGEPW0d-PMkH61GuFneGk6jUhQMige2a3TWu0lw0V3E","signatures":[{"signature":"Es8L073U-tVia6Ms5z83zv30ZbfEOlHmoNLU1B2sVHjWoSCKboOX9KM1vpP6fLZDCg_bkPSIG-qaca9eGDCtCg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreibrqq6w2hpy6msb7lkgxbm54gsounjbideka63gw5gwxnexbuk5yq"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HSMvZGVmaW5pdGlvbnMvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcuZXRpdGxlc1R5cGVBbmRRdWFudGl0eU5vZGVnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjanByb3BlcnRpZXOlaHVuaXRDb2RlomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueLBUaGUgdW5pdCBvZiBtZWFzdXJlbWVudCBnaXZlbiB1c2luZyB0aGUgVU4vQ0VGQUNUIENvbW1vbiBDb2RlICgzIGNoYXJhY3RlcnMpIG9yIGEgVVJMLiBPdGhlciBjb2RlcyB0aGFuIHRoZSBVTi9DRUZBQ1QgQ29tbW9uIENvZGUgbWF5IGJlIHVzZWQgd2l0aCBhIHByZWZpeCBmb2xsb3dlZCBieSBhIGNvbG9uLmh1bml0VGV4dKJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254dEEgc3RyaW5nIG9yIHRleHQgaW5kaWNhdGluZyB0aGUgdW5pdCBvZiBtZWFzdXJlbWVudC4gVXNlZnVsIGlmIHlvdSBjYW5ub3QgcHJvdmlkZSBhIHN0YW5kYXJkIHVuaXQgY29kZSBmb3IKdW5pdENvZGUuanR5cGVPZkdvb2SiZWFueU9mgqFkJHJlZm5zY2hlbWE6UHJvZHVjdKFkJHJlZm5zY2hlbWE6U2VydmljZWtkZXNjcmlwdGlvbng3VGhlIHByb2R1Y3QgdGhhdCB0aGlzIHN0cnVjdHVyZWQgdmFsdWUgaXMgcmVmZXJyaW5nIHRvLnBhbW91bnRPZlRoaXNHb29komR0eXBlZm51bWJlcmtkZXNjcmlwdGlvbngwVGhlIHF1YW50aXR5IG9mIHRoZSBnb29kcyBpbmNsdWRlZCBpbiB0aGUgb2ZmZXIucGJ1c2luZXNzRnVuY3Rpb26iZCRyZWZ3c2NoZW1hOkJ1c2luZXNzRnVuY3Rpb25rZGVzY3JpcHRpb254rFRoZSBidXNpbmVzcyBmdW5jdGlvbiAoZS5nLiBzZWxsLCBsZWFzZSwgcmVwYWlyLCBkaXNwb3NlKSBvZiB0aGUgb2ZmZXIgb3IgY29tcG9uZW50IG9mIGEgYnVuZGxlIChUeXBlQW5kUXVhbnRpdHlOb2RlKS4gVGhlIGRlZmF1bHQgaXMgaHR0cDovL3B1cmwub3JnL2dvb2RyZWxhdGlvbnMvdjEjU2VsbC5rZGVmaW5pdGlvbnOjZVRoaW5npGR0eXBlZm9iamVjdGV0aXRsZWVUaGluZ2pwcm9wZXJ0aWVzrmN1cmyjZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb25wVVJMIG9mIHRoZSBpdGVtLmRuYW1lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnVUaGUgbmFtZSBvZiB0aGUgaXRlbS5lQHR5cGWhZHR5cGVmc3RyaW5nZWltYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb254UUFuIGltYWdlIG9mIHRoZSBpdGVtLiBUaGlzIGNhbiBiZSBhIFtbVVJMXV0gb3IgYSBmdWxseSBkZXNjcmliZWQgW1tJbWFnZU9iamVjdF1dLmZzYW1lQXOiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnidVVJMIG9mIGEgcmVmZXJlbmNlIFdlYiBwYWdlIHRoYXQgdW5hbWJpZ3VvdXNseSBpbmRpY2F0ZXMgdGhlIGl0ZW0ncyBpZGVudGl0eS4gRS5nLiB0aGUgVVJMIG9mIHRoZSBpdGVtJ3MgV2lraXBlZGlhIHBhZ2UsIFdpa2lkYXRhIGVudHJ5LCBvciBvZmZpY2lhbCB3ZWJzaXRlLmhAY29udGV4dKFkdHlwZWZzdHJpbmdpc3ViamVjdE9momVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueClBIENyZWF0aXZlV29yayBvciBFdmVudCBhYm91dCB0aGlzIFRoaW5nLmppZGVudGlmaWVyomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVla2Rlc2NyaXB0aW9ueQFJVGhlIGlkZW50aWZpZXIgcHJvcGVydHkgcmVwcmVzZW50cyBhbnkga2luZCBvZiBpZGVudGlmaWVyIGZvciBhbnkga2luZCBvZiBbW1RoaW5nXV0sIHN1Y2ggYXMgSVNCTnMsIEdUSU4gY29kZXMsIFVVSURzIGV0Yy4gU2NoZW1hLm9yZyBwcm92aWRlcyBkZWRpY2F0ZWQgcHJvcGVydGllcyBmb3IgcmVwcmVzZW50aW5nIG1hbnkgb2YgdGhlc2UsIGVpdGhlciBhcyB0ZXh0dWFsIHN0cmluZ3Mgb3IgYXMgVVJMIChVUkkpIGxpbmtzLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI2lkZW50aWZpZXJCZykgZm9yIG1vcmUgZGV0YWlscy4KICAgICAgICBrZGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueBpBIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtLm1hbHRlcm5hdGVOYW1lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnZBbiBhbGlhcyBmb3IgdGhlIGl0ZW0ubmFkZGl0aW9uYWxUeXBlomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb255AZ9BbiBhZGRpdGlvbmFsIHR5cGUgZm9yIHRoZSBpdGVtLCB0eXBpY2FsbHkgdXNlZCBmb3IgYWRkaW5nIG1vcmUgc3BlY2lmaWMgdHlwZXMgZnJvbSBleHRlcm5hbCB2b2NhYnVsYXJpZXMgaW4gbWljcm9kYXRhIHN5bnRheC4gVGhpcyBpcyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHNvbWV0aGluZyBhbmQgYSBjbGFzcyB0aGF0IHRoZSB0aGluZyBpcyBpbi4gSW4gUkRGYSBzeW50YXgsIGl0IGlzIGJldHRlciB0byB1c2UgdGhlIG5hdGl2ZSBSREZhIHN5bnRheCAtIHRoZSAndHlwZW9mJyBhdHRyaWJ1dGUgLSBmb3IgbXVsdGlwbGUgdHlwZXMuIFNjaGVtYS5vcmcgdG9vbHMgbWF5IGhhdmUgb25seSB3ZWFrZXIgdW5kZXJzdGFuZGluZyBvZiBleHRyYSB0eXBlcywgaW4gcGFydGljdWxhciB0aG9zZSBkZWZpbmVkIGV4dGVybmFsbHkub3BvdGVudGlhbEFjdGlvbqJlb25lT2aCoWQkcmVmbXNjaGVtYTpBY3Rpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOkFjdGlvbmtkZXNjcmlwdGlvbnhySW5kaWNhdGVzIGEgcG90ZW50aWFsIEFjdGlvbiwgd2hpY2ggZGVzY3JpYmVzIGFuIGlkZWFsaXplZCBhY3Rpb24gaW4gd2hpY2ggdGhpcyB0aGluZyB3b3VsZCBwbGF5IGFuICdvYmplY3QnIHJvbGUucG1haW5FbnRpdHlPZlBhZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueLBJbmRpY2F0ZXMgYSBwYWdlIChvciBvdGhlciBDcmVhdGl2ZVdvcmspIGZvciB3aGljaCB0aGlzIHRoaW5nIGlzIHRoZSBtYWluIGVudGl0eSBiZWluZyBkZXNjcmliZWQuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjbWFpbkVudGl0eUJhY2tncm91bmQpIGZvciBkZXRhaWxzLngZZGlzYW1iaWd1YXRpbmdEZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2547EEgc3ViIHByb3BlcnR5IG9mIGRlc2NyaXB0aW9uLiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGZyb20gb3RoZXIsIHNpbWlsYXIgaXRlbXMuIEluZm9ybWF0aW9uIGZyb20gb3RoZXIgcHJvcGVydGllcyAoaW4gcGFydGljdWxhciwgbmFtZSkgbWF5IGJlIG5lY2Vzc2FyeSBmb3IgdGhlIGRlc2NyaXB0aW9uIHRvIGJlIHVzZWZ1bCBmb3IgZGlzYW1iaWd1YXRpb24ua2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5qSW50YW5naWJsZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmcyMvZGVmaW5pdGlvbnMvVGhpbmdrZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmV0aXRsZWpJbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5vU3RydWN0dXJlZFZhbHVlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlb1N0cnVjdHVyZWRWYWx1ZWtkZXNjcmlwdGlvbniXU3RydWN0dXJlZCB2YWx1ZXMgYXJlIHVzZWQgd2hlbiB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eSBoYXMgYSBtb3JlIGNvbXBsZXggc3RydWN0dXJlIHRoYW4gc2ltcGx5IGJlaW5nIGEgdGV4dHVhbCB2YWx1ZSBvciBhIHJlZmVyZW5jZSB0byBhbm90aGVyIHRoaW5nLmtkZXNjcmlwdGlvbnh7QSBzdHJ1Y3R1cmVkIHZhbHVlIGluZGljYXRpbmcgdGhlIHF1YW50aXR5LCB1bml0IG9mIG1lYXN1cmVtZW50LCBhbmQgYnVzaW5lc3MgZnVuY3Rpb24gb2YgZ29vZHMgaW5jbHVkZWQgaW4gYSBidW5kbGUgb2ZmZXIuZmhlYWRlcqJmdW5pcXVlcGczQ1d3Y2hKTjVibFVYSlVrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1fryehedugd4r7g79c2hdki9eir60kkvpkw8q4dr31s1k1getrift34"},"kjzl6cwe1jw14a953xz1pj32f272923mx7tlb245uf8bi60hc2d4zraft6gpbrp":{"alias":"AggregateOffer","commits":[{"jws":{"payload":"AXESIN0D0_6W9ttkRrD_r3A0DuTsarYu3l78_MUsYxwGE2ZE","signatures":[{"signature":"NsSTeIemWEcvsuGoOUzVIRit3lHhGYrEOsWEpN1ztML12voXJrqscNAs3meKsgNWcpsjiqvxqoUmrI5GypWLBw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreig5apj75fxw3nsenmh7v5ydidxe5rvlmlw6l36pzrjmmmoame3giq"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frygx0c1l85jpt73m80exv07mfin1lkcb5t6rf9stfia28fhys3oxs"},"kjzl6cwe1jw1463ewgtpyi3r0vfj4pbso2v8riodq2jey13af5crlo94h6yjrhe":{"alias":"MenuItem","commits":[{"jws":{"payload":"AXESIOuPkX5WxBNYbYa6vHKYCtG31TmsXOe4MdzI1EL3ShsI","signatures":[{"signature":"AN_MlcKr2S_IfdL169dTx8uvioPbWMa_GDY2Mp1b80dLOA6HG1VRQy1ecfSsI_9_d-vZLtT-RYMDlo65l1SDDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihlr6ix4vwecnmg3bv2xrzjqcwrw7kttlc4464ddxgi2rbposq3ba"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlaE1lbnVJdGVtZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzpGZvZmZlcnOiZW9uZU9mgqFlYW55T2aCoWQkcmVmbXNjaGVtYTpEZW1hbmShZCRyZWZsc2NoZW1hOk9mZmVyomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZtc2NoZW1hOkRlbWFuZKFkJHJlZmxzY2hlbWE6T2ZmZXJrZGVzY3JpcHRpb255AgVBbiBvZmZlciB0byBwcm92aWRlIHRoaXMgaXRlbeKAlGZvciBleGFtcGxlLCBhbiBvZmZlciB0byBzZWxsIGEgcHJvZHVjdCwgcmVudCB0aGUgRFZEIG9mIGEgbW92aWUsIHBlcmZvcm0gYSBzZXJ2aWNlLCBvciBnaXZlIGF3YXkgdGlja2V0cyB0byBhbiBldmVudC4gVXNlIFtbYnVzaW5lc3NGdW5jdGlvbl1dIHRvIGluZGljYXRlIHRoZSBraW5kIG9mIHRyYW5zYWN0aW9uIG9mZmVyZWQsIGkuZS4gc2VsbCwgbGVhc2UsIGV0Yy4gVGhpcyBwcm9wZXJ0eSBjYW4gYWxzbyBiZSB1c2VkIHRvIGRlc2NyaWJlIGEgW1tEZW1hbmRdXS4gV2hpbGUgdGhpcyBwcm9wZXJ0eSBpcyBsaXN0ZWQgYXMgZXhwZWN0ZWQgb24gYSBudW1iZXIgb2YgY29tbW9uIHR5cGVzLCBpdCBjYW4gYmUgdXNlZCBpbiBvdGhlcnMuIEluIHRoYXQgY2FzZSwgdXNpbmcgYSBzZWNvbmQgdHlwZSwgc3VjaCBhcyBQcm9kdWN0IG9yIGEgc3VidHlwZSBvZiBQcm9kdWN0LCBjYW4gY2xhcmlmeSB0aGUgbmF0dXJlIG9mIHRoZSBvZmZlci4KICAgICAgaW1lbnVBZGRPbqJlb25lT2aCoWVhbnlPZoKhZCRyZWZvc2NoZW1hOk1lbnVJdGVtoWQkcmVmcnNjaGVtYTpNZW51U2VjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmb3NjaGVtYTpNZW51SXRlbaFkJHJlZnJzY2hlbWE6TWVudVNlY3Rpb25rZGVzY3JpcHRpb254z0FkZGl0aW9uYWwgbWVudSBpdGVtKHMpIHN1Y2ggYXMgYSBzaWRlIGRpc2ggb2Ygc2FsYWQgb3Igc2lkZSBvcmRlciBvZiBmcmllcyB0aGF0IGNhbiBiZSBhZGRlZCB0byB0aGlzIG1lbnUgaXRlbS4gQWRkaXRpb25hbGx5IGl0IGNhbiBiZSBhIG1lbnUgc2VjdGlvbiBjb250YWluaW5nIGFsbG93ZWQgYWRkLW9uIG1lbnUgaXRlbXMgZm9yIHRoaXMgbWVudSBpdGVtLmludXRyaXRpb26iZCRyZWZ4G3NjaGVtYTpOdXRyaXRpb25JbmZvcm1hdGlvbmtkZXNjcmlwdGlvbng0TnV0cml0aW9uIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZWNpcGUgb3IgbWVudSBpdGVtLm9zdWl0YWJsZUZvckRpZXSiZW9uZU9mgqFkJHJlZnVzY2hlbWE6UmVzdHJpY3RlZERpZXSiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ1c2NoZW1hOlJlc3RyaWN0ZWREaWV0a2Rlc2NyaXB0aW9ueHZJbmRpY2F0ZXMgYSBkaWV0YXJ5IHJlc3RyaWN0aW9uIG9yIGd1aWRlbGluZSBmb3Igd2hpY2ggdGhpcyByZWNpcGUgb3IgbWVudSBpdGVtIGlzIHN1aXRhYmxlLCBlLmcuIGRpYWJldGljLCBoYWxhbCBldGMua2RlZmluaXRpb25zomVUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uakludGFuZ2libGWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZnMjL2RlZmluaXRpb25zL1RoaW5na2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5ldGl0bGVqSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMua2Rlc2NyaXB0aW9ueDZBIGZvb2Qgb3IgZHJpbmsgaXRlbSBsaXN0ZWQgaW4gYSBtZW51IG9yIG1lbnUgc2VjdGlvbi5maGVhZGVyomZ1bmlxdWVwaDZlUmtTYlY4b2dYVlM2bmtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frxnc9yvnclcqo67ig1g3vv8e6botdle229zre3q2sa4gvu9hojfnk"},"kjzl6cwe1jw145zm29p99imuu7slwo8wwoz5irv06zpqjlmbw7swwyypfckwu6b":{"alias":"MenuSection","commits":[{"jws":{"payload":"AXESIGI5hs4iBEJEim40E1ENfOl66Tf_PV7cIPAEGnQuXpeD","signatures":[{"signature":"pPMJlmV_i1T4QmG-PIdgy1OdpVihAYZuu74wvWOxtqZDAqaNPQ3QKV7CPuYlVlG6l_uS28l6HZNFpb-pPy_cCQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreidchgdm4iqeijciu3rucniq27hjplutp7z5l3ocb4aedj2c4xuxqm"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxml8w4zlvoijavffscfe0hlz9i4hdpz0rdqsl3hm2gmst5gpiku8"},"kjzl6cwe1jw148hkd85veyp7h0bq4cb7yh7tq496049gfoqt41k9lv5go2ydmqu":{"alias":"PublicationEvent","commits":[{"jws":{"payload":"AXESIKK8UE9wK75fDUbgbOv7iBK2B-LtgFQkvry0N_D-XkHL","signatures":[{"signature":"NXkz3YmTNwbSFjKJJP1RthsPHLtweba5_7Vq_b6tVcmBxxBEDkyPGx9yTcve0yjA1wW-jljKhKF99I5owQDRBw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifcxrie64blxzpq2rxantv7xcaswyd6f3makqsl5pfug7yp4xsbzm"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fry4cwu21reer94ybdqvjsl6fndq96oub8vjyn0r44bhiuj90gxqtc"},"kjzl6cwe1jw1472cvsjyv8xetviwm8t1y053em9i5es8oqiusorbx013f8zptsz":{"alias":"BroadcastService","commits":[{"jws":{"payload":"AXESIFbX7lMuuzVEsaL5zY2ku4K6OYFU8xDh3ntlfXE5n9UT","signatures":[{"signature":"jvjuPc1TrTNpF-b3UaAt8ee0dyzIjRHDyenVFwIllGrZx7jJAAZ71VHkl8doiX5G14dYlmhv97OKJA7qreImCA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicw27xfglv3gvcldixzzwg2jo4cxi4ycvhtcdq5463fpvytth6vcm"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxu8rm31zy7hlgg6fy6mltt087ybl2h4trwm3002cqo7scfxzny0w"},"kjzl6cwe1jw146yd7amvukvafyuwkq2dq7h0xbqnrx64q4aysgmn7zw8uvh5ddj":{"alias":"BroadcastFrequencySpecification","commits":[{"jws":{"payload":"AXESIK6O-9gihYxpstnLHP3F9aqIcd_cC9nEEWAQgdDZKMaB","signatures":[{"signature":"mQ5DgF8cG7nzqhVyZY6zNut2n-Aph7ugJRNi_7-6AoJvf_SHinJNATGh6VYwczlTzLZVqzTP6hOzd5-NtNGoCQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifor355qiufrru3fwoldt64l5nkrby57xal3hcbcyaqqhinskggqe"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxleB9Ccm9hZGNhc3RGcmVxdWVuY3lTcGVjaWZpY2F0aW9uZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzo3Nicm9hZGNhc3RTdWJDaGFubmVsomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngmVGhlIHN1YmNoYW5uZWwgdXNlZCBmb3IgdGhlIGJyb2FkY2FzdC53YnJvYWRjYXN0RnJlcXVlbmN5VmFsdWWiZWFueU9mgqFkdHlwZWZudW1iZXKhZCRyZWZ4GHNjaGVtYTpRdWFudGl0YXRpdmVWYWx1ZWtkZXNjcmlwdGlvbngwVGhlIGZyZXF1ZW5jeSBpbiBNSHogZm9yIGEgcGFydGljdWxhciBicm9hZGNhc3QueBlicm9hZGNhc3RTaWduYWxNb2R1bGF0aW9uomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmd3NjaGVtYTpRdWFsaXRhdGl2ZVZhbHVla2Rlc2NyaXB0aW9ueElUaGUgbW9kdWxhdGlvbiAoZS5nLiBGTSwgQU0sIGV0YykgdXNlZCBieSBhIHBhcnRpY3VsYXIgYnJvYWRjYXN0IHNlcnZpY2Uua2RlZmluaXRpb25zomVUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uakludGFuZ2libGWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZnMjL2RlZmluaXRpb25zL1RoaW5na2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5ldGl0bGVqSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMua2Rlc2NyaXB0aW9ueE9UaGUgZnJlcXVlbmN5IGluIE1IeiBhbmQgdGhlIG1vZHVsYXRpb24gdXNlZCBmb3IgYSBwYXJ0aWN1bGFyIEJyb2FkY2FzdFNlcnZpY2UuZmhlYWRlcqJmdW5pcXVlcFI2d2p6MXdPOVN5TWdkTW1rY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frxtgdvvmqhgei9jvrndcxmd52kzhl2jvllqlzee914v9azjty7474"},"kjzl6cwe1jw145kd2yvl5lo0ylrsjh5vwpijdd42mo6aiv3cnphcf4v6ur1ao9u":{"alias":"QualitativeValue","commits":[{"jws":{"payload":"AXESIEdrs26MPo637V73SR4GQxde4O78CYy74xT5-eLsTpY4","signatures":[{"signature":"AWZMUDzkCz3fpYrGcg8iKLBaGBh4yTRqA344XTyZY0EVvTdjGLfXKiyIUxE5E9vazo4r6lfDa2BnfijPol0hCA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreichnozw5db6r2362xxxjepamqyxl3qo57ajrs56gfhz7hroytuwha"},"linkedBlock":"omRkYXRhpWR0eXBlZm9iamVjdGV0aXRsZXBRdWFsaXRhdGl2ZVZhbHVlZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzqGVlcXVhbKJlb25lT2aCoWQkcmVmd3NjaGVtYTpRdWFsaXRhdGl2ZVZhbHVlomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmd3NjaGVtYTpRdWFsaXRhdGl2ZVZhbHVla2Rlc2NyaXB0aW9ueGBUaGlzIG9yZGVyaW5nIHJlbGF0aW9uIGZvciBxdWFsaXRhdGl2ZSB2YWx1ZXMgaW5kaWNhdGVzIHRoYXQgdGhlIHN1YmplY3QgaXMgZXF1YWwgdG8gdGhlIG9iamVjdC5mbGVzc2VyomVvbmVPZoKhZCRyZWZ3c2NoZW1hOlF1YWxpdGF0aXZlVmFsdWWiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ3c2NoZW1hOlF1YWxpdGF0aXZlVmFsdWVrZGVzY3JpcHRpb254Y1RoaXMgb3JkZXJpbmcgcmVsYXRpb24gZm9yIHF1YWxpdGF0aXZlIHZhbHVlcyBpbmRpY2F0ZXMgdGhhdCB0aGUgc3ViamVjdCBpcyBsZXNzZXIgdGhhbiB0aGUgb2JqZWN0LmdncmVhdGVyomVvbmVPZoKhZCRyZWZ3c2NoZW1hOlF1YWxpdGF0aXZlVmFsdWWiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ3c2NoZW1hOlF1YWxpdGF0aXZlVmFsdWVrZGVzY3JpcHRpb254ZFRoaXMgb3JkZXJpbmcgcmVsYXRpb24gZm9yIHF1YWxpdGF0aXZlIHZhbHVlcyBpbmRpY2F0ZXMgdGhhdCB0aGUgc3ViamVjdCBpcyBncmVhdGVyIHRoYW4gdGhlIG9iamVjdC5obm9uRXF1YWyiZW9uZU9mgqFkJHJlZndzY2hlbWE6UXVhbGl0YXRpdmVWYWx1ZaJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZndzY2hlbWE6UXVhbGl0YXRpdmVWYWx1ZWtkZXNjcmlwdGlvbnhkVGhpcyBvcmRlcmluZyByZWxhdGlvbiBmb3IgcXVhbGl0YXRpdmUgdmFsdWVzIGluZGljYXRlcyB0aGF0IHRoZSBzdWJqZWN0IGlzIG5vdCBlcXVhbCB0byB0aGUgb2JqZWN0Lm1sZXNzZXJPckVxdWFsomVvbmVPZoKhZCRyZWZ3c2NoZW1hOlF1YWxpdGF0aXZlVmFsdWWiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ3c2NoZW1hOlF1YWxpdGF0aXZlVmFsdWVrZGVzY3JpcHRpb254b1RoaXMgb3JkZXJpbmcgcmVsYXRpb24gZm9yIHF1YWxpdGF0aXZlIHZhbHVlcyBpbmRpY2F0ZXMgdGhhdCB0aGUgc3ViamVjdCBpcyBsZXNzZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgb2JqZWN0Lm5ncmVhdGVyT3JFcXVhbKJlb25lT2aCoWQkcmVmd3NjaGVtYTpRdWFsaXRhdGl2ZVZhbHVlomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmd3NjaGVtYTpRdWFsaXRhdGl2ZVZhbHVla2Rlc2NyaXB0aW9ueHBUaGlzIG9yZGVyaW5nIHJlbGF0aW9uIGZvciBxdWFsaXRhdGl2ZSB2YWx1ZXMgaW5kaWNhdGVzIHRoYXQgdGhlIHN1YmplY3QgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBvYmplY3QubnZhbHVlUmVmZXJlbmNlomVvbmVPZoKhZWFueU9miKFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJtoWQkcmVmcnNjaGVtYTpFbnVtZXJhdGlvbqFkJHJlZnghc2NoZW1hOk1lYXN1cmVtZW50VHlwZUVudW1lcmF0aW9uoWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVloWQkcmVmd3NjaGVtYTpRdWFsaXRhdGl2ZVZhbHVloWQkcmVmeBhzY2hlbWE6UXVhbnRpdGF0aXZlVmFsdWWhZCRyZWZ2c2NoZW1hOlN0cnVjdHVyZWRWYWx1ZaJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aIoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm2hZCRyZWZyc2NoZW1hOkVudW1lcmF0aW9uoWQkcmVmeCFzY2hlbWE6TWVhc3VyZW1lbnRUeXBlRW51bWVyYXRpb26hZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWWhZCRyZWZ3c2NoZW1hOlF1YWxpdGF0aXZlVmFsdWWhZCRyZWZ4GHNjaGVtYTpRdWFudGl0YXRpdmVWYWx1ZaFkJHJlZnZzY2hlbWE6U3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueIRBIHNlY29uZGFyeSB2YWx1ZSB0aGF0IHByb3ZpZGVzIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gb24gdGhlIG9yaWdpbmFsIHZhbHVlLCBlLmcuIGEgcmVmZXJlbmNlIHRlbXBlcmF0dXJlIG9yIGEgdHlwZSBvZiBtZWFzdXJlbWVudC5yYWRkaXRpb25hbFByb3BlcnR5omVvbmVPZoKhZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWWiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AfhBIHByb3BlcnR5LXZhbHVlIHBhaXIgcmVwcmVzZW50aW5nIGFuIGFkZGl0aW9uYWwgY2hhcmFjdGVyaXN0aWNzIG9mIHRoZSBlbnRpdGl0eSwgZS5nLiBhIHByb2R1Y3QgZmVhdHVyZSBvciBhbm90aGVyIGNoYXJhY3RlcmlzdGljIGZvciB3aGljaCB0aGVyZSBpcyBubyBtYXRjaGluZyBwcm9wZXJ0eSBpbiBzY2hlbWEub3JnLlxuXG5Ob3RlOiBQdWJsaXNoZXJzIHNob3VsZCBiZSBhd2FyZSB0aGF0IGFwcGxpY2F0aW9ucyBkZXNpZ25lZCB0byB1c2Ugc3BlY2lmaWMgc2NoZW1hLm9yZyBwcm9wZXJ0aWVzIChlLmcuIGh0dHBzOi8vc2NoZW1hLm9yZy93aWR0aCwgaHR0cHM6Ly9zY2hlbWEub3JnL2NvbG9yLCBodHRwczovL3NjaGVtYS5vcmcvZ3RpbjEzLCAuLi4pIHdpbGwgdHlwaWNhbGx5IGV4cGVjdCBzdWNoIGRhdGEgdG8gYmUgcHJvdmlkZWQgdXNpbmcgdGhvc2UgcHJvcGVydGllcywgcmF0aGVyIHRoYW4gdXNpbmcgdGhlIGdlbmVyaWMgcHJvcGVydHkvdmFsdWUgbWVjaGFuaXNtLgprZGVzY3JpcHRpb254gUEgcHJlZGVmaW5lZCB2YWx1ZSBmb3IgYSBwcm9kdWN0IGNoYXJhY3RlcmlzdGljLCBlLmcuIHRoZSBwb3dlciBjb3JkIHBsdWcgdHlwZSAnVVMnIG9yIHRoZSBnYXJtZW50IHNpemVzICdTJywgJ00nLCAnTCcsIGFuZCAnWEwnLmZoZWFkZXKiZnVuaXF1ZXA1REpTMEQ5ZVBwU0s3c3FEa2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frxjkt140mfu2uu2tmyi1uwlftr18yp7wqu53u0l7cbmlsqo97wlxc"},"kjzl6cwe1jw1474gr1vls1cv3550rgkct6442kz1h7a689qgpe29r3efuaudzcj":{"alias":"Enumeration","commits":[{"jws":{"payload":"AXESIMy2-DXgqJAWIHFIxSKg_p31igxbYi-uVuxWE6H6TNxy","signatures":[{"signature":"Dvm9wwtoRhYknwa-CK0G5BwD56sFThtHRdwHP0L4W4rHxVyHIiJtmwVXeB0SMaKxjI84q941LAedGLcJut49Ag","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreigmw34dlyfisalca4kiyurkb7u56wfayw3cf6xfn3cwcoq7utg4oi"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxla0VudW1lcmF0aW9uZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzoWxzdXBlcnNlZGVkQnmiZW9uZU9mgqFlYW55T2aDoWQkcmVmbHNjaGVtYTpDbGFzc6FkJHJlZnJzY2hlbWE6RW51bWVyYXRpb26hZCRyZWZvc2NoZW1hOlByb3BlcnR5omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoOhZCRyZWZsc2NoZW1hOkNsYXNzoWQkcmVmcnNjaGVtYTpFbnVtZXJhdGlvbqFkJHJlZm9zY2hlbWE6UHJvcGVydHlrZGVzY3JpcHRpb254UVJlbGF0ZXMgYSB0ZXJtIChpLmUuIGEgcHJvcGVydHksIGNsYXNzIG9yIGVudW1lcmF0aW9uKSB0byBvbmUgdGhhdCBzdXBlcnNlZGVzIGl0LmtkZWZpbml0aW9uc6JlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmtkZXNjcmlwdGlvbnhNTGlzdHMgb3IgZW51bWVyYXRpb25z4oCUZm9yIGV4YW1wbGUsIGEgbGlzdCBvZiBjdWlzaW5lcyBvciBtdXNpYyBnZW5yZXMsIGV0Yy5maGVhZGVyomZ1bmlxdWVwQytoV0xacGtKWUwwZVI4amtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frxunr4dcqvdnh2cjpf9sr3fh8yd56ibscat86sk05co6onh43fd34"},"kjzl6cwe1jw145lhktjwqd3tm5irrucb253as7z75g6su4aaf7d76f12f0mbbh6":{"alias":"Class","commits":[{"jws":{"payload":"AXESIC7eQi38UN3yxnsaiXKqBrotggmnSr81UNrCHdPEVRMC","signatures":[{"signature":"s55-AmzjquleWlxYRgAjCWw0o2mjxumUjCheBDo0BYi9avZjAA656QuSkpgo1thVcXTq1oS6P8heLOS0FLs8Cw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreibo3zbc37cq3xzmm6y2rfzkubv2fwbatj2kx42vbwwcdxj4ivitai"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlZUNsYXNzZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzoWxzdXBlcnNlZGVkQnmiZW9uZU9mgqFlYW55T2aDoWQkcmVmbHNjaGVtYTpDbGFzc6FkJHJlZnJzY2hlbWE6RW51bWVyYXRpb26hZCRyZWZvc2NoZW1hOlByb3BlcnR5omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoOhZCRyZWZsc2NoZW1hOkNsYXNzoWQkcmVmcnNjaGVtYTpFbnVtZXJhdGlvbqFkJHJlZm9zY2hlbWE6UHJvcGVydHlrZGVzY3JpcHRpb254UVJlbGF0ZXMgYSB0ZXJtIChpLmUuIGEgcHJvcGVydHksIGNsYXNzIG9yIGVudW1lcmF0aW9uKSB0byBvbmUgdGhhdCBzdXBlcnNlZGVzIGl0LmtkZWZpbml0aW9uc6JlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmtkZXNjcmlwdGlvbng+QSBjbGFzcywgYWxzbyBvZnRlbiBjYWxsZWQgYSAnVHlwZSc7IGVxdWl2YWxlbnQgdG8gcmRmczpDbGFzcy5maGVhZGVyomZ1bmlxdWVwNEs5Z1AwdFppTGZIUU9oY2tjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frxjst025krh76lj9hhzrin87gooqaur4d26h644dv1mvl6seohm2o"},"kjzl6cwe1jw147oowuqptnhni3b0ulx5hrnnibmf7kzcbuogz41jrck26fpu437":{"alias":"Property","commits":[{"jws":{"payload":"AXESIKr4-ypd-UyphO7Z3dJJfvz-0rYqjCmbjRcK5tWXWxwT","signatures":[{"signature":"y5SrWFyRTpbTfhHkWDm8Yt3ikkGOjhXj1dJe0gTnCd6YDyegsWFY_NgHgvvBc-ZuNQS7Z7masjjgbgizu8UPAQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifk7d5suxpzjsuyj3wz3xjes7x473jlmkumfgny2fyk43kzowy4cm"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlaFByb3BlcnR5ZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzpGlpbnZlcnNlT2aiZW9uZU9mgqFkJHJlZm9zY2hlbWE6UHJvcGVydHmiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZvc2NoZW1hOlByb3BlcnR5a2Rlc2NyaXB0aW9ueQFdUmVsYXRlcyBhIHByb3BlcnR5IHRvIGEgcHJvcGVydHkgdGhhdCBpcyBpdHMgaW52ZXJzZS4gSW52ZXJzZSBwcm9wZXJ0aWVzIHJlbGF0ZSB0aGUgc2FtZSBwYWlycyBvZiBpdGVtcyB0byBlYWNoIG90aGVyLCBidXQgaW4gcmV2ZXJzZWQgZGlyZWN0aW9uLiBGb3IgZXhhbXBsZSwgdGhlICdhbHVtbmknIGFuZCAnYWx1bW5pT2YnIHByb3BlcnRpZXMgYXJlIGludmVyc2VPZiBlYWNoIG90aGVyLiBTb21lIHByb3BlcnRpZXMgZG9uJ3QgaGF2ZSBleHBsaWNpdCBpbnZlcnNlczsgaW4gdGhlc2Ugc2l0dWF0aW9ucyBSREZhIGFuZCBKU09OLUxEIHN5bnRheCBmb3IgcmV2ZXJzZSBwcm9wZXJ0aWVzIGNhbiBiZSB1c2VkLmxzdXBlcnNlZGVkQnmiZW9uZU9mgqFlYW55T2aDoWQkcmVmbHNjaGVtYTpDbGFzc6FkJHJlZnJzY2hlbWE6RW51bWVyYXRpb26hZCRyZWZvc2NoZW1hOlByb3BlcnR5omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoOhZCRyZWZsc2NoZW1hOkNsYXNzoWQkcmVmcnNjaGVtYTpFbnVtZXJhdGlvbqFkJHJlZm9zY2hlbWE6UHJvcGVydHlrZGVzY3JpcHRpb254UVJlbGF0ZXMgYSB0ZXJtIChpLmUuIGEgcHJvcGVydHksIGNsYXNzIG9yIGVudW1lcmF0aW9uKSB0byBvbmUgdGhhdCBzdXBlcnNlZGVzIGl0Lm1yYW5nZUluY2x1ZGVzomVvbmVPZoKhZCRyZWZsc2NoZW1hOkNsYXNzomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbHNjaGVtYTpDbGFzc2tkZXNjcmlwdGlvbnhoUmVsYXRlcyBhIHByb3BlcnR5IHRvIGEgY2xhc3MgdGhhdCBjb25zdGl0dXRlcyAob25lIG9mKSB0aGUgZXhwZWN0ZWQgdHlwZShzKSBmb3IgdmFsdWVzIG9mIHRoZSBwcm9wZXJ0eS5uZG9tYWluSW5jbHVkZXOiZW9uZU9mgqFkJHJlZmxzY2hlbWE6Q2xhc3OiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZsc2NoZW1hOkNsYXNza2Rlc2NyaXB0aW9ueGJSZWxhdGVzIGEgcHJvcGVydHkgdG8gYSBjbGFzcyB0aGF0IGlzIChvbmUgb2YpIHRoZSB0eXBlKHMpIHRoZSBwcm9wZXJ0eSBpcyBleHBlY3RlZCB0byBiZSB1c2VkIG9uLmtkZWZpbml0aW9uc6JlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmtkZXNjcmlwdGlvbnhkQSBwcm9wZXJ0eSwgdXNlZCB0byBpbmRpY2F0ZSBhdHRyaWJ1dGVzIGFuZCByZWxhdGlvbnNoaXBzIG9mIHNvbWUgVGhpbmc7IGVxdWl2YWxlbnQgdG8gcmRmOlByb3BlcnR5LmZoZWFkZXKiZnVuaXF1ZXBTeDgvS2p2T2E3azFMSEhGa2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frxynl5mlzmv1j4nie1nvr2co76ang5x7boa60por0ihanhrrq52ps"},"kjzl6cwe1jw1476x88lukib1dlfkogqv0yk9nu7gwvr3foc1r0mwt9vos88uwp1":{"alias":"MeasurementTypeEnumeration","commits":[{"jws":{"payload":"AXESIDWXv2WiXyOwhJ76kTRJhidwdtyFfZUuWxiTWNLjFIkl","signatures":[{"signature":"txLHKfWfHfwDlweqWzuKigmbFvZ1TIqQtlsM-Vgx8HGpjWICI27luQDzPZgYZ_oYOIMpJgq1rnEFKfoyZCc4AA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreibvs67wlis7eoyijhx2se2etbrhob3nzbl5suxfwgetldjogfejeu"},"linkedBlock":"omRkYXRhpGR0eXBlZm9iamVjdGV0aXRsZXgaTWVhc3VyZW1lbnRUeXBlRW51bWVyYXRpb25nJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEja2Rlc2NyaXB0aW9ueJtFbnVtZXJhdGlvbiBvZiBjb21tb24gbWVhc3VyZW1lbnQgdHlwZXMgKG9yIGRpbWVuc2lvbnMpLCBmb3IgZXhhbXBsZSAiY2hlc3QiIGZvciBhIHBlcnNvbiwgImluc2VhbSIgZm9yIHBhbnRzLCAiZ2F1Z2UiIGZvciBzY3Jld3MsIG9yICJ3aGVlbCIgZm9yIGJpY3ljbGVzLmZoZWFkZXKiZnVuaXF1ZXBQUGZVR0VSQVJSdHNhT2Iza2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frxv58al7ddu6hsoer1z30mts4pit49tsofh1og4ixc69c8qmzshz4"},"kjzl6cwe1jw149nfnf98l520dajx5vfphbdnmwaavy1dgy2byuawomtyv48nqm1":{"alias":"BroadcastChannel","commits":[{"jws":{"payload":"AXESIDe36wNQBRZjXtjXf528E6tK7k3vRDA6a8LUDy4ECt76","signatures":[{"signature":"ed455gvAHlltEwkN1NSbm4BqlEWmEn6v90O6h467SqJA4UX5-E-nqaQrPnhLN9Oef2s-2Ogjo7o4ibZdGIqbAA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreibxw7vqguafczrv5wgxp6o3ye5ljlxe332ega5gxqwub4xaicw67i"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlcEJyb2FkY2FzdENoYW5uZWxnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjanByb3BlcnRpZXOmZWdlbnJlomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueDdHZW5yZSBvZiB0aGUgY3JlYXRpdmUgd29yaywgYnJvYWRjYXN0IGNoYW5uZWwgb3IgZ3JvdXAucWluQnJvYWRjYXN0TGluZXVwomQkcmVmeB5zY2hlbWE6Q2FibGVPclNhdGVsbGl0ZVNlcnZpY2VrZGVzY3JpcHRpb254MVRoZSBDYWJsZU9yU2F0ZWxsaXRlU2VydmljZSBvZmZlcmluZyB0aGUgY2hhbm5lbC5yYnJvYWRjYXN0Q2hhbm5lbElkomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnh7VGhlIHVuaXF1ZSBhZGRyZXNzIGJ5IHdoaWNoIHRoZSBCcm9hZGNhc3RTZXJ2aWNlIGNhbiBiZSBpZGVudGlmaWVkIGluIGEgcHJvdmlkZXIgbGluZXVwLiBJbiBVUywgdGhpcyBpcyB0eXBpY2FsbHkgYSBudW1iZXIucmJyb2FkY2FzdEZyZXF1ZW5jeaJlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZngmc2NoZW1hOkJyb2FkY2FzdEZyZXF1ZW5jeVNwZWNpZmljYXRpb25rZGVzY3JpcHRpb254v1RoZSBmcmVxdWVuY3kgdXNlZCBmb3Igb3Zlci10aGUtYWlyIGJyb2FkY2FzdHMuIE51bWVyaWMgdmFsdWVzIG9yIHNpbXBsZSByYW5nZXMgZS5nLiA4Ny05OS4gSW4gYWRkaXRpb24gYSBzaG9ydGN1dCBpZGlvbSBpcyBzdXBwb3J0ZWQgZm9yIGZyZXF1ZW5jZXMgb2YgQU0gYW5kIEZNIHJhZGlvIGNoYW5uZWxzLCBlLmcuICI4NyBGTSIudGJyb2FkY2FzdFNlcnZpY2VUaWVyomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnhWVGhlIHR5cGUgb2Ygc2VydmljZSByZXF1aXJlZCB0byBoYXZlIGFjY2VzcyB0byB0aGUgY2hhbm5lbCAoZS5nLiBTdGFuZGFyZCBvciBQcmVtaXVtKS54GHByb3ZpZGVzQnJvYWRjYXN0U2VydmljZaJkJHJlZndzY2hlbWE6QnJvYWRjYXN0U2VydmljZWtkZXNjcmlwdGlvbngtVGhlIEJyb2FkY2FzdFNlcnZpY2Ugb2ZmZXJlZCBvbiB0aGlzIGNoYW5uZWwua2RlZmluaXRpb25zomVUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uakludGFuZ2libGWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZnMjL2RlZmluaXRpb25zL1RoaW5na2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5ldGl0bGVqSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMua2Rlc2NyaXB0aW9ueExBIHVuaXF1ZSBpbnN0YW5jZSBvZiBhIEJyb2FkY2FzdFNlcnZpY2Ugb24gYSBDYWJsZU9yU2F0ZWxsaXRlU2VydmljZSBsaW5ldXAuZmhlYWRlcqJmdW5pcXVlcGNQUXBJTlNDODBZYTdYeFprY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frycmnakhp2byamj1ntrjp74x42tl9f61rsi8l3rhkf6d3xa5kt8n4"},"kjzl6cwe1jw14ag6kp64e03gv1ilyjuy9lisscgte0ussqlq8chhc9dwo8q4s0o":{"alias":"CableOrSatelliteService","commits":[{"jws":{"payload":"AXESINEd-PVFdQuARjaDmW4Q0c44muWWDqlZrzFb98FrrSPA","signatures":[{"signature":"3zln5ChsNcLt65EOCz6eCIPwPJsB01It23BlUWAO67kJ0jG4GQ4SL-Shf9GEQNcBPLfbJAoUc-yoYqFhMv0KAw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreigrdx4pkrlvboaemnudtfxbbuoohcnolfqovfm26mk367awxljdya"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fryib2r6zj7konwqsc5p83o91opknkzq30sd6ijcsbb6qwce1tz8qo"},"kjzl6cwe1jw148tytpqj1mnrnghbn2cwa66wbjjfp6rclwdhnwf2b16d0cokrxo":{"alias":"OfferCatalog","commits":[{"jws":{"payload":"AXESIHbrPZQdcX0Ea34a88fCdXoQhMun0_Q0YktR__QaXtmE","signatures":[{"signature":"pt6NFVuDPS67K_Db_NuFqA_pXw4EKxRHNyGcKovdpKCc0iUuFU2J5AMYEf4WUwRlXa41KlLNQUVGh2PBRagvDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreidw5m6zihlrpucgw7q26pd4e5l2cccmxj6t6q2ges2r772buxwzqq"},"linkedBlock":"omRkYXRhpmR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ2Iy9kZWZpbml0aW9ucy9JdGVtTGlzdGtkZXNjcmlwdGlvbniwQSBsaXN0IG9mIGl0ZW1zIG9mIGFueSBzb3J04oCUZm9yIGV4YW1wbGUsIFRvcCAxMCBNb3ZpZXMgQWJvdXQgV2VhdGhlcm1lbiwgb3IgVG9wIDEwMCBQYXJ0eSBTb25ncy4gTm90IHRvIGJlIGNvbmZ1c2VkIHdpdGggSFRNTCBsaXN0cywgd2hpY2ggYXJlIG9mdGVuIHVzZWQgb25seSBmb3IgZm9ybWF0dGluZy5ldGl0bGVsT2ZmZXJDYXRhbG9nZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZWZpbml0aW9uc6NlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmhJdGVtTGlzdKVkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmeBgjL2RlZmluaXRpb25zL0ludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmV0aXRsZWhJdGVtTGlzdGpwcm9wZXJ0aWVzo21pdGVtTGlzdE9yZGVyomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmeBhzY2hlbWE6SXRlbUxpc3RPcmRlclR5cGVrZGVzY3JpcHRpb254OVR5cGUgb2Ygb3JkZXJpbmcgKGUuZy4gQXNjZW5kaW5nLCBEZXNjZW5kaW5nLCBVbm9yZGVyZWQpLm1udW1iZXJPZkl0ZW1zomR0eXBlZ2ludGVnZXJrZGVzY3JpcHRpb254ylRoZSBudW1iZXIgb2YgaXRlbXMgaW4gYW4gSXRlbUxpc3QuIE5vdGUgdGhhdCBzb21lIGRlc2NyaXB0aW9ucyBtaWdodCBub3QgZnVsbHkgZGVzY3JpYmUgYWxsIGl0ZW1zIGluIGEgbGlzdCAoZS5nLiwgbXVsdGktcGFnZSBwYWdpbmF0aW9uKTsgaW4gc3VjaCBjYXNlcywgdGhlIG51bWJlck9mSXRlbXMgd291bGQgYmUgZm9yIHRoZSBlbnRpcmUgbGlzdC5vaXRlbUxpc3RFbGVtZW50omVvbmVPZoKhZWFueU9mg6FkdHlwZWZzdHJpbmehZCRyZWZvc2NoZW1hOkxpc3RJdGVtoWQkcmVmbHNjaGVtYTpUaGluZ6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aDoWR0eXBlZnN0cmluZ6FkJHJlZm9zY2hlbWE6TGlzdEl0ZW2hZCRyZWZsc2NoZW1hOlRoaW5na2Rlc2NyaXB0aW9ueQJvRm9yIGl0ZW1MaXN0RWxlbWVudCB2YWx1ZXMsIHlvdSBjYW4gdXNlIHNpbXBsZSBzdHJpbmdzIChlLmcuICJQZXRlciIsICJQYXVsIiwgIk1hcnkiKSwgZXhpc3RpbmcgZW50aXRpZXMsIG9yIHVzZSBMaXN0SXRlbS5cblxuVGV4dCB2YWx1ZXMgYXJlIGJlc3QgaWYgdGhlIGVsZW1lbnRzIGluIHRoZSBsaXN0IGFyZSBwbGFpbiBzdHJpbmdzLiBFeGlzdGluZyBlbnRpdGllcyBhcmUgYmVzdCBmb3IgYSBzaW1wbGUsIHVub3JkZXJlZCBsaXN0IG9mIGV4aXN0aW5nIHRoaW5ncyBpbiB5b3VyIGRhdGEuIExpc3RJdGVtIGlzIHVzZWQgd2l0aCBvcmRlcmVkIGxpc3RzIHdoZW4geW91IHdhbnQgdG8gcHJvdmlkZSBhZGRpdGlvbmFsIGNvbnRleHQgYWJvdXQgdGhlIGVsZW1lbnQgaW4gdGhhdCBsaXN0IG9yIHdoZW4gdGhlIHNhbWUgaXRlbSBtaWdodCBiZSBpbiBkaWZmZXJlbnQgcGxhY2VzIGluIGRpZmZlcmVudCBsaXN0cy5cblxuTm90ZTogVGhlIG9yZGVyIG9mIGVsZW1lbnRzIGluIHlvdXIgbWFyay11cCBpcyBub3Qgc3VmZmljaWVudCBmb3IgaW5kaWNhdGluZyB0aGUgb3JkZXIgb3IgZWxlbWVudHMuICBVc2UgTGlzdEl0ZW0gd2l0aCBhICdwb3NpdGlvbicgcHJvcGVydHkgaW4gc3VjaCBjYXNlcy5rZGVzY3JpcHRpb254sEEgbGlzdCBvZiBpdGVtcyBvZiBhbnkgc29ydOKAlGZvciBleGFtcGxlLCBUb3AgMTAgTW92aWVzIEFib3V0IFdlYXRoZXJtZW4sIG9yIFRvcCAxMDAgUGFydHkgU29uZ3MuIE5vdCB0byBiZSBjb25mdXNlZCB3aXRoIEhUTUwgbGlzdHMsIHdoaWNoIGFyZSBvZnRlbiB1c2VkIG9ubHkgZm9yIGZvcm1hdHRpbmcuakludGFuZ2libGWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZnMjL2RlZmluaXRpb25zL1RoaW5na2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5ldGl0bGVqSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMua2Rlc2NyaXB0aW9ueH5BbiBPZmZlckNhdGFsb2cgaXMgYW4gSXRlbUxpc3QgdGhhdCBjb250YWlucyByZWxhdGVkIE9mZmVycyBhbmQvb3IgZnVydGhlciBPZmZlckNhdGFsb2dzIHRoYXQgYXJlIG9mZmVyZWRCeSB0aGUgc2FtZSBwcm92aWRlci5maGVhZGVyomZ1bmlxdWVwRXYrWWx2N0UybElLQjU1V2tjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1fry6t3nb0nfl50mt76s0rpkc11u2y7n42hnq7xlyj4egd8ii6rqneo"},"kjzl6cwe1jw146tgck293cq9421u557lxg451zimvs3hk2hxgi4hl36r9v0natk":{"alias":"GovernmentBenefitsType","commits":[{"jws":{"payload":"AXESIDWWK9TOC4CJPwIdjuMA0VBfNWpBpYfy3dj5BNCziqUR","signatures":[{"signature":"heIZ8RbQxMfboQk2tZM8rzmGRvETIb82FRchzTndfQJqtHltKbZ2HBjbs5zGDsLneB4RosqQEokAeYFfGfIXCA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreibvsyv5jtqlqcet6aq5r3rqbukql42wuqnfq7zn3whzatilhcvfce"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoiiZWNvbnN0a0Jhc2ljSW5jb21la2Rlc2NyaXB0aW9ueDBCYXNpY0luY29tZTogdGhpcyBpcyBhIGJlbmVmaXQgZm9yIGJhc2ljIGluY29tZS6iZWNvbnN0b0J1c2luZXNzU3VwcG9ydGtkZXNjcmlwdGlvbng9QnVzaW5lc3NTdXBwb3J0OiB0aGlzIGlzIGEgYmVuZWZpdCBmb3Igc3VwcG9ydGluZyBidXNpbmVzc2VzLqJlY29uc3RxRGlzYWJpbGl0eVN1cHBvcnRrZGVzY3JpcHRpb254PERpc2FiaWxpdHlTdXBwb3J0OiB0aGlzIGlzIGEgYmVuZWZpdCBmb3IgZGlzYWJpbGl0eSBzdXBwb3J0LqJlY29uc3RqSGVhbHRoQ2FyZWtkZXNjcmlwdGlvbnguSGVhbHRoQ2FyZTogdGhpcyBpcyBhIGJlbmVmaXQgZm9yIGhlYWx0aCBjYXJlLqJlY29uc3RvT25lVGltZVBheW1lbnRza2Rlc2NyaXB0aW9ueElPbmVUaW1lUGF5bWVudHM6IHRoaXMgaXMgYSBiZW5lZml0IGZvciBvbmUtdGltZSBwYXltZW50cyBmb3IgaW5kaXZpZHVhbHMuomVjb25zdGlQYWlkTGVhdmVrZGVzY3JpcHRpb254LFBhaWRMZWF2ZTogdGhpcyBpcyBhIGJlbmVmaXQgZm9yIHBhaWQgbGVhdmUuomVjb25zdG9QYXJlbnRhbFN1cHBvcnRrZGVzY3JpcHRpb254OFBhcmVudGFsU3VwcG9ydDogdGhpcyBpcyBhIGJlbmVmaXQgZm9yIHBhcmVudGFsIHN1cHBvcnQuomVjb25zdHNVbmVtcGxveW1lbnRTdXBwb3J0a2Rlc2NyaXB0aW9ueEBVbmVtcGxveW1lbnRTdXBwb3J0OiB0aGlzIGlzIGEgYmVuZWZpdCBmb3IgdW5lbXBsb3ltZW50IHN1cHBvcnQuZXRpdGxldkdvdmVybm1lbnRCZW5lZml0c1R5cGVnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEja2Rlc2NyaXB0aW9ueKhHb3Zlcm5tZW50QmVuZWZpdHNUeXBlIGVudW1lcmF0ZXMgc2V2ZXJhbCBraW5kcyBvZiBnb3Zlcm5tZW50IGJlbmVmaXRzIHRvIHN1cHBvcnQgdGhlIENPVklELTE5IHNpdHVhdGlvbi4gTm90ZSB0aGF0IHRoaXMgc3RydWN0dXJlIG1heSBub3QgY2FwdHVyZSBhbGwgYmVuZWZpdHMgb2ZmZXJlZC5maGVhZGVyomZ1bmlxdWVwUUUvV0JyZWNvQzc0dGRwUmtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frxshg9ao0nuiosul2cl23xulfy4kipzssuprhxcvx1yo1y4kloy68"},"kjzl6cwe1jw14awhmtipu07w6b8gfdw81ha2g9eu95xuev2753vgikls3so91iw":{"alias":"EventAttendanceModeEnumeration","commits":[{"jws":{"payload":"AXESIMioA6cRjnyvSghCYkl_7nrQsn1lUvNmiknRPBT7tSxu","signatures":[{"signature":"9V-gOk9mphbZZLZ7p5NqaIP2ZmupAfv828U-nAsgQrpu5LzJkBA6or5OfP7hmpVgsU9fshClmwa-ozEg0pjyBQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreigivab2oemopsxuucccmjex73t22czh2zks6ntiusorhqkpxnjmny"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoOiZWNvbnN0eBhNaXhlZEV2ZW50QXR0ZW5kYW5jZU1vZGVrZGVzY3JpcHRpb254aE1peGVkRXZlbnRBdHRlbmRhbmNlTW9kZSAtIGFuIGV2ZW50IHRoYXQgaXMgY29uZHVjdGVkIGFzIGEgY29tYmluYXRpb24gb2YgYm90aCBvZmZsaW5lIGFuZCBvbmxpbmUgbW9kZXMuomVjb25zdHgaT2ZmbGluZUV2ZW50QXR0ZW5kYW5jZU1vZGVrZGVzY3JpcHRpb254S09mZmxpbmVFdmVudEF0dGVuZGFuY2VNb2RlIC0gYW4gZXZlbnQgdGhhdCBpcyBwcmltYXJpbHkgY29uZHVjdGVkIG9mZmxpbmUuIKJlY29uc3R4GU9ubGluZUV2ZW50QXR0ZW5kYW5jZU1vZGVrZGVzY3JpcHRpb254SU9ubGluZUV2ZW50QXR0ZW5kYW5jZU1vZGUgLSBhbiBldmVudCB0aGF0IGlzIHByaW1hcmlseSBjb25kdWN0ZWQgb25saW5lLiBldGl0bGV4HkV2ZW50QXR0ZW5kYW5jZU1vZGVFbnVtZXJhdGlvbmckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNrZGVzY3JpcHRpb254kEFuIEV2ZW50QXR0ZW5kYW5jZU1vZGVFbnVtZXJhdGlvbiB2YWx1ZSBpcyBvbmUgb2YgcG90ZW50aWFsbHkgc2V2ZXJhbCBtb2RlcyBvZiBvcmdhbmlzaW5nIGFuIGV2ZW50LCByZWxhdGluZyB0byB3aGV0aGVyIGl0IGlzIG9ubGluZSBvciBvZmZsaW5lLmZoZWFkZXKiZnVuaXF1ZXBHYUlQSE9HS2J6Vjk4VWN6a2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frylj1e9x3pdk4svw4tet56ivlfmxj568o9ovmsbjpg2ivuzwgaubk"},"kjzl6cwe1jw14b68uje6mzbb54xlye60daw9fh96vof8sio6jxsar0vpd0ce971":{"alias":"Schedule","commits":[{"jws":{"payload":"AXESILNdDkL0nCnxoyuEtFSahn7erhJSOAMZ6Mq7nN_iHQBc","signatures":[{"signature":"0doJtiqdJGom5m3SqZEWdiChHqa56LsF44If0-ZeIA1Chzhl2-u3kc1VpQLLd4kx_RaPwwgaKfJT6uEAFGNqDw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiftluhef5e4fhy2gk4ewrkjvbt632xbeuryamm6rsv3ttp6ehialq"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fryngex5wv7f4f8j304kqqmlhf22pcx9oeisryls98g69gcig5ddz4"},"kjzl6cwe1jw147ax3g3ycawbbe5da1pmea9b514bawvgecq9zqxz2nir3s7qfji":{"alias":"EventStatusType","commits":[{"jws":{"payload":"AXESIBGRlFI-aNGYfZECuqeEtY9QzvNRpMo1b--uSIc2N_Bp","signatures":[{"signature":"Bdvt7FtGFMomt5uqdPbJo_j2h4axVGm5eJ1sARIQ7ftzeCT-kSvxB1jbiSE4aXVhJZfkjlh6tPdoBp7TcTx0DQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiarsgkfepti2gmh3eicxktyjnmpkdhpgunezi2w735ojcdtmn7qne"},"linkedBlock":"omRkYXRhpmR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HyMvZGVmaW5pdGlvbnMvU3RhdHVzRW51bWVyYXRpb25rZGVzY3JpcHRpb254MExpc3RzIG9yIGVudW1lcmF0aW9ucyBkZWFsaW5nIHdpdGggc3RhdHVzIHR5cGVzLmV0aXRsZW9FdmVudFN0YXR1c1R5cGVnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEja2RlZmluaXRpb25zoXFTdGF0dXNFbnVtZXJhdGlvbqNkdHlwZWZvYmplY3RldGl0bGVxU3RhdHVzRW51bWVyYXRpb25rZGVzY3JpcHRpb254MExpc3RzIG9yIGVudW1lcmF0aW9ucyBkZWFsaW5nIHdpdGggc3RhdHVzIHR5cGVzLmtkZXNjcmlwdGlvbnhoRXZlbnRTdGF0dXNUeXBlIGlzIGFuIGVudW1lcmF0aW9uIHR5cGUgd2hvc2UgaW5zdGFuY2VzIHJlcHJlc2VudCBzZXZlcmFsIHN0YXRlcyB0aGF0IGFuIEV2ZW50IG1heSBiZSBpbi5maGVhZGVyomZ1bmlxdWVwMVNZbUhHaS80c29EZWYxUmtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frxvxncik47hhsh0m6fg679ky77ryodlrom2iv27llev9cqwmzyio0"},"kjzl6cwe1jw146ia2pi35vo3m3aurd4kbpxu1kmuacl9th67g2r5ccg3j4momn0":{"alias":"VirtualLocation","commits":[{"jws":{"payload":"AXESIC8eSEagxycq-vAZlnuAYpVaHMoLaZ97qj0K9f5qze6Y","signatures":[{"signature":"-EYOGi-iJD6brQnA7QtYvd_6RVTj1wZH-2opNnlPGLaIuwiNVQ8582lNXvm8iTJ9tfQVPWHheW_pQGyysAKJCQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreibpdzeenighe4vpv4azsz5yayuvliomuc3jt552upik6x7gvtpota"},"linkedBlock":"omRkYXRhpmR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlb1ZpcnR1YWxMb2NhdGlvbmckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNrZGVmaW5pdGlvbnOiZVRoaW5npGR0eXBlZm9iamVjdGV0aXRsZWVUaGluZ2pwcm9wZXJ0aWVzrmN1cmyjZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb25wVVJMIG9mIHRoZSBpdGVtLmRuYW1lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnVUaGUgbmFtZSBvZiB0aGUgaXRlbS5lQHR5cGWhZHR5cGVmc3RyaW5nZWltYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb254UUFuIGltYWdlIG9mIHRoZSBpdGVtLiBUaGlzIGNhbiBiZSBhIFtbVVJMXV0gb3IgYSBmdWxseSBkZXNjcmliZWQgW1tJbWFnZU9iamVjdF1dLmZzYW1lQXOiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnidVVJMIG9mIGEgcmVmZXJlbmNlIFdlYiBwYWdlIHRoYXQgdW5hbWJpZ3VvdXNseSBpbmRpY2F0ZXMgdGhlIGl0ZW0ncyBpZGVudGl0eS4gRS5nLiB0aGUgVVJMIG9mIHRoZSBpdGVtJ3MgV2lraXBlZGlhIHBhZ2UsIFdpa2lkYXRhIGVudHJ5LCBvciBvZmZpY2lhbCB3ZWJzaXRlLmhAY29udGV4dKFkdHlwZWZzdHJpbmdpc3ViamVjdE9momVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueClBIENyZWF0aXZlV29yayBvciBFdmVudCBhYm91dCB0aGlzIFRoaW5nLmppZGVudGlmaWVyomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVla2Rlc2NyaXB0aW9ueQFJVGhlIGlkZW50aWZpZXIgcHJvcGVydHkgcmVwcmVzZW50cyBhbnkga2luZCBvZiBpZGVudGlmaWVyIGZvciBhbnkga2luZCBvZiBbW1RoaW5nXV0sIHN1Y2ggYXMgSVNCTnMsIEdUSU4gY29kZXMsIFVVSURzIGV0Yy4gU2NoZW1hLm9yZyBwcm92aWRlcyBkZWRpY2F0ZWQgcHJvcGVydGllcyBmb3IgcmVwcmVzZW50aW5nIG1hbnkgb2YgdGhlc2UsIGVpdGhlciBhcyB0ZXh0dWFsIHN0cmluZ3Mgb3IgYXMgVVJMIChVUkkpIGxpbmtzLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI2lkZW50aWZpZXJCZykgZm9yIG1vcmUgZGV0YWlscy4KICAgICAgICBrZGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueBpBIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtLm1hbHRlcm5hdGVOYW1lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnZBbiBhbGlhcyBmb3IgdGhlIGl0ZW0ubmFkZGl0aW9uYWxUeXBlomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb255AZ9BbiBhZGRpdGlvbmFsIHR5cGUgZm9yIHRoZSBpdGVtLCB0eXBpY2FsbHkgdXNlZCBmb3IgYWRkaW5nIG1vcmUgc3BlY2lmaWMgdHlwZXMgZnJvbSBleHRlcm5hbCB2b2NhYnVsYXJpZXMgaW4gbWljcm9kYXRhIHN5bnRheC4gVGhpcyBpcyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHNvbWV0aGluZyBhbmQgYSBjbGFzcyB0aGF0IHRoZSB0aGluZyBpcyBpbi4gSW4gUkRGYSBzeW50YXgsIGl0IGlzIGJldHRlciB0byB1c2UgdGhlIG5hdGl2ZSBSREZhIHN5bnRheCAtIHRoZSAndHlwZW9mJyBhdHRyaWJ1dGUgLSBmb3IgbXVsdGlwbGUgdHlwZXMuIFNjaGVtYS5vcmcgdG9vbHMgbWF5IGhhdmUgb25seSB3ZWFrZXIgdW5kZXJzdGFuZGluZyBvZiBleHRyYSB0eXBlcywgaW4gcGFydGljdWxhciB0aG9zZSBkZWZpbmVkIGV4dGVybmFsbHkub3BvdGVudGlhbEFjdGlvbqJlb25lT2aCoWQkcmVmbXNjaGVtYTpBY3Rpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOkFjdGlvbmtkZXNjcmlwdGlvbnhySW5kaWNhdGVzIGEgcG90ZW50aWFsIEFjdGlvbiwgd2hpY2ggZGVzY3JpYmVzIGFuIGlkZWFsaXplZCBhY3Rpb24gaW4gd2hpY2ggdGhpcyB0aGluZyB3b3VsZCBwbGF5IGFuICdvYmplY3QnIHJvbGUucG1haW5FbnRpdHlPZlBhZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueLBJbmRpY2F0ZXMgYSBwYWdlIChvciBvdGhlciBDcmVhdGl2ZVdvcmspIGZvciB3aGljaCB0aGlzIHRoaW5nIGlzIHRoZSBtYWluIGVudGl0eSBiZWluZyBkZXNjcmliZWQuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjbWFpbkVudGl0eUJhY2tncm91bmQpIGZvciBkZXRhaWxzLngZZGlzYW1iaWd1YXRpbmdEZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2547EEgc3ViIHByb3BlcnR5IG9mIGRlc2NyaXB0aW9uLiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGZyb20gb3RoZXIsIHNpbWlsYXIgaXRlbXMuIEluZm9ybWF0aW9uIGZyb20gb3RoZXIgcHJvcGVydGllcyAoaW4gcGFydGljdWxhciwgbmFtZSkgbWF5IGJlIG5lY2Vzc2FyeSBmb3IgdGhlIGRlc2NyaXB0aW9uIHRvIGJlIHVzZWZ1bCBmb3IgZGlzYW1iaWd1YXRpb24ua2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5qSW50YW5naWJsZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmcyMvZGVmaW5pdGlvbnMvVGhpbmdrZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmV0aXRsZWpJbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5rZGVzY3JpcHRpb255AQ1BbiBvbmxpbmUgb3IgdmlydHVhbCBsb2NhdGlvbiBmb3IgYXR0ZW5kaW5nIGV2ZW50cy4gRm9yIGV4YW1wbGUsIG9uZSBtYXkgYXR0ZW5kIGFuIG9ubGluZSBzZW1pbmFyIG9yIGVkdWNhdGlvbmFsIGV2ZW50LiBXaGlsZSBhIHZpcnR1YWwgbG9jYXRpb24gbWF5IGJlIHVzZWQgYXMgdGhlIGxvY2F0aW9uIG9mIGFuIGV2ZW50LCB2aXJ0dWFsIGxvY2F0aW9ucyBzaG91bGQgbm90IGJlIGNvbmZ1c2VkIHdpdGggcGh5c2ljYWwgbG9jYXRpb25zIGluIHRoZSByZWFsIHdvcmxkLmZoZWFkZXKiZnVuaXF1ZXBMZGgzSFVKdnFjL3IrMktua2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frxq9zn9cmht7dp3h6qlcgjcgln6qfdlj9tm44ybl1zsih40xb4zk0"},"kjzl6cwe1jw14a02xcl3d0j4ynl8m8o1l3x78dy50urnhtoi6leeqbaiui3j1l7":{"alias":"SizeSpecification","commits":[{"jws":{"payload":"AXESINR0H5voM70FXEZizgW8mWpq6FW9zHrZMIkgLjSIwtYf","signatures":[{"signature":"riqOvodNKT7bGAOZxkjoZpGUM56rDLEEIlfyFH6mIe3hAU8xMx6MHj41dil7DDZOwoONnqf09mOZjE1n0xbLBg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiguoqpzx2btxucvyrtczyc3zglknluflpomplmtbcjafy2irqwwd4"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HiMvZGVmaW5pdGlvbnMvUXVhbGl0YXRpdmVWYWx1ZWtkZXNjcmlwdGlvbniBQSBwcmVkZWZpbmVkIHZhbHVlIGZvciBhIHByb2R1Y3QgY2hhcmFjdGVyaXN0aWMsIGUuZy4gdGhlIHBvd2VyIGNvcmQgcGx1ZyB0eXBlICdVUycgb3IgdGhlIGdhcm1lbnQgc2l6ZXMgJ1MnLCAnTScsICdMJywgYW5kICdYTCcuZXRpdGxlcVNpemVTcGVjaWZpY2F0aW9uZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzpmlzaXplR3JvdXCiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZ4G3NjaGVtYTpTaXplR3JvdXBFbnVtZXJhdGlvbmtkZXNjcmlwdGlvbnkBGVRoZSBzaXplIGdyb3VwIChhbHNvIGtub3duIGFzICJzaXplIHR5cGUiKSBmb3IgYSBwcm9kdWN0J3Mgc2l6ZS4gU2l6ZSBncm91cHMgYXJlIGNvbW1vbiBpbiB0aGUgZmFzaGlvbiBpbmR1c3RyeSB0byBkZWZpbmUgc2l6ZSBzZWdtZW50cyBhbmQgc3VnZ2VzdGVkIGF1ZGllbmNlcyBmb3Igd2VhcmFibGUgcHJvZHVjdHMuIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY29tYmluZWQsIGZvciBleGFtcGxlICJtZW4ncyBiaWcgYW5kIHRhbGwiLCAicGV0aXRlIG1hdGVybml0eSIgb3IgInJlZ3VsYXIianNpemVTeXN0ZW2iZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZ4HHNjaGVtYTpTaXplU3lzdGVtRW51bWVyYXRpb25rZGVzY3JpcHRpb2542lRoZSBzaXplIHN5c3RlbSB1c2VkIHRvIGlkZW50aWZ5IGEgcHJvZHVjdCdzIHNpemUuIFR5cGljYWxseSBlaXRoZXIgYSBzdGFuZGFyZCAoZm9yIGV4YW1wbGUsICJHUzEiIG9yICJJU08tRU4xMzQwMiIpLCBjb3VudHJ5IGNvZGUgKGZvciBleGFtcGxlICJVUyIgb3IgIkpQIiksIG9yIGEgbWVhc3VyaW5nIHN5c3RlbSAoZm9yIGV4YW1wbGUgIk1ldHJpYyIgb3IgIkltcGVyaWFsIikubHN1Z2dlc3RlZEFnZaJkJHJlZngYc2NoZW1hOlF1YW50aXRhdGl2ZVZhbHVla2Rlc2NyaXB0aW9ueHZUaGUgYWdlIG9yIGFnZSByYW5nZSBmb3IgdGhlIGludGVuZGVkIGF1ZGllbmNlIG9yIHBlcnNvbiwgZm9yIGV4YW1wbGUgMy0xMiBtb250aHMgZm9yIGluZmFudHMsIDEtNSB5ZWFycyBmb3IgdG9kZGxlcnMubmhhc01lYXN1cmVtZW50omVvbmVPZoKhZCRyZWZ4GHNjaGVtYTpRdWFudGl0YXRpdmVWYWx1ZaJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZngYc2NoZW1hOlF1YW50aXRhdGl2ZVZhbHVla2Rlc2NyaXB0aW9uePBBIHByb2R1Y3QgbWVhc3VyZW1lbnQsIGZvciBleGFtcGxlIHRoZSBpbnNlYW0gb2YgcGFudHMsIHRoZSB3aGVlbCBzaXplIG9mIGEgYmljeWNsZSwgb3IgdGhlIGdhdWdlIG9mIGEgc2NyZXcuIFVzdWFsbHkgYW4gZXhhY3QgbWVhc3VyZW1lbnQsIGJ1dCBjYW4gYWxzbyBiZSBhIHJhbmdlIG9mIG1lYXN1cmVtZW50cyBmb3IgYWRqdXN0YWJsZSBwcm9kdWN0cywgZm9yIGV4YW1wbGUgYmVsdHMgYW5kIHNraSBiaW5kaW5ncy5vc3VnZ2VzdGVkR2VuZGVyomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcXNjaGVtYTpHZW5kZXJUeXBla2Rlc2NyaXB0aW9ueGNUaGUgc3VnZ2VzdGVkIGdlbmRlciBvZiB0aGUgaW50ZW5kZWQgcGVyc29uIG9yIGF1ZGllbmNlLCBmb3IgZXhhbXBsZSAibWFsZSIsICJmZW1hbGUiLCBvciAidW5pc2V4Ii50c3VnZ2VzdGVkTWVhc3VyZW1lbnSiZW9uZU9mgqFkJHJlZngYc2NoZW1hOlF1YW50aXRhdGl2ZVZhbHVlomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmeBhzY2hlbWE6UXVhbnRpdGF0aXZlVmFsdWVrZGVzY3JpcHRpb2540EEgc3VnZ2VzdGVkIHJhbmdlIG9mIGJvZHkgbWVhc3VyZW1lbnRzIGZvciB0aGUgaW50ZW5kZWQgYXVkaWVuY2Ugb3IgcGVyc29uLCBmb3IgZXhhbXBsZSBpbnNlYW0gYmV0d2VlbiAzMiBhbmQgMzQgaW5jaGVzIG9yIGhlaWdodCBiZXR3ZWVuIDE3MCBhbmQgMTkwIGNtLiBUeXBpY2FsbHkgZm91bmQgb24gYSBzaXplIGNoYXJ0IGZvciB3ZWFyYWJsZSBwcm9kdWN0cy5rZGVmaW5pdGlvbnOhcFF1YWxpdGF0aXZlVmFsdWWkZHR5cGVmb2JqZWN0ZXRpdGxlcFF1YWxpdGF0aXZlVmFsdWVqcHJvcGVydGllc6hlZXF1YWyiZW9uZU9mgqFkJHJlZndzY2hlbWE6UXVhbGl0YXRpdmVWYWx1ZaJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZndzY2hlbWE6UXVhbGl0YXRpdmVWYWx1ZWtkZXNjcmlwdGlvbnhgVGhpcyBvcmRlcmluZyByZWxhdGlvbiBmb3IgcXVhbGl0YXRpdmUgdmFsdWVzIGluZGljYXRlcyB0aGF0IHRoZSBzdWJqZWN0IGlzIGVxdWFsIHRvIHRoZSBvYmplY3QuZmxlc3NlcqJlb25lT2aCoWQkcmVmd3NjaGVtYTpRdWFsaXRhdGl2ZVZhbHVlomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmd3NjaGVtYTpRdWFsaXRhdGl2ZVZhbHVla2Rlc2NyaXB0aW9ueGNUaGlzIG9yZGVyaW5nIHJlbGF0aW9uIGZvciBxdWFsaXRhdGl2ZSB2YWx1ZXMgaW5kaWNhdGVzIHRoYXQgdGhlIHN1YmplY3QgaXMgbGVzc2VyIHRoYW4gdGhlIG9iamVjdC5nZ3JlYXRlcqJlb25lT2aCoWQkcmVmd3NjaGVtYTpRdWFsaXRhdGl2ZVZhbHVlomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmd3NjaGVtYTpRdWFsaXRhdGl2ZVZhbHVla2Rlc2NyaXB0aW9ueGRUaGlzIG9yZGVyaW5nIHJlbGF0aW9uIGZvciBxdWFsaXRhdGl2ZSB2YWx1ZXMgaW5kaWNhdGVzIHRoYXQgdGhlIHN1YmplY3QgaXMgZ3JlYXRlciB0aGFuIHRoZSBvYmplY3QuaG5vbkVxdWFsomVvbmVPZoKhZCRyZWZ3c2NoZW1hOlF1YWxpdGF0aXZlVmFsdWWiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ3c2NoZW1hOlF1YWxpdGF0aXZlVmFsdWVrZGVzY3JpcHRpb254ZFRoaXMgb3JkZXJpbmcgcmVsYXRpb24gZm9yIHF1YWxpdGF0aXZlIHZhbHVlcyBpbmRpY2F0ZXMgdGhhdCB0aGUgc3ViamVjdCBpcyBub3QgZXF1YWwgdG8gdGhlIG9iamVjdC5tbGVzc2VyT3JFcXVhbKJlb25lT2aCoWQkcmVmd3NjaGVtYTpRdWFsaXRhdGl2ZVZhbHVlomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmd3NjaGVtYTpRdWFsaXRhdGl2ZVZhbHVla2Rlc2NyaXB0aW9ueG9UaGlzIG9yZGVyaW5nIHJlbGF0aW9uIGZvciBxdWFsaXRhdGl2ZSB2YWx1ZXMgaW5kaWNhdGVzIHRoYXQgdGhlIHN1YmplY3QgaXMgbGVzc2VyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIG9iamVjdC5uZ3JlYXRlck9yRXF1YWyiZW9uZU9mgqFkJHJlZndzY2hlbWE6UXVhbGl0YXRpdmVWYWx1ZaJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZndzY2hlbWE6UXVhbGl0YXRpdmVWYWx1ZWtkZXNjcmlwdGlvbnhwVGhpcyBvcmRlcmluZyByZWxhdGlvbiBmb3IgcXVhbGl0YXRpdmUgdmFsdWVzIGluZGljYXRlcyB0aGF0IHRoZSBzdWJqZWN0IGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgb2JqZWN0Lm52YWx1ZVJlZmVyZW5jZaJlb25lT2aCoWVhbnlPZoihZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybaFkJHJlZnJzY2hlbWE6RW51bWVyYXRpb26hZCRyZWZ4IXNjaGVtYTpNZWFzdXJlbWVudFR5cGVFbnVtZXJhdGlvbqFkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZaFkJHJlZndzY2hlbWE6UXVhbGl0YXRpdmVWYWx1ZaFkJHJlZngYc2NoZW1hOlF1YW50aXRhdGl2ZVZhbHVloWQkcmVmdnNjaGVtYTpTdHJ1Y3R1cmVkVmFsdWWiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9miKFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJtoWQkcmVmcnNjaGVtYTpFbnVtZXJhdGlvbqFkJHJlZnghc2NoZW1hOk1lYXN1cmVtZW50VHlwZUVudW1lcmF0aW9uoWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVloWQkcmVmd3NjaGVtYTpRdWFsaXRhdGl2ZVZhbHVloWQkcmVmeBhzY2hlbWE6UXVhbnRpdGF0aXZlVmFsdWWhZCRyZWZ2c2NoZW1hOlN0cnVjdHVyZWRWYWx1ZWtkZXNjcmlwdGlvbniEQSBzZWNvbmRhcnkgdmFsdWUgdGhhdCBwcm92aWRlcyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIG9uIHRoZSBvcmlnaW5hbCB2YWx1ZSwgZS5nLiBhIHJlZmVyZW5jZSB0ZW1wZXJhdHVyZSBvciBhIHR5cGUgb2YgbWVhc3VyZW1lbnQucmFkZGl0aW9uYWxQcm9wZXJ0eaJlb25lT2aCoWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVlomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVla2Rlc2NyaXB0aW9ueQH4QSBwcm9wZXJ0eS12YWx1ZSBwYWlyIHJlcHJlc2VudGluZyBhbiBhZGRpdGlvbmFsIGNoYXJhY3RlcmlzdGljcyBvZiB0aGUgZW50aXRpdHksIGUuZy4gYSBwcm9kdWN0IGZlYXR1cmUgb3IgYW5vdGhlciBjaGFyYWN0ZXJpc3RpYyBmb3Igd2hpY2ggdGhlcmUgaXMgbm8gbWF0Y2hpbmcgcHJvcGVydHkgaW4gc2NoZW1hLm9yZy5cblxuTm90ZTogUHVibGlzaGVycyBzaG91bGQgYmUgYXdhcmUgdGhhdCBhcHBsaWNhdGlvbnMgZGVzaWduZWQgdG8gdXNlIHNwZWNpZmljIHNjaGVtYS5vcmcgcHJvcGVydGllcyAoZS5nLiBodHRwczovL3NjaGVtYS5vcmcvd2lkdGgsIGh0dHBzOi8vc2NoZW1hLm9yZy9jb2xvciwgaHR0cHM6Ly9zY2hlbWEub3JnL2d0aW4xMywgLi4uKSB3aWxsIHR5cGljYWxseSBleHBlY3Qgc3VjaCBkYXRhIHRvIGJlIHByb3ZpZGVkIHVzaW5nIHRob3NlIHByb3BlcnRpZXMsIHJhdGhlciB0aGFuIHVzaW5nIHRoZSBnZW5lcmljIHByb3BlcnR5L3ZhbHVlIG1lY2hhbmlzbS4Ka2Rlc2NyaXB0aW9ueIFBIHByZWRlZmluZWQgdmFsdWUgZm9yIGEgcHJvZHVjdCBjaGFyYWN0ZXJpc3RpYywgZS5nLiB0aGUgcG93ZXIgY29yZCBwbHVnIHR5cGUgJ1VTJyBvciB0aGUgZ2FybWVudCBzaXplcyAnUycsICdNJywgJ0wnLCBhbmQgJ1hMJy5rZGVzY3JpcHRpb255AUJTaXplIHJlbGF0ZWQgcHJvcGVydGllcyBvZiBhIHByb2R1Y3QsIHR5cGljYWxseSBhIHNpemUgY29kZSAoW1tuYW1lXV0pIGFuZCBvcHRpb25hbGx5IGEgW1tzaXplU3lzdGVtXV0sIFtbc2l6ZUdyb3VwXV0sIGFuZCBwcm9kdWN0IG1lYXN1cmVtZW50cyAoW1toYXNNZWFzdXJlbWVudF1dKS4gSW4gYWRkaXRpb24sIHRoZSBpbnRlbmRlZCBhdWRpZW5jZSBjYW4gYmUgZGVmaW5lZCB0aHJvdWdoIFtbc3VnZ2VzdGVkQWdlXV0sIFtbc3VnZ2VzdGVkR2VuZGVyXV0sIGFuZCBzdWdnZXN0ZWQgYm9keSBtZWFzdXJlbWVudHMgKFtbc3VnZ2VzdGVkTWVhc3VyZW1lbnRdXSkuZmhlYWRlcqJmdW5pcXVlcDQ3TFBTNFcvMnZabFJ0NlJrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1fryf4kt5hzwjs3afr1a5mza3w3fn6rq2sn2r29aw6gr4au0wp3faps"},"kjzl6cwe1jw14baxwkb53m88zgknc51f69fjtudaed7gs6xy62kdkic30xypmjp":{"alias":"SizeGroupEnumeration","commits":[{"jws":{"payload":"AXESIE2NPJZ3Jlk4AmTKroDieFaUNoKy_Fc8fvDXya6aC8Io","signatures":[{"signature":"1R40o_EYx8BKGq2-w2ljr-AZXDGYCmnlG6HXk5vv7F5d6gXa8DEqYSyMsx8xmUmq4mtrkfZDI1QYqGAiEQiuDg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicnru6jm5zgle4aezgkv2aoe6cwsq3ifmx4k46h54gxzgxjuc6cfa"},"linkedBlock":"omRkYXRhpGR0eXBlZm9iamVjdGV0aXRsZXRTaXplR3JvdXBFbnVtZXJhdGlvbmckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNrZGVzY3JpcHRpb254PUVudW1lcmF0ZXMgY29tbW9uIHNpemUgZ3JvdXBzIGZvciB2YXJpb3VzIHByb2R1Y3QgY2F0ZWdvcmllcy5maGVhZGVyomZ1bmlxdWVwSndGdlVLK3BRSkZrZ2Q4MWtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1fryodt3kf89q2nw5utybu3wj2l07yhy5x3chdez68whudxipiu8c1s"},"kjzl6cwe1jw149hi44y4lvmmjvm5sfklufq4b24o063e3kyd6z80ckknttkwd38":{"alias":"SizeSystemEnumeration","commits":[{"jws":{"payload":"AXESIApLF5kBrTDkfUCQCjOLJRQ4vzhab7F7Wm2z150azyjy","signatures":[{"signature":"ThwsGhWwUCPQ2qktjZg4Y9ei8GK_boLyNCwvQiRgVxcMF0TZDQVq9y8uqMdw6HU06yJDE6FmpnnKQOPMMOZhDg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiakjmlzsanngdsh2qeqbizywjiuhc7tqwtpwf5vu3nt26orvtzi6i"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoKiZWNvbnN0clNpemVTeXN0ZW1JbXBlcmlhbGtkZXNjcmlwdGlvbnVJbXBlcmlhbCBzaXplIHN5c3RlbS6iZWNvbnN0cFNpemVTeXN0ZW1NZXRyaWNrZGVzY3JpcHRpb25zTWV0cmljIHNpemUgc3lzdGVtLmV0aXRsZXVTaXplU3lzdGVtRW51bWVyYXRpb25nJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEja2Rlc2NyaXB0aW9ueItFbnVtZXJhdGVzIGNvbW1vbiBzaXplIHN5c3RlbXMgZm9yIGRpZmZlcmVudCBjYXRlZ29yaWVzIG9mIHByb2R1Y3RzLCBmb3IgZXhhbXBsZSAiRU4tMTM0MDIiIG9yICJVSyIgZm9yIHdlYXJhYmxlcyBvciAiSW1wZXJpYWwiIGZvciBzY3Jld3MuZmhlYWRlcqJmdW5pcXVlcDA3MjN1SDdXMlo2NkowVGRrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frybggtf6orkwwdctl66qjcftqmn56p7c49h0dtmgyheaxg2cm52ww"},"kjzl6cwe1jw148l9w1av4ye3n2oo7l4o8e5sdwyg4we9iwrraziadxqz72rcrx9":{"alias":"GenderType","commits":[{"jws":{"payload":"AXESIEoxZWd-gS1XxpmbWQncOdeT7g3EumQOx6I97oxc6TZY","signatures":[{"signature":"I36i0MebrbMUWHfaWqhzfq1N5UWGJAY-x3vtj8rVFonkYkI3_dlhgMG35OWaZuol0PPwJ-9iFgxmN9W7TU6DCw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreickgfswo7ubfvl4ngm3lee5yooxspxa3rf2mqhmpir552gfz2jwla"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoKiZWNvbnN0ZkZlbWFsZWtkZXNjcmlwdGlvbnJUaGUgZmVtYWxlIGdlbmRlci6iZWNvbnN0ZE1hbGVrZGVzY3JpcHRpb25wVGhlIG1hbGUgZ2VuZGVyLmV0aXRsZWpHZW5kZXJUeXBlZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZXNjcmlwdGlvbngaQW4gZW51bWVyYXRpb24gb2YgZ2VuZGVycy5maGVhZGVyomZ1bmlxdWVwSDFkaFp2c2N1S2dHUjlhTGtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1fry53abt99f8k9w33g5y98bop5uycyqudfqh1e64i1v3zuabmiukg0"},"kjzl6cwe1jw14aq11rcypr0mjjnfkm74a1z5fg97ghsg4ucni44pk7rt2yxjrdf":{"alias":"VideoObject","commits":[{"jws":{"payload":"AXESII2-7EX2eiGfQg_XRMXKgLKeL2fKpdRilkBR-8zClJEx","signatures":[{"signature":"9EoTRCF2Y6CuwIFFaleFdbTW9L4gV2RkZdeaQLVyC3PYC7TjfbvudgCrci0HVHuDfaV0ifdz18BTQKk4jpuDBw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreienx3wel5t2egpued6xitc4vafstyxwpsvf2rrjmqcr7pgmfferge"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fryk93gik6v44gazqmqlumfi1ylvlh1aiaqftz4tdhrr9qt4ekineo"},"kjzl6cwe1jw147lqyuicdokpq00l08mhdk2mh4mvw5f9hs4zts33pl5q3ucear6":{"alias":"NutritionInformation","commits":[{"jws":{"payload":"AXESIO9z2ZcWgRsoibRID2QlkF5sS7wALEZplMLiwnSGbKtI","signatures":[{"signature":"s_OYXwf8FxGFc7jSwjCIClJwGch3cZLTHLFugRZJiZKGJEyEcNNavmtrQTY7vAImHReGCVo7BsYSvgotVTYGBg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihpopmzofubdmuitncib5sclec6nrf3yabmizuzjqxcyj2im3flja"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HSMvZGVmaW5pdGlvbnMvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcuZXRpdGxldE51dHJpdGlvbkluZm9ybWF0aW9uZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzrGhjYWxvcmllc6NkdHlwZWZzdHJpbmdoJGNvbW1lbnR4GWh0dHBzOi8vc2NoZW1hLm9yZy9FbmVyZ3lrZGVzY3JpcHRpb253VGhlIG51bWJlciBvZiBjYWxvcmllcy5qZmF0Q29udGVudKNkdHlwZWZzdHJpbmdoJGNvbW1lbnR3aHR0cHM6Ly9zY2hlbWEub3JnL01hc3NrZGVzY3JpcHRpb254G1RoZSBudW1iZXIgb2YgZ3JhbXMgb2YgZmF0LmtzZXJ2aW5nU2l6ZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254O1RoZSBzZXJ2aW5nIHNpemUsIGluIHRlcm1zIG9mIHRoZSBudW1iZXIgb2Ygdm9sdW1lIG9yIG1hc3MubGZpYmVyQ29udGVudKNkdHlwZWZzdHJpbmdoJGNvbW1lbnR3aHR0cHM6Ly9zY2hlbWEub3JnL01hc3NrZGVzY3JpcHRpb254HVRoZSBudW1iZXIgb2YgZ3JhbXMgb2YgZmliZXIubHN1Z2FyQ29udGVudKNkdHlwZWZzdHJpbmdoJGNvbW1lbnR3aHR0cHM6Ly9zY2hlbWEub3JnL01hc3NrZGVzY3JpcHRpb254HVRoZSBudW1iZXIgb2YgZ3JhbXMgb2Ygc3VnYXIubXNvZGl1bUNvbnRlbnSjZHR5cGVmc3RyaW5naCRjb21tZW50d2h0dHBzOi8vc2NoZW1hLm9yZy9NYXNza2Rlc2NyaXB0aW9ueCNUaGUgbnVtYmVyIG9mIG1pbGxpZ3JhbXMgb2Ygc29kaXVtLm5wcm90ZWluQ29udGVudKNkdHlwZWZzdHJpbmdoJGNvbW1lbnR3aHR0cHM6Ly9zY2hlbWEub3JnL01hc3NrZGVzY3JpcHRpb254H1RoZSBudW1iZXIgb2YgZ3JhbXMgb2YgcHJvdGVpbi5vdHJhbnNGYXRDb250ZW50o2R0eXBlZnN0cmluZ2gkY29tbWVudHdodHRwczovL3NjaGVtYS5vcmcvTWFzc2tkZXNjcmlwdGlvbnghVGhlIG51bWJlciBvZiBncmFtcyBvZiB0cmFucyBmYXQucmNob2xlc3Rlcm9sQ29udGVudKNkdHlwZWZzdHJpbmdoJGNvbW1lbnR3aHR0cHM6Ly9zY2hlbWEub3JnL01hc3NrZGVzY3JpcHRpb254KFRoZSBudW1iZXIgb2YgbWlsbGlncmFtcyBvZiBjaG9sZXN0ZXJvbC5zY2FyYm9oeWRyYXRlQ29udGVudKNkdHlwZWZzdHJpbmdoJGNvbW1lbnR3aHR0cHM6Ly9zY2hlbWEub3JnL01hc3NrZGVzY3JpcHRpb254JVRoZSBudW1iZXIgb2YgZ3JhbXMgb2YgY2FyYm9oeWRyYXRlcy5zc2F0dXJhdGVkRmF0Q29udGVudKNkdHlwZWZzdHJpbmdoJGNvbW1lbnR3aHR0cHM6Ly9zY2hlbWEub3JnL01hc3NrZGVzY3JpcHRpb254JVRoZSBudW1iZXIgb2YgZ3JhbXMgb2Ygc2F0dXJhdGVkIGZhdC51dW5zYXR1cmF0ZWRGYXRDb250ZW50o2R0eXBlZnN0cmluZ2gkY29tbWVudHdodHRwczovL3NjaGVtYS5vcmcvTWFzc2tkZXNjcmlwdGlvbngnVGhlIG51bWJlciBvZiBncmFtcyBvZiB1bnNhdHVyYXRlZCBmYXQua2RlZmluaXRpb25zo2VUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uakludGFuZ2libGWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZnMjL2RlZmluaXRpb25zL1RoaW5na2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5ldGl0bGVqSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMub1N0cnVjdHVyZWRWYWx1ZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmeBgjL2RlZmluaXRpb25zL0ludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmV0aXRsZW9TdHJ1Y3R1cmVkVmFsdWVrZGVzY3JpcHRpb254l1N0cnVjdHVyZWQgdmFsdWVzIGFyZSB1c2VkIHdoZW4gdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgaGFzIGEgbW9yZSBjb21wbGV4IHN0cnVjdHVyZSB0aGFuIHNpbXBseSBiZWluZyBhIHRleHR1YWwgdmFsdWUgb3IgYSByZWZlcmVuY2UgdG8gYW5vdGhlciB0aGluZy5rZGVzY3JpcHRpb254KU51dHJpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZWNpcGUuZmhlYWRlcqJmdW5pcXVlcGZaNzg0RjEwTVRBa0c0MzBrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frxy2nrsyg1araww45dpbvkeqntsyqsmkjig3irrq2dygpnbs5oh6o"},"kjzl6cwe1jw145el2u5rdp35xnvthhk20nttxmj2ofumq90n63529650naxxh3m":{"alias":"RestrictedDiet","commits":[{"jws":{"payload":"AXESIPTaBHtm2-cXnkUi0htcjirqf4YSWeuNR7qb6D8mvjyS","signatures":[{"signature":"HI8VBRX6Qp5oRRdTX3j-Og7apo7P2QEM2ngyfIBUzZ6X_ZzkRbgrIAZodnAbA1i7SKSYPXxag1rS2Pt5d7USAg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihu3ichwzw344lz4rjc2invzdrk5j7ymesz5ogupou35a7snpr4si"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZouiZWNvbnN0bERpYWJldGljRGlldGtkZXNjcmlwdGlvbngsQSBkaWV0IGFwcHJvcHJpYXRlIGZvciBwZW9wbGUgd2l0aCBkaWFiZXRlcy6iZWNvbnN0bkdsdXRlbkZyZWVEaWV0a2Rlc2NyaXB0aW9ueBtBIGRpZXQgZXhjbHVzaXZlIG9mIGdsdXRlbi6iZWNvbnN0aUhhbGFsRGlldGtkZXNjcmlwdGlvbngvQSBkaWV0IGNvbmZvcm1pbmcgdG8gSXNsYW1pYyBkaWV0YXJ5IHByYWN0aWNlcy6iZWNvbnN0aUhpbmR1RGlldGtkZXNjcmlwdGlvbnhHQSBkaWV0IGNvbmZvcm1pbmcgdG8gSGluZHUgZGlldGFyeSBwcmFjdGljZXMsIGluIHBhcnRpY3VsYXIsIGJlZWYtZnJlZS6iZWNvbnN0aktvc2hlckRpZXRrZGVzY3JpcHRpb254LkEgZGlldCBjb25mb3JtaW5nIHRvIEpld2lzaCBkaWV0YXJ5IHByYWN0aWNlcy6iZWNvbnN0bkxvd0NhbG9yaWVEaWV0a2Rlc2NyaXB0aW9ueClBIGRpZXQgZm9jdXNlZCBvbiByZWR1Y2VkIGNhbG9yaWUgaW50YWtlLqJlY29uc3RqTG93RmF0RGlldGtkZXNjcmlwdGlvbng1QSBkaWV0IGZvY3VzZWQgb24gcmVkdWNlZCBmYXQgYW5kIGNob2xlc3Rlcm9sIGludGFrZS6iZWNvbnN0bkxvd0xhY3Rvc2VEaWV0a2Rlc2NyaXB0aW9ueDdBIGRpZXQgYXBwcm9wcmlhdGUgZm9yIHBlb3BsZSB3aXRoIGxhY3Rvc2UgaW50b2xlcmFuY2UuomVjb25zdGtMb3dTYWx0RGlldGtkZXNjcmlwdGlvbngoQSBkaWV0IGZvY3VzZWQgb24gcmVkdWNlZCBzb2RpdW0gaW50YWtlLqJlY29uc3RpVmVnYW5EaWV0a2Rlc2NyaXB0aW9ueChBIGRpZXQgZXhjbHVzaXZlIG9mIGFsbCBhbmltYWwgcHJvZHVjdHMuomVjb25zdG5WZWdldGFyaWFuRGlldGtkZXNjcmlwdGlvbnggQSBkaWV0IGV4Y2x1c2l2ZSBvZiBhbmltYWwgbWVhdC5ldGl0bGVuUmVzdHJpY3RlZERpZXRnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEja2Rlc2NyaXB0aW9ueGlBIGRpZXQgcmVzdHJpY3RlZCB0byBjZXJ0YWluIGZvb2RzIG9yIHByZXBhcmF0aW9ucyBmb3IgY3VsdHVyYWwsIHJlbGlnaW91cywgaGVhbHRoIG9yIGxpZmVzdHlsZSByZWFzb25zLiBmaGVhZGVyomZ1bmlxdWVwNlhlbjhON0UrckY4RGZFS2tjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frxifpw6gypeei7du9ocumcpg4v47n1sptmo4krac017nolpta1log"},"kjzl6cwe1jw147gb5xrh9wwawni1k0e4km24xdaq31m29b98cllumg767jp4yan":{"alias":"Trip","commits":[{"jws":{"payload":"AXESILUFxO9cBVNoOA5B9b4VOXQLUX5rmUH96_jWZ6s01I21","signatures":[{"signature":"OvLM7R88AdGCOlP20FkFX5gR0hRnRegTP1rlevNR55-7Q05chm1zEUfPgGICc32arDUD7WAVNcwHUMBoodbPAw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifvaxco6xafknudqdsb6w7bkolubnix424zih66x6gwm6vtjvenwu"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlZFRyaXBnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjanByb3BlcnRpZXOnZm9mZmVyc6Jlb25lT2aCoWVhbnlPZoKhZCRyZWZtc2NoZW1hOkRlbWFuZKFkJHJlZmxzY2hlbWE6T2ZmZXKiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZm1zY2hlbWE6RGVtYW5koWQkcmVmbHNjaGVtYTpPZmZlcmtkZXNjcmlwdGlvbnkCBUFuIG9mZmVyIHRvIHByb3ZpZGUgdGhpcyBpdGVt4oCUZm9yIGV4YW1wbGUsIGFuIG9mZmVyIHRvIHNlbGwgYSBwcm9kdWN0LCByZW50IHRoZSBEVkQgb2YgYSBtb3ZpZSwgcGVyZm9ybSBhIHNlcnZpY2UsIG9yIGdpdmUgYXdheSB0aWNrZXRzIHRvIGFuIGV2ZW50LiBVc2UgW1tidXNpbmVzc0Z1bmN0aW9uXV0gdG8gaW5kaWNhdGUgdGhlIGtpbmQgb2YgdHJhbnNhY3Rpb24gb2ZmZXJlZCwgaS5lLiBzZWxsLCBsZWFzZSwgZXRjLiBUaGlzIHByb3BlcnR5IGNhbiBhbHNvIGJlIHVzZWQgdG8gZGVzY3JpYmUgYSBbW0RlbWFuZF1dLiBXaGlsZSB0aGlzIHByb3BlcnR5IGlzIGxpc3RlZCBhcyBleHBlY3RlZCBvbiBhIG51bWJlciBvZiBjb21tb24gdHlwZXMsIGl0IGNhbiBiZSB1c2VkIGluIG90aGVycy4gSW4gdGhhdCBjYXNlLCB1c2luZyBhIHNlY29uZCB0eXBlLCBzdWNoIGFzIFByb2R1Y3Qgb3IgYSBzdWJ0eXBlIG9mIFByb2R1Y3QsIGNhbiBjbGFyaWZ5IHRoZSBuYXR1cmUgb2YgdGhlIG9mZmVyLgogICAgICBnc3ViVHJpcKJlb25lT2aCoWQkcmVma3NjaGVtYTpUcmlwomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVma3NjaGVtYTpUcmlwa2Rlc2NyaXB0aW9ueGpJZGVudGlmaWVzIGEgW1tUcmlwXV0gdGhhdCBpcyBhIHN1YlRyaXAgb2YgdGhpcyBUcmlwLiAgRm9yIGV4YW1wbGUgRGF5IDEsIERheSAyLCBldGMuIG9mIGEgbXVsdGktZGF5IHRyaXAuaHByb3ZpZGVyomVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueNBUaGUgc2VydmljZSBwcm92aWRlciwgc2VydmljZSBvcGVyYXRvciwgb3Igc2VydmljZSBwZXJmb3JtZXI7IHRoZSBnb29kcyBwcm9kdWNlci4gQW5vdGhlciBwYXJ0eSAoYSBzZWxsZXIpIG1heSBvZmZlciB0aG9zZSBzZXJ2aWNlcyBvciBnb29kcyBvbiBiZWhhbGYgb2YgdGhlIHByb3ZpZGVyLiBBIHByb3ZpZGVyIG1heSBhbHNvIHNlcnZlIGFzIHRoZSBzZWxsZXIuaWl0aW5lcmFyeaJlb25lT2aCoWVhbnlPZoKhZCRyZWZvc2NoZW1hOkl0ZW1MaXN0oWQkcmVmbHNjaGVtYTpQbGFjZaJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmb3NjaGVtYTpJdGVtTGlzdKFkJHJlZmxzY2hlbWE6UGxhY2VrZGVzY3JpcHRpb254mERlc3RpbmF0aW9uKHMpICggW1tQbGFjZV1dICkgdGhhdCBtYWtlIHVwIGEgdHJpcC4gRm9yIGEgdHJpcCB3aGVyZSBkZXN0aW5hdGlvbiBvcmRlciBpcyBpbXBvcnRhbnQgdXNlIFtbSXRlbUxpc3RdXSB0byBzcGVjaWZ5IHRoYXQgb3JkZXIgKHNlZSBleGFtcGxlcykuanBhcnRPZlRyaXCiZW9uZU9mgqFkJHJlZmtzY2hlbWE6VHJpcKJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZmtzY2hlbWE6VHJpcGtkZXNjcmlwdGlvbnhwSWRlbnRpZmllcyB0aGF0IHRoaXMgW1tUcmlwXV0gaXMgYSBzdWJUcmlwIG9mIGFub3RoZXIgVHJpcC4gIEZvciBleGFtcGxlIERheSAxLCBEYXkgMiwgZXRjLiBvZiBhIG11bHRpLWRheSB0cmlwLmthcnJpdmFsVGltZaJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1lomR0eXBlZnN0cmluZ2Zmb3JtYXRkdGltZWtkZXNjcmlwdGlvbngaVGhlIGV4cGVjdGVkIGFycml2YWwgdGltZS5tZGVwYXJ0dXJlVGltZaJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1lomR0eXBlZnN0cmluZ2Zmb3JtYXRkdGltZWtkZXNjcmlwdGlvbngcVGhlIGV4cGVjdGVkIGRlcGFydHVyZSB0aW1lLmtkZWZpbml0aW9uc6JlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmtkZXNjcmlwdGlvbnhAQSB0cmlwIG9yIGpvdXJuZXkuIEFuIGl0aW5lcmFyeSBvZiB2aXNpdHMgdG8gb25lIG9yIG1vcmUgcGxhY2VzLmZoZWFkZXKiZnVuaXF1ZXB0eXNkYUxJWjJyUHREeFNDa2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frxwzze83euhxpk74b2asgikv71ak9hngw281ndlndrn705o2r7vnk"},"kjzl6cwe1jw149m8gz1rbstocaqldhqneigl4cfl6ibmm0j48w73350kdbct3jy":{"alias":"OfferShippingDetails","commits":[{"jws":{"payload":"AXESICTXynvNg98o1LmXN665lkWtd3HaOlMONKUYf6_Q_6DK","signatures":[{"signature":"VUnpzGhV6xAT8dwMl28EnZsQf7AsZzEJy5RxORoQ1OBF0K6kvjdUm84yRRPPuVbuIIAD-XIb7Zlfti00IQdvBw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreibe27fhxtmd34unjomxg6xltfsfvv3xdwr2kmhdjjiyp6x5b75azi"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HSMvZGVmaW5pdGlvbnMvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcuZXRpdGxldE9mZmVyU2hpcHBpbmdEZXRhaWxzZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzp2tkb2VzTm90U2hpcKJkdHlwZWdib29sZWFua2Rlc2NyaXB0aW9ueFFJbmRpY2F0ZXMgd2hlbiBzaGlwcGluZyB0byBhIHBhcnRpY3VsYXIgW1tzaGlwcGluZ0Rlc3RpbmF0aW9uXV0gaXMgbm90IGF2YWlsYWJsZS5sZGVsaXZlcnlUaW1lomQkcmVmeBtzY2hlbWE6U2hpcHBpbmdEZWxpdmVyeVRpbWVrZGVzY3JpcHRpb254W1RoZSB0b3RhbCBkZWxheSBiZXR3ZWVuIHRoZSByZWNlaXB0IG9mIHRoZSBvcmRlciBhbmQgdGhlIGdvb2RzIHJlYWNoaW5nIHRoZSBmaW5hbCBjdXN0b21lci5sc2hpcHBpbmdSYXRlomQkcmVmdXNjaGVtYTpNb25ldGFyeUFtb3VudGtkZXNjcmlwdGlvbnilVGhlIHNoaXBwaW5nIHJhdGUgaXMgdGhlIGNvc3Qgb2Ygc2hpcHBpbmcgdG8gdGhlIHNwZWNpZmllZCBkZXN0aW5hdGlvbi4gVHlwaWNhbGx5LCB0aGUgbWF4VmFsdWUgYW5kIGN1cnJlbmN5IHZhbHVlcyAob2YgdGhlIFtbTW9uZXRhcnlBbW91bnRdXSkgYXJlIG1vc3QgYXBwcm9wcmlhdGUubXNoaXBwaW5nTGFiZWyiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueI5MYWJlbCB0byBtYXRjaCBhbiBbW09mZmVyU2hpcHBpbmdEZXRhaWxzXV0gd2l0aCBhIFtbU2hpcHBpbmdSYXRlU2V0dGluZ3NdXSAod2l0aGluIHRoZSBjb250ZXh0IG9mIGEgW1tzaGlwcGluZ1NldHRpbmdzTGlua11dIGNyb3NzLXJlZmVyZW5jZSkucHRyYW5zaXRUaW1lTGFiZWyiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueI5MYWJlbCB0byBtYXRjaCBhbiBbW09mZmVyU2hpcHBpbmdEZXRhaWxzXV0gd2l0aCBhIFtbRGVsaXZlcnlUaW1lU2V0dGluZ3NdXSAod2l0aGluIHRoZSBjb250ZXh0IG9mIGEgW1tzaGlwcGluZ1NldHRpbmdzTGlua11dIGNyb3NzLXJlZmVyZW5jZSkuc3NoaXBwaW5nRGVzdGluYXRpb26iZW9uZU9mgqFkJHJlZnRzY2hlbWE6RGVmaW5lZFJlZ2lvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZnRzY2hlbWE6RGVmaW5lZFJlZ2lvbmtkZXNjcmlwdGlvbnhxaW5kaWNhdGVzIChwb3NzaWJseSBtdWx0aXBsZSkgc2hpcHBpbmcgZGVzdGluYXRpb25zLiBUaGVzZSBjYW4gYmUgZGVmaW5lZCBpbiBzZXZlcmFsIHdheXMgZS5nLiBwb3N0YWxDb2RlIHJhbmdlcy50c2hpcHBpbmdTZXR0aW5nc0xpbmuiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnhYTGluayB0byBhIHBhZ2UgY29udGFpbmluZyBbW1NoaXBwaW5nUmF0ZVNldHRpbmdzXV0gYW5kIFtbRGVsaXZlcnlUaW1lU2V0dGluZ3NdXSBkZXRhaWxzLmtkZWZpbml0aW9uc6NlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLm9TdHJ1Y3R1cmVkVmFsdWWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZngYIy9kZWZpbml0aW9ucy9JbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5ldGl0bGVvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcua2Rlc2NyaXB0aW9ueQIET2ZmZXJTaGlwcGluZ0RldGFpbHMgcmVwcmVzZW50cyBpbmZvcm1hdGlvbiBhYm91dCBzaGlwcGluZyBkZXN0aW5hdGlvbnMuCgpNdWx0aXBsZSBvZiB0aGVzZSBlbnRpdGllcyBjYW4gYmUgdXNlZCB0byByZXByZXNlbnQgZGlmZmVyZW50IHNoaXBwaW5nIHJhdGVzIGZvciBkaWZmZXJlbnQgZGVzdGluYXRpb25zOgoKT25lIGVudGl0eSBmb3IgQWxhc2thL0hhd2FpaS4gQSBkaWZmZXJlbnQgb25lIGZvciBjb250aW5lbnRhbCBVUy5BIGRpZmZlcmVudCBvbmUgZm9yIGFsbCBGcmFuY2UuCgpNdWx0aXBsZSBvZiB0aGVzZSBlbnRpdGllcyBjYW4gYmUgdXNlZCB0byByZXByZXNlbnQgZGlmZmVyZW50IHNoaXBwaW5nIGNvc3RzIGFuZCBkZWxpdmVyeSB0aW1lcy4KClR3byBlbnRpdGllcyB0aGF0IGFyZSBpZGVudGljYWwgYnV0IGRpZmZlciBpbiByYXRlIGFuZCB0aW1lOgoKZS5nLiBDaGVhcGVyIGFuZCBzbG93ZXI6ICQ1IGluIDUtN2RheXMKb3IgRmFzdCBhbmQgZXhwZW5zaXZlOiAkMTUgaW4gMS0yIGRheXMuZmhlYWRlcqJmdW5pcXVlcFhDcnB5Z0FyTjRmQThtK0hrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1fryce48p8ibwz13gd3zy5if79y6weumaaosjry78ydybo0uor2x9ts"},"kjzl6cwe1jw148bnnx3nwlghhg2q9wsy8uhuzz7juh6iqviktfa341kan6y26i1":{"alias":"ShippingDeliveryTime","commits":[{"jws":{"payload":"AXESIP04_W5wlsXRAVE_-vKLRj49N_6Or6M8EkZZmNAqrq5F","signatures":[{"signature":"pxmFrvffTyYKcYeVQkS90r2FfATn_FPjBCXJKVl6imrt9N4e9g9vXtkujwbLr1L1dWxKmVrtJWzZKN5pDtyfCg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreih5hd6w44ewyxiqcuj77lziwrr6hu375dvpum6bersztdicvlvoiu"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HSMvZGVmaW5pdGlvbnMvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcuZXRpdGxldFNoaXBwaW5nRGVsaXZlcnlUaW1lZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzpGpjdXRvZmZUaW1lomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGR0aW1lomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRkdGltZWtkZXNjcmlwdGlvbnkB+k9yZGVyIGN1dG9mZiB0aW1lIGFsbG93cyBtZXJjaGFudHMgdG8gZGVzY3JpYmUgdGhlIHRpbWUgYWZ0ZXIgd2hpY2ggdGhleSB3aWxsIG5vIGxvbmdlciBwcm9jZXNzIG9yZGVycyByZWNlaXZlZCBvbiB0aGF0IGRheS4gRm9yIG9yZGVycyBwcm9jZXNzZWQgYWZ0ZXIgY3V0b2ZmIHRpbWUsIG9uZSBkYXkgZ2V0cyBhZGRlZCB0byB0aGUgZGVsaXZlcnkgdGltZSBlc3RpbWF0ZS4gVGhpcyBwcm9wZXJ0eSBpcyBleHBlY3RlZCB0byBiZSBtb3N0IHR5cGljYWxseSB1c2VkIHZpYSB0aGUgW1tTaGlwcGluZ1JhdGVTZXR0aW5nc11dIHB1YmxpY2F0aW9uIHBhdHRlcm4uIFRoZSB0aW1lIGlzIGluZGljYXRlZCB1c2luZyB0aGUgSVNPLTg2MDEgVGltZSBmb3JtYXQsIGUuZy4gIjIzOjMwOjAwLTA1OjAwIiB3b3VsZCByZXByZXNlbnQgNjozMCBwbSBFYXN0ZXJuIFN0YW5kYXJkIFRpbWUgKEVTVCkgd2hpY2ggaXMgNSBob3VycyBiZWhpbmQgQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUgKFVUQykua3RyYW5zaXRUaW1lomQkcmVmeBhzY2hlbWE6UXVhbnRpdGF0aXZlVmFsdWVrZGVzY3JpcHRpb254nFRoZSB0eXBpY2FsIGRlbGF5IHRoZSBvcmRlciBoYXMgYmVlbiBzZW50IGZvciBkZWxpdmVyeSBhbmQgdGhlIGdvb2RzIHJlYWNoIHRoZSBmaW5hbCBjdXN0b21lci4gVHlwaWNhbCBwcm9wZXJ0aWVzOiBtaW5WYWx1ZSwgbWF4VmFsdWUsIHVuaXRDb2RlIChkIGZvciBEQVkpLmxidXNpbmVzc0RheXOiZW9uZU9mgqFkJHJlZnggc2NoZW1hOk9wZW5pbmdIb3Vyc1NwZWNpZmljYXRpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ4IHNjaGVtYTpPcGVuaW5nSG91cnNTcGVjaWZpY2F0aW9ua2Rlc2NyaXB0aW9ueFpEYXlzIG9mIHRoZSB3ZWVrIHdoZW4gdGhlIG1lcmNoYW50IHR5cGljYWxseSBvcGVyYXRlcywgaW5kaWNhdGVkIHZpYSBvcGVuaW5nIGhvdXJzIG1hcmt1cC5saGFuZGxpbmdUaW1lomQkcmVmeBhzY2hlbWE6UXVhbnRpdGF0aXZlVmFsdWVrZGVzY3JpcHRpb255AYhUaGUgdHlwaWNhbCBkZWxheSBiZXR3ZWVuIHRoZSByZWNlaXB0IG9mIHRoZSBvcmRlciBhbmQgdGhlIGdvb2RzIGVpdGhlciBsZWF2aW5nIHRoZSB3YXJlaG91c2Ugb3IgYmVpbmcgcHJlcGFyZWQgZm9yIHBpY2t1cCwgaW4gY2FzZSB0aGUgZGVsaXZlcnkgbWV0aG9kIGlzIG9uIHNpdGUgcGlja3VwLiBUeXBpY2FsIHByb3BlcnRpZXM6IG1pblZhbHVlLCBtYXhWYWx1ZSwgdW5pdENvZGUgKGQgZm9yIERBWSkuICBUaGlzIGlzIGJ5IGNvbW1vbiBjb252ZW50aW9uIGFzc3VtZWQgdG8gbWVhbiBidXNpbmVzcyBkYXlzIChpZiBhIHVuaXRDb2RlIGlzIHVzZWQsIGNvZGVkIGFzICJkIiksIGkuZS4gb25seSBjb3VudGluZyBkYXlzIHdoZW4gdGhlIGJ1c2luZXNzIG5vcm1hbGx5IG9wZXJhdGVzLmtkZWZpbml0aW9uc6NlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLm9TdHJ1Y3R1cmVkVmFsdWWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZngYIy9kZWZpbml0aW9ucy9JbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5ldGl0bGVvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcua2Rlc2NyaXB0aW9ueF5TaGlwcGluZ0RlbGl2ZXJ5VGltZSBwcm92aWRlcyB2YXJpb3VzIHBpZWNlcyBvZiBpbmZvcm1hdGlvbiBhYm91dCBkZWxpdmVyeSB0aW1lcyBmb3Igc2hpcHBpbmcuZmhlYWRlcqJmdW5pcXVlcGpHVC9LOGo3bCsyOHNZVkJrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1fry36wa3e1zsl8c2beuh9viwv0fudp4q6db44418nq4r4boxe7i874"},"kjzl6cwe1jw1499lmbyen0devpf7cp7qhy8np7m41symxs31i5yxugg5nvvpp8z":{"alias":"DefinedRegion","commits":[{"jws":{"payload":"AXESIPp6aLssZ1Zv8VW7572vDGxNRRBrJ67UjWFrA7r6lKQi","signatures":[{"signature":"_dff0qTqjRFZi8ZfBGLlQr7a_NSMbwbE54B3yvbCUlAMdRUyMta18zXdWoA_HIxqKAJbwINvjzSfZlCRwme5AA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreih2pjulwldhkzx7cvn346626ddmjvcra2zhv3ki2yllao5pvffeei"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HSMvZGVmaW5pdGlvbnMvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcuZXRpdGxlbURlZmluZWRSZWdpb25nJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjanByb3BlcnRpZXOlanBvc3RhbENvZGWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueCRUaGUgcG9zdGFsIGNvZGUuIEZvciBleGFtcGxlLCA5NDA0My5tYWRkcmVzc1JlZ2lvbqJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2544lRoZSByZWdpb24gaW4gd2hpY2ggdGhlIGxvY2FsaXR5IGlzLCBhbmQgd2hpY2ggaXMgaW4gdGhlIGNvdW50cnkuIEZvciBleGFtcGxlLCBDYWxpZm9ybmlhIG9yIGFub3RoZXIgYXBwcm9wcmlhdGUgZmlyc3QtbGV2ZWwgW0FkbWluaXN0cmF0aXZlIGRpdmlzaW9uXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0X29mX2FkbWluaXN0cmF0aXZlX2RpdmlzaW9uc19ieV9jb3VudHJ5KSBuYWRkcmVzc0NvdW50cnmiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZuc2NoZW1hOkNvdW50cnlrZGVzY3JpcHRpb254jlRoZSBjb3VudHJ5LiBGb3IgZXhhbXBsZSwgVVNBLiBZb3UgY2FuIGFsc28gcHJvdmlkZSB0aGUgdHdvLWxldHRlciBbSVNPIDMxNjYtMSBhbHBoYS0yIGNvdW50cnkgY29kZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fMzE2Ni0xKS5vcG9zdGFsQ29kZVJhbmdlomVvbmVPZoKhZCRyZWZ4I3NjaGVtYTpQb3N0YWxDb2RlUmFuZ2VTcGVjaWZpY2F0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmeCNzY2hlbWE6UG9zdGFsQ29kZVJhbmdlU3BlY2lmaWNhdGlvbmtkZXNjcmlwdGlvbnggQSBkZWZpbmVkIHJhbmdlIG9mIHBvc3RhbCBjb2Rlcy5wcG9zdGFsQ29kZVByZWZpeKJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254bkEgZGVmaW5lZCByYW5nZSBvZiBwb3N0YWwgY29kZXMgaW5kaWNhdGVkIGJ5IGEgY29tbW9uIHRleHR1YWwgcHJlZml4LiBVc2VkIGZvciBub24tbnVtZXJpYyBzeXN0ZW1zIHN1Y2ggYXMgVUsua2RlZmluaXRpb25zo2VUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uakludGFuZ2libGWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZnMjL2RlZmluaXRpb25zL1RoaW5na2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5ldGl0bGVqSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMub1N0cnVjdHVyZWRWYWx1ZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmeBgjL2RlZmluaXRpb25zL0ludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmV0aXRsZW9TdHJ1Y3R1cmVkVmFsdWVrZGVzY3JpcHRpb254l1N0cnVjdHVyZWQgdmFsdWVzIGFyZSB1c2VkIHdoZW4gdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgaGFzIGEgbW9yZSBjb21wbGV4IHN0cnVjdHVyZSB0aGFuIHNpbXBseSBiZWluZyBhIHRleHR1YWwgdmFsdWUgb3IgYSByZWZlcmVuY2UgdG8gYW5vdGhlciB0aGluZy5rZGVzY3JpcHRpb255Ai5BIERlZmluZWRSZWdpb24gaXMgYSBnZW9ncmFwaGljIGFyZWEgZGVmaW5lZCBieSBwb3RlbnRpYWxseSBhcmJpdHJhcnkgKHJhdGhlciB0aGFuIHBvbGl0aWNhbCwgYWRtaW5pc3RyYXRpdmUgb3IgbmF0dXJhbCBnZW9ncmFwaGljYWwpIGNyaXRlcmlhLiBQcm9wZXJ0aWVzIGFyZSBwcm92aWRlZCBmb3IgZGVmaW5pbmcgYSByZWdpb24gYnkgcmVmZXJlbmNlIHRvIHNldHMgb2YgcG9zdGFsIGNvZGVzLgoKRXhhbXBsZXM6IGEgZGVsaXZlcnkgZGVzdGluYXRpb24gd2hlbiBzaG9wcGluZy4gUmVnaW9uIHdoZXJlIHJlZ2lvbmFsIHByaWNpbmcgaXMgY29uZmlndXJlZC4KClJlcXVpcmVtZW50IDE6CkNvdW50cnk6IFVTClN0YXRlczogIk5ZIiwgIkNBIgoKUmVxdWlyZW1lbnQgMjoKQ291bnRyeTogVVMKUG9zdGFsQ29kZSBTZXQ6IHsgWzk0MDAwLTk0NTg1XSwgWzk3MDAwLCA5Nzk5OV0sIFsxMzAwMCwgMTM1OTldfQp7IFsxMjM0NSwgMTIzNDVdLCBbNzg5NDUsIDc4OTQ1XSwgfQpSZWdpb24gPSBzdGF0ZSwgY2FudG9uLCBwcmVmZWN0dXJlLCBhdXRvbm9tb3VzIGNvbW11bml0eS4uLgpmaGVhZGVyomZ1bmlxdWVwYjZwRjFtVmZXdGhGWGR0eWtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1fry9w9qt0o3mndtgs4abb0fnhkja58styb47pmp6ggokyw9upirjsw"},"kjzl6cwe1jw147y6l224ze6gve1r76p2kxwxgadln9a34qhhfxk3vh3rpx00lb5":{"alias":"PostalCodeRangeSpecification","commits":[{"jws":{"payload":"AXESIDqRT8W8r7oU40IBMOpoCVbBTT-lreNwccpe5pqO8Aem","signatures":[{"signature":"kMDWSLADIm6MhobmM3zUh2_pd5RvgEmXIddXwhTK-6t5rHf3PBsAPQPUVv1w0JqmzluOe5pIe5NofhQTKOp3Cw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreib2sfh4lpfpxikogqqbgdvgqckwyfgt7jnn4nyhdss642ni54ahuy"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HSMvZGVmaW5pdGlvbnMvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcuZXRpdGxleBxQb3N0YWxDb2RlUmFuZ2VTcGVjaWZpY2F0aW9uZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzom1wb3N0YWxDb2RlRW5komVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnhQTGFzdCBwb3N0YWwgY29kZSBpbiB0aGUgcmFuZ2UgKGluY2x1ZGVkKS4gTmVlZHMgdG8gYmUgYWZ0ZXIgW1twb3N0YWxDb2RlQmVnaW5dXS5vcG9zdGFsQ29kZUJlZ2luomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngoRmlyc3QgcG9zdGFsIGNvZGUgaW4gYSByYW5nZSAoaW5jbHVkZWQpLmtkZWZpbml0aW9uc6NlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLm9TdHJ1Y3R1cmVkVmFsdWWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZngYIy9kZWZpbml0aW9ucy9JbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5ldGl0bGVvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcua2Rlc2NyaXB0aW9ueItJbmRpY2F0ZXMgYSByYW5nZSBvZiBwb3N0YWxjb2RlcywgdXN1YWxseSBkZWZpbmVkIGFzIHRoZSBzZXQgb2YgdmFsaWQgY29kZXMgYmV0d2VlbiBbW3Bvc3RhbENvZGVCZWdpbl1dIGFuZCBbW3Bvc3RhbENvZGVFbmRdXSwgaW5jbHVzaXZlbHkuZmhlYWRlcqJmdW5pcXVlcGxrR0ZHU3RncEMrNUZKU3FrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1fry0j2tqn7fotzz7whf3macx65vtspxdzq9occ1amzjtmt4ao47j7k"},"kjzl6cwe1jw149ga84s32umnmvkwwnpiw65cycz9t8f4800fwj3dpzwql4g6kcn":{"alias":"WarrantyPromise","commits":[{"jws":{"payload":"AXESILT8xhctsk0Ybs5V1WmMRg5klC9ApkyleVoEdtOTmjmb","signatures":[{"signature":"95RnvGO0Us8IeFaGRqZhVFBZvU0xUfSF2dz4WLA6jDu4ouZxdRA4hnDHSZi0THQc5e41uhigOYAHyEL5SLziDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifu7tdbolnsjumg5tsv2vuyyrqomskc6qfgjssxswqeo3jzhgrztm"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HSMvZGVmaW5pdGlvbnMvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcuZXRpdGxlb1dhcnJhbnR5UHJvbWlzZWckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNqcHJvcGVydGllc6Jtd2FycmFudHlTY29wZaJkJHJlZnRzY2hlbWE6V2FycmFudHlTY29wZWtkZXNjcmlwdGlvbngiVGhlIHNjb3BlIG9mIHRoZSB3YXJyYW50eSBwcm9taXNlLnJkdXJhdGlvbk9mV2FycmFudHmiZCRyZWZ4GHNjaGVtYTpRdWFudGl0YXRpdmVWYWx1ZWtkZXNjcmlwdGlvbnhvVGhlIGR1cmF0aW9uIG9mIHRoZSB3YXJyYW50eSBwcm9taXNlLiBDb21tb24gdW5pdENvZGUgdmFsdWVzIGFyZSBBTk4gZm9yIHllYXIsIE1PTiBmb3IgbW9udGhzLCBvciBEQVkgZm9yIGRheXMua2RlZmluaXRpb25zo2VUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uakludGFuZ2libGWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZnMjL2RlZmluaXRpb25zL1RoaW5na2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5ldGl0bGVqSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMub1N0cnVjdHVyZWRWYWx1ZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmeBgjL2RlZmluaXRpb25zL0ludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmV0aXRsZW9TdHJ1Y3R1cmVkVmFsdWVrZGVzY3JpcHRpb254l1N0cnVjdHVyZWQgdmFsdWVzIGFyZSB1c2VkIHdoZW4gdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgaGFzIGEgbW9yZSBjb21wbGV4IHN0cnVjdHVyZSB0aGFuIHNpbXBseSBiZWluZyBhIHRleHR1YWwgdmFsdWUgb3IgYSByZWZlcmVuY2UgdG8gYW5vdGhlciB0aGluZy5rZGVzY3JpcHRpb254pkEgc3RydWN0dXJlZCB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIGR1cmF0aW9uIGFuZCBzY29wZSBvZiBzZXJ2aWNlcyB0aGF0IHdpbGwgYmUgcHJvdmlkZWQgdG8gYSBjdXN0b21lciBmcmVlIG9mIGNoYXJnZSBpbiBjYXNlIG9mIGEgZGVmZWN0IG9yIG1hbGZ1bmN0aW9uIG9mIGEgcHJvZHVjdC5maGVhZGVyomZ1bmlxdWVwTXZ0WGpDa0JwM2RJSGtUR2tjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1fryb7sptzpw9t42okq08licrq44catrvvi0w353bs1kvct27n2opvk"},"kjzl6cwe1jw14bi4hvappw4l6dbpx9gcnaw47a2c5a5wkf7k0tq8z2as4v04gib":{"alias":"WarrantyScope","commits":[{"jws":{"payload":"AXESIPB4Ht8cTxDGQ95ywbHMN6KEppmg9dJ5O7Tre9JFDCaK","signatures":[{"signature":"eOH8e4_Z_M5EsQNG29Z8Z8LIuKzNHJBSww3Dh3TRdfnT2_c59qYUOaUyQvfkDYYxTx13FfxX1-bbU4zfLKtjCw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihqpapn6hcpcddehxtsygy4yn5cqstjtihv2j4txnhlppjekdbgri"},"linkedBlock":"omRkYXRhpGR0eXBlZm9iamVjdGV0aXRsZW1XYXJyYW50eVNjb3BlZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZXNjcmlwdGlvbnkBQUEgcmFuZ2Ugb2Ygb2Ygc2VydmljZXMgdGhhdCB3aWxsIGJlIHByb3ZpZGVkIHRvIGEgY3VzdG9tZXIgZnJlZSBvZiBjaGFyZ2UgaW4gY2FzZSBvZiBhIGRlZmVjdCBvciBtYWxmdW5jdGlvbiBvZiBhIHByb2R1Y3QuXG5cbkNvbW1vbmx5IHVzZWQgdmFsdWVzOlxuXG4qIGh0dHA6Ly9wdXJsLm9yZy9nb29kcmVsYXRpb25zL3YxI0xhYm9yLUJyaW5nSW5cbiogaHR0cDovL3B1cmwub3JnL2dvb2RyZWxhdGlvbnMvdjEjUGFydHNBbmRMYWJvci1CcmluZ0luXG4qIGh0dHA6Ly9wdXJsLm9yZy9nb29kcmVsYXRpb25zL3YxI1BhcnRzQW5kTGFib3ItUGlja1VwCiAgICAgIGZoZWFkZXKiZnVuaXF1ZXBrWk1LM0dybGEycUhFYzBqa2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frypsvz2k6w4gmlarccj89xpgdvrkmdk9zl85qdventcco2kgvpe68"},"kjzl6cwe1jw148z2ko3gl7f1mckux7qiilcy5lbvs33we7lkjttv19wwj5et79f":{"alias":"ContactPoint","commits":[{"jws":{"payload":"AXESIL3wIVLkcM4g9V-maL3l2YPrO7n2mHQJZAtCY_DHeAe1","signatures":[{"signature":"wiLukO5Z3hy6hpV_EM-EYTue4zuoJ2dNK4ZiRvnD-qfABOjci3MDmaoiHm3ZmLPOETHny2z2Wfbjqqes2opwAg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreif56aqvfzdqzyqpkx5gnc66lwmd5m53t5uyoqewic2cmpymo6ahwu"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HSMvZGVmaW5pdGlvbnMvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcuZXRpdGxlbENvbnRhY3RQb2ludGckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNqcHJvcGVydGllc6plZW1haWyiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ubkVtYWlsIGFkZHJlc3MuaWZheE51bWJlcqJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb25vVGhlIGZheCBudW1iZXIuaXRlbGVwaG9uZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIHRlbGVwaG9uZSBudW1iZXIuamFyZWFTZXJ2ZWSiZWFueU9mhKFkdHlwZWZzdHJpbmehZCRyZWZ4GXNjaGVtYTpBZG1pbmlzdHJhdGl2ZUFyZWGhZCRyZWZvc2NoZW1hOkdlb1NoYXBloWQkcmVmbHNjaGVtYTpQbGFjZWtkZXNjcmlwdGlvbnhAVGhlIGdlb2dyYXBoaWMgYXJlYSB3aGVyZSBhIHNlcnZpY2Ugb3Igb2ZmZXJlZCBpdGVtIGlzIHByb3ZpZGVkLmtjb250YWN0VHlwZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2540UEgcGVyc29uIG9yIG9yZ2FuaXphdGlvbiBjYW4gaGF2ZSBkaWZmZXJlbnQgY29udGFjdCBwb2ludHMsIGZvciBkaWZmZXJlbnQgcHVycG9zZXMuIEZvciBleGFtcGxlLCBhIHNhbGVzIGNvbnRhY3QgcG9pbnQsIGEgUFIgY29udGFjdCBwb2ludCBhbmQgc28gb24uIFRoaXMgcHJvcGVydHkgaXMgdXNlZCB0byBzcGVjaWZ5IHRoZSBraW5kIG9mIGNvbnRhY3QgcG9pbnQua3NlcnZpY2VBcmVhomVhbnlPZoOhZCRyZWZ4GXNjaGVtYTpBZG1pbmlzdHJhdGl2ZUFyZWGhZCRyZWZvc2NoZW1hOkdlb1NoYXBloWQkcmVmbHNjaGVtYTpQbGFjZWtkZXNjcmlwdGlvbngyVGhlIGdlb2dyYXBoaWMgYXJlYSB3aGVyZSB0aGUgc2VydmljZSBpcyBwcm92aWRlZC5tY29udGFjdE9wdGlvbqJlb25lT2aCoWQkcmVmeBlzY2hlbWE6Q29udGFjdFBvaW50T3B0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmeBlzY2hlbWE6Q29udGFjdFBvaW50T3B0aW9ua2Rlc2NyaXB0aW9ueGxBbiBvcHRpb24gYXZhaWxhYmxlIG9uIHRoaXMgY29udGFjdCBwb2ludCAoZS5nLiBhIHRvbGwtZnJlZSBudW1iZXIgb3Igc3VwcG9ydCBmb3IgaGVhcmluZy1pbXBhaXJlZCBjYWxsZXJzKS5uaG91cnNBdmFpbGFibGWiZCRyZWZ4IHNjaGVtYTpPcGVuaW5nSG91cnNTcGVjaWZpY2F0aW9ua2Rlc2NyaXB0aW9ueDxUaGUgaG91cnMgZHVyaW5nIHdoaWNoIHRoaXMgc2VydmljZSBvciBjb250YWN0IGlzIGF2YWlsYWJsZS5wcHJvZHVjdFN1cHBvcnRlZKJlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZm5zY2hlbWE6UHJvZHVjdGtkZXNjcmlwdGlvbnj7VGhlIHByb2R1Y3Qgb3Igc2VydmljZSB0aGlzIHN1cHBvcnQgY29udGFjdCBwb2ludCBpcyByZWxhdGVkIHRvIChzdWNoIGFzIHByb2R1Y3Qgc3VwcG9ydCBmb3IgYSBwYXJ0aWN1bGFyIHByb2R1Y3QgbGluZSkuIFRoaXMgY2FuIGJlIGEgc3BlY2lmaWMgcHJvZHVjdCBvciBwcm9kdWN0IGxpbmUgKGUuZy4gImlQaG9uZSIpIG9yIGEgZ2VuZXJhbCBjYXRlZ29yeSBvZiBwcm9kdWN0cyBvciBzZXJ2aWNlcyAoZS5nLiAic21hcnRwaG9uZXMiKS5xYXZhaWxhYmxlTGFuZ3VhZ2WiZW9uZU9mgqFlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZm9zY2hlbWE6TGFuZ3VhZ2WiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZvc2NoZW1hOkxhbmd1YWdla2Rlc2NyaXB0aW9ueMFBIGxhbmd1YWdlIHNvbWVvbmUgbWF5IHVzZSB3aXRoIG9yIGF0IHRoZSBpdGVtLCBzZXJ2aWNlIG9yIHBsYWNlLiBQbGVhc2UgdXNlIG9uZSBvZiB0aGUgbGFuZ3VhZ2UgY29kZXMgZnJvbSB0aGUgW0lFVEYgQkNQIDQ3IHN0YW5kYXJkXShodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9iY3A0NykuIFNlZSBhbHNvIFtbaW5MYW5ndWFnZV1da2RlZmluaXRpb25zo2VUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uakludGFuZ2libGWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZnMjL2RlZmluaXRpb25zL1RoaW5na2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5ldGl0bGVqSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMub1N0cnVjdHVyZWRWYWx1ZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmeBgjL2RlZmluaXRpb25zL0ludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmV0aXRsZW9TdHJ1Y3R1cmVkVmFsdWVrZGVzY3JpcHRpb254l1N0cnVjdHVyZWQgdmFsdWVzIGFyZSB1c2VkIHdoZW4gdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgaGFzIGEgbW9yZSBjb21wbGV4IHN0cnVjdHVyZSB0aGFuIHNpbXBseSBiZWluZyBhIHRleHR1YWwgdmFsdWUgb3IgYSByZWZlcmVuY2UgdG8gYW5vdGhlciB0aGluZy5rZGVzY3JpcHRpb254QEEgY29udGFjdCBwb2ludOKAlGZvciBleGFtcGxlLCBhIEN1c3RvbWVyIENvbXBsYWludHMgZGVwYXJ0bWVudC5maGVhZGVyomZ1bmlxdWVwZ3FGOHFvc3QxMUV1Y3ZQc2tjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1fry7teazclysqzixgbw70jo7w2vrohzq3qd21e504cp2hzc6hbnmyo"},"kjzl6cwe1jw1463gpjukr1x4z9l5942jrbtyb855mahixysiy6suoxga9p9caqn":{"alias":"ContactPointOption","commits":[{"jws":{"payload":"AXESII63ax9OC4fB9kLHsyseEPAiv_qQnFrPYM1FHbmZOd47","signatures":[{"signature":"2WI-sTKldIsq0w1m5Ip4AxmqssC-n9qblHKYBPHOFGChctELGlJlPiSVlBlJ1s_W1ZA2Mr2sMAJpqJvt5Gp7AQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreieow5vr6tqlq7a7mqwhwmvr4ehqek77vee4llhwbtkfdw4zsoo6hm"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoKiZWNvbnN0eBhIZWFyaW5nSW1wYWlyZWRTdXBwb3J0ZWRrZGVzY3JpcHRpb254N1VzZXMgZGV2aWNlcyB0byBzdXBwb3J0IHVzZXJzIHdpdGggaGVhcmluZyBpbXBhaXJtZW50cy6iZWNvbnN0aFRvbGxGcmVla2Rlc2NyaXB0aW9ueC1UaGUgYXNzb2NpYXRlZCB0ZWxlcGhvbmUgbnVtYmVyIGlzIHRvbGwgZnJlZS5ldGl0bGVyQ29udGFjdFBvaW50T3B0aW9uZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZXNjcmlwdGlvbngtRW51bWVyYXRlZCBvcHRpb25zIHJlbGF0ZWQgdG8gYSBDb250YWN0UG9pbnQuZmhlYWRlcqJmdW5pcXVlcFVtZHdDY0RMNXF0NmNXUHlrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frxncmtp5fkdnnes6dcsy4ic4zztwnyikmpjeur4d699vt0zmfgdfk"},"kjzl6cwe1jw1492j7smn4r6txzlwrtiwjjg8g5zo4g6ugxn35gb46upyxyrfhq9":{"alias":"WebSite","commits":[{"jws":{"payload":"AXESIJOlkBknsj2azZbndh4TPgrTeAHPPlxoTGyIl075NhRL","signatures":[{"signature":"y1Ew0xop0cdFVcwZ3zVRLDPOr_prkF9Ef55z6Io_Z9AcDOc2Vtdcg6GTGUaxjPf0g6WBil01JxdPKBu8LiDZCw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreietuwibsj5shwnm3fxhoypbgpqk2n4adtz6lruey3eis5hpsnqujm"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GiMvZGVmaW5pdGlvbnMvQ3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueGVUaGUgbW9zdCBnZW5lcmljIGtpbmQgb2YgY3JlYXRpdmUgd29yaywgaW5jbHVkaW5nIGJvb2tzLCBtb3ZpZXMsIHBob3RvZ3JhcGhzLCBzb2Z0d2FyZSBwcm9ncmFtcywgZXRjLmV0aXRsZWdXZWJTaXRlZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzoWRpc3NuomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjSVGhlIEludGVybmF0aW9uYWwgU3RhbmRhcmQgU2VyaWFsIE51bWJlciAoSVNTTikgdGhhdCBpZGVudGlmaWVzIHRoaXMgc2VyaWFsIHB1YmxpY2F0aW9uLiBZb3UgY2FuIHJlcGVhdCB0aGlzIHByb3BlcnR5IHRvIGlkZW50aWZ5IGRpZmZlcmVudCBmb3JtYXRzIG9mLCBvciB0aGUgbGlua2luZyBJU1NOIChJU1NOLUwpIGZvciwgdGhpcyBzZXJpYWwgcHVibGljYXRpb24ua2RlZmluaXRpb25zomVUaGluZ6RkdHlwZWZvYmplY3RldGl0bGVlVGhpbmdqcHJvcGVydGllc65jdXJso2R0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ucFVSTCBvZiB0aGUgaXRlbS5kbmFtZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb251VGhlIG5hbWUgb2YgdGhlIGl0ZW0uZUB0eXBloWR0eXBlZnN0cmluZ2VpbWFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZyc2NoZW1hOkltYWdlT2JqZWN0a2Rlc2NyaXB0aW9ueFFBbiBpbWFnZSBvZiB0aGUgaXRlbS4gVGhpcyBjYW4gYmUgYSBbW1VSTF1dIG9yIGEgZnVsbHkgZGVzY3JpYmVkIFtbSW1hZ2VPYmplY3RdXS5mc2FtZUFzomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254nVVSTCBvZiBhIHJlZmVyZW5jZSBXZWIgcGFnZSB0aGF0IHVuYW1iaWd1b3VzbHkgaW5kaWNhdGVzIHRoZSBpdGVtJ3MgaWRlbnRpdHkuIEUuZy4gdGhlIFVSTCBvZiB0aGUgaXRlbSdzIFdpa2lwZWRpYSBwYWdlLCBXaWtpZGF0YSBlbnRyeSwgb3Igb2ZmaWNpYWwgd2Vic2l0ZS5oQGNvbnRleHShZHR5cGVmc3RyaW5naXN1YmplY3RPZqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudGtkZXNjcmlwdGlvbngpQSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQgYWJvdXQgdGhpcyBUaGluZy5qaWRlbnRpZmllcqJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnRzY2hlbWE6UHJvcGVydHlWYWx1ZWtkZXNjcmlwdGlvbnkBSVRoZSBpZGVudGlmaWVyIHByb3BlcnR5IHJlcHJlc2VudHMgYW55IGtpbmQgb2YgaWRlbnRpZmllciBmb3IgYW55IGtpbmQgb2YgW1tUaGluZ11dLCBzdWNoIGFzIElTQk5zLCBHVElOIGNvZGVzLCBVVUlEcyBldGMuIFNjaGVtYS5vcmcgcHJvdmlkZXMgZGVkaWNhdGVkIHByb3BlcnRpZXMgZm9yIHJlcHJlc2VudGluZyBtYW55IG9mIHRoZXNlLCBlaXRoZXIgYXMgdGV4dHVhbCBzdHJpbmdzIG9yIGFzIFVSTCAoVVJJKSBsaW5rcy4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNpZGVudGlmaWVyQmcpIGZvciBtb3JlIGRldGFpbHMuCiAgICAgICAga2Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngaQSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5tYWx0ZXJuYXRlTmFtZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb252QW4gYWxpYXMgZm9yIHRoZSBpdGVtLm5hZGRpdGlvbmFsVHlwZaJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueQGfQW4gYWRkaXRpb25hbCB0eXBlIGZvciB0aGUgaXRlbSwgdHlwaWNhbGx5IHVzZWQgZm9yIGFkZGluZyBtb3JlIHNwZWNpZmljIHR5cGVzIGZyb20gZXh0ZXJuYWwgdm9jYWJ1bGFyaWVzIGluIG1pY3JvZGF0YSBzeW50YXguIFRoaXMgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiBzb21ldGhpbmcgYW5kIGEgY2xhc3MgdGhhdCB0aGUgdGhpbmcgaXMgaW4uIEluIFJERmEgc3ludGF4LCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHRoZSBuYXRpdmUgUkRGYSBzeW50YXggLSB0aGUgJ3R5cGVvZicgYXR0cmlidXRlIC0gZm9yIG11bHRpcGxlIHR5cGVzLiBTY2hlbWEub3JnIHRvb2xzIG1heSBoYXZlIG9ubHkgd2Vha2VyIHVuZGVyc3RhbmRpbmcgb2YgZXh0cmEgdHlwZXMsIGluIHBhcnRpY3VsYXIgdGhvc2UgZGVmaW5lZCBleHRlcm5hbGx5Lm9wb3RlbnRpYWxBY3Rpb26iZW9uZU9mgqFkJHJlZm1zY2hlbWE6QWN0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpBY3Rpb25rZGVzY3JpcHRpb254ckluZGljYXRlcyBhIHBvdGVudGlhbCBBY3Rpb24sIHdoaWNoIGRlc2NyaWJlcyBhbiBpZGVhbGl6ZWQgYWN0aW9uIGluIHdoaWNoIHRoaXMgdGhpbmcgd291bGQgcGxheSBhbiAnb2JqZWN0JyByb2xlLnBtYWluRW50aXR5T2ZQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniwSW5kaWNhdGVzIGEgcGFnZSAob3Igb3RoZXIgQ3JlYXRpdmVXb3JrKSBmb3Igd2hpY2ggdGhpcyB0aGluZyBpcyB0aGUgbWFpbiBlbnRpdHkgYmVpbmcgZGVzY3JpYmVkLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI21haW5FbnRpdHlCYWNrZ3JvdW5kKSBmb3IgZGV0YWlscy54GWRpc2FtYmlndWF0aW5nRGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueOxBIHN1YiBwcm9wZXJ0eSBvZiBkZXNjcmlwdGlvbi4gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbSB1c2VkIHRvIGRpc2FtYmlndWF0ZSBmcm9tIG90aGVyLCBzaW1pbGFyIGl0ZW1zLiBJbmZvcm1hdGlvbiBmcm9tIG90aGVyIHByb3BlcnRpZXMgKGluIHBhcnRpY3VsYXIsIG5hbWUpIG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZSBkZXNjcmlwdGlvbiB0byBiZSB1c2VmdWwgZm9yIGRpc2FtYmlndWF0aW9uLmtkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0ubENyZWF0aXZlV29ya6VkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmcyMvZGVmaW5pdGlvbnMvVGhpbmdrZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmV0aXRsZWxDcmVhdGl2ZVdvcmtqcHJvcGVydGllc7hvZHNpemWiZW9uZU9mgqFlYW55T2aEoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm2hZCRyZWZ4GHNjaGVtYTpRdWFudGl0YXRpdmVWYWx1ZaFkJHJlZngYc2NoZW1hOlNpemVTcGVjaWZpY2F0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoShZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybaFkJHJlZngYc2NoZW1hOlF1YW50aXRhdGl2ZVZhbHVloWQkcmVmeBhzY2hlbWE6U2l6ZVNwZWNpZmljYXRpb25rZGVzY3JpcHRpb255AUlBIHN0YW5kYXJkaXplZCBzaXplIG9mIGEgcHJvZHVjdCBvciBjcmVhdGl2ZSB3b3JrLCBzcGVjaWZpZWQgZWl0aGVyIHRocm91Z2ggYSBzaW1wbGUgdGV4dHVhbCBzdHJpbmcgKGZvciBleGFtcGxlICdYTCcsICczMld4MzRMJyksIGEgIFF1YW50aXRhdGl2ZVZhbHVlIHdpdGggYSB1bml0Q29kZSwgb3IgYSBjb21wcmVoZW5zaXZlIGFuZCBzdHJ1Y3R1cmVkIFtbU2l6ZVNwZWNpZmljYXRpb25dXTsgaW4gb3RoZXIgY2FzZXMsIHRoZSBbW3dpZHRoXV0sIFtbaGVpZ2h0XV0sIFtbZGVwdGhdXSBhbmQgW1t3ZWlnaHRdXSBwcm9wZXJ0aWVzIG1heSBiZSBtb3JlIGFwcGxpY2FibGUuIGR0ZXh0omR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngpVGhlIHRleHR1YWwgY29udGVudCBvZiB0aGlzIENyZWF0aXZlV29yay5lYWJvdXSiZCRyZWZsc2NoZW1hOlRoaW5na2Rlc2NyaXB0aW9ueCJUaGUgc3ViamVjdCBtYXR0ZXIgb2YgdGhlIGNvbnRlbnQuZWF1ZGlvomVvbmVPZoKhZWFueU9mg6FkJHJlZnJzY2hlbWE6QXVkaW9PYmplY3ShZCRyZWZrc2NoZW1hOkNsaXChZCRyZWZ1c2NoZW1hOk11c2ljUmVjb3JkaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoOhZCRyZWZyc2NoZW1hOkF1ZGlvT2JqZWN0oWQkcmVma3NjaGVtYTpDbGlwoWQkcmVmdXNjaGVtYTpNdXNpY1JlY29yZGluZ2tkZXNjcmlwdGlvbngZQW4gZW1iZWRkZWQgYXVkaW8gb2JqZWN0LmVhd2FyZKJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254IUFuIGF3YXJkIHdvbiBieSBvciBmb3IgdGhpcyBpdGVtLmVnZW5yZaJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbng3R2VucmUgb2YgdGhlIGNyZWF0aXZlIHdvcmssIGJyb2FkY2FzdCBjaGFubmVsIG9yIGdyb3VwLmV2aWRlb6Jlb25lT2aCoWVhbnlPZoKhZCRyZWZrc2NoZW1hOkNsaXChZCRyZWZyc2NoZW1hOlZpZGVvT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZrc2NoZW1hOkNsaXChZCRyZWZyc2NoZW1hOlZpZGVvT2JqZWN0a2Rlc2NyaXB0aW9ueBlBbiBlbWJlZGRlZCB2aWRlbyBvYmplY3QuZmF1dGhvcqJlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnjbVGhlIGF1dGhvciBvZiB0aGlzIGNvbnRlbnQgb3IgcmF0aW5nLiBQbGVhc2Ugbm90ZSB0aGF0IGF1dGhvciBpcyBzcGVjaWFsIGluIHRoYXQgSFRNTCA1IHByb3ZpZGVzIGEgc3BlY2lhbCBtZWNoYW5pc20gZm9yIGluZGljYXRpbmcgYXV0aG9yc2hpcCB2aWEgdGhlIHJlbCB0YWcuIFRoYXQgaXMgZXF1aXZhbGVudCB0byB0aGlzIGFuZCBtYXkgYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkuZmF3YXJkc6Jlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254H0F3YXJkcyB3b24gYnkgb3IgZm9yIHRoaXMgaXRlbS5mZWRpdG9yomQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254MVNwZWNpZmllcyB0aGUgUGVyc29uIHdobyBlZGl0ZWQgdGhlIENyZWF0aXZlV29yay5mZnVuZGVyomVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb26iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254aEEgcGVyc29uIG9yIG9yZ2FuaXphdGlvbiB0aGF0IHN1cHBvcnRzIChzcG9uc29ycykgc29tZXRoaW5nIHRocm91Z2ggc29tZSBraW5kIG9mIGZpbmFuY2lhbCBjb250cmlidXRpb24uZm9mZmVyc6Jlb25lT2aCoWVhbnlPZoKhZCRyZWZtc2NoZW1hOkRlbWFuZKFkJHJlZmxzY2hlbWE6T2ZmZXKiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZm1zY2hlbWE6RGVtYW5koWQkcmVmbHNjaGVtYTpPZmZlcmtkZXNjcmlwdGlvbnkCBUFuIG9mZmVyIHRvIHByb3ZpZGUgdGhpcyBpdGVt4oCUZm9yIGV4YW1wbGUsIGFuIG9mZmVyIHRvIHNlbGwgYSBwcm9kdWN0LCByZW50IHRoZSBEVkQgb2YgYSBtb3ZpZSwgcGVyZm9ybSBhIHNlcnZpY2UsIG9yIGdpdmUgYXdheSB0aWNrZXRzIHRvIGFuIGV2ZW50LiBVc2UgW1tidXNpbmVzc0Z1bmN0aW9uXV0gdG8gaW5kaWNhdGUgdGhlIGtpbmQgb2YgdHJhbnNhY3Rpb24gb2ZmZXJlZCwgaS5lLiBzZWxsLCBsZWFzZSwgZXRjLiBUaGlzIHByb3BlcnR5IGNhbiBhbHNvIGJlIHVzZWQgdG8gZGVzY3JpYmUgYSBbW0RlbWFuZF1dLiBXaGlsZSB0aGlzIHByb3BlcnR5IGlzIGxpc3RlZCBhcyBleHBlY3RlZCBvbiBhIG51bWJlciBvZiBjb21tb24gdHlwZXMsIGl0IGNhbiBiZSB1c2VkIGluIG90aGVycy4gSW4gdGhhdCBjYXNlLCB1c2luZyBhIHNlY29uZCB0eXBlLCBzdWNoIGFzIFByb2R1Y3Qgb3IgYSBzdWJ0eXBlIG9mIFByb2R1Y3QsIGNhbiBjbGFyaWZ5IHRoZSBuYXR1cmUgb2YgdGhlIG9mZmVyLgogICAgICBmcmV2aWV3omVvbmVPZoKhZCRyZWZtc2NoZW1hOlJldmlld6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6UmV2aWV3a2Rlc2NyaXB0aW9udUEgcmV2aWV3IG9mIHRoZSBpdGVtLmdjb21tZW50omVvbmVPZoKhZCRyZWZuc2NoZW1hOkNvbW1lbnSiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZuc2NoZW1hOkNvbW1lbnRrZGVzY3JpcHRpb254H0NvbW1lbnRzLCB0eXBpY2FsbHkgZnJvbSB1c2Vycy5nY3JlYXRvcqJlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnhiVGhlIGNyZWF0b3IvYXV0aG9yIG9mIHRoaXMgQ3JlYXRpdmVXb3JrLiBUaGlzIGlzIHRoZSBzYW1lIGFzIHRoZSBBdXRob3IgcHJvcGVydHkgZm9yIENyZWF0aXZlV29yay5nZXhwaXJlc6NkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGVrZGVzY3JpcHRpb255AS9EYXRlIHRoZSBjb250ZW50IGV4cGlyZXMgYW5kIGlzIG5vIGxvbmdlciB1c2VmdWwgb3IgYXZhaWxhYmxlLiBGb3IgZXhhbXBsZSBhIFtbVmlkZW9PYmplY3RdXSBvciBbW05ld3NBcnRpY2xlXV0gd2hvc2UgYXZhaWxhYmlsaXR5IG9yIHJlbGV2YW5jZSBpcyB0aW1lLWxpbWl0ZWQsIG9yIGEgW1tDbGFpbVJldmlld11dIGZhY3QgY2hlY2sgd2hvc2UgcHVibGlzaGVyIHdhbnRzIHRvIGluZGljYXRlIHRoYXQgaXQgbWF5IG5vIGxvbmdlciBiZSByZWxldmFudCAob3IgaGVscGZ1bCB0byBoaWdobGlnaHQpIGFmdGVyIHNvbWUgZGF0ZS5naGFzUGFydKJlb25lT2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnhdSW5kaWNhdGVzIGFuIGl0ZW0gb3IgQ3JlYXRpdmVXb3JrIHRoYXQgaXMgcGFydCBvZiB0aGlzIGl0ZW0sIG9yIENyZWF0aXZlV29yayAoaW4gc29tZSBzZW5zZSkuZ2xpY2Vuc2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueExBIGxpY2Vuc2UgZG9jdW1lbnQgdGhhdCBhcHBsaWVzIHRvIHRoaXMgY29udGVudCwgdHlwaWNhbGx5IGluZGljYXRlZCBieSBVUkwuZ3BhdHRlcm6iZW9uZU9mgqFlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm2iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueLlBIHBhdHRlcm4gdGhhdCBzb21ldGhpbmcgaGFzLCBmb3IgZXhhbXBsZSAncG9sa2EgZG90JywgJ3N0cmlwZWQnLCAnQ2FuYWRpYW4gZmxhZycuIFZhbHVlcyBhcmUgdHlwaWNhbGx5IGV4cHJlc3NlZCBhcyB0ZXh0LCBhbHRob3VnaCBsaW5rcyB0byBjb250cm9sbGVkIHZhbHVlIHNjaGVtZXMgYXJlIGFsc28gc3VwcG9ydGVkLmdyZXZpZXdzomVvbmVPZoKhZCRyZWZtc2NoZW1hOlJldmlld6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6UmV2aWV3a2Rlc2NyaXB0aW9uc1JldmlldyBvZiB0aGUgaXRlbS5nc3BhdGlhbKJkJHJlZmxzY2hlbWE6UGxhY2VrZGVzY3JpcHRpb254r1RoZSAic3BhdGlhbCIgcHJvcGVydHkgY2FuIGJlIHVzZWQgaW4gY2FzZXMgd2hlbiBtb3JlIHNwZWNpZmljIHByb3BlcnRpZXMKKGUuZy4gW1tsb2NhdGlvbkNyZWF0ZWRdXSwgW1tzcGF0aWFsQ292ZXJhZ2VdXSwgW1tjb250ZW50TG9jYXRpb25dXSkgYXJlIG5vdCBrbm93biB0byBiZSBhcHByb3ByaWF0ZS5nc3BvbnNvcqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29uomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueKpBIHBlcnNvbiBvciBvcmdhbml6YXRpb24gdGhhdCBzdXBwb3J0cyBhIHRoaW5nIHRocm91Z2ggYSBwbGVkZ2UsIHByb21pc2UsIG9yIGZpbmFuY2lhbCBjb250cmlidXRpb24uIGUuZy4gYSBzcG9uc29yIG9mIGEgTWVkaWNhbCBTdHVkeSBvciBhIGNvcnBvcmF0ZSBzcG9uc29yIG9mIGFuIGV2ZW50Lmd0ZWFjaGVzomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybWtkZXNjcmlwdGlvbnh+VGhlIGl0ZW0gYmVpbmcgZGVzY3JpYmVkIGlzIGludGVuZGVkIHRvIGhlbHAgYSBwZXJzb24gbGVhcm4gdGhlIGNvbXBldGVuY3kgb3IgbGVhcm5pbmcgb3V0Y29tZSBkZWZpbmVkIGJ5IHRoZSByZWZlcmVuY2VkIHRlcm0uZ3ZlcnNpb26iZWFueU9mgqFkdHlwZWZudW1iZXKhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueEFUaGUgdmVyc2lvbiBvZiB0aGUgQ3JlYXRpdmVXb3JrIGVtYm9kaWVkIGJ5IGEgc3BlY2lmaWVkIHJlc291cmNlLmhhYnN0cmFjdKJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254RkFuIGFic3RyYWN0IGlzIGEgc2hvcnQgZGVzY3JpcHRpb24gdGhhdCBzdW1tYXJpemVzIGEgW1tDcmVhdGl2ZVdvcmtdXS5oYXNzZXNzZXOiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueHFUaGUgaXRlbSBiZWluZyBkZXNjcmliZWQgaXMgaW50ZW5kZWQgdG8gYXNzZXNzIHRoZSBjb21wZXRlbmN5IG9yIGxlYXJuaW5nIG91dGNvbWUgZGVmaW5lZCBieSB0aGUgcmVmZXJlbmNlZCB0ZXJtLmhhdWRpZW5jZaJkJHJlZm9zY2hlbWE6QXVkaWVuY2VrZGVzY3JpcHRpb254QkFuIGludGVuZGVkIGF1ZGllbmNlLCBpLmUuIGEgZ3JvdXAgZm9yIHdob20gc29tZXRoaW5nIHdhcyBjcmVhdGVkLmhjaXRhdGlvbqJlb25lT2aCoWVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnhwQSBjaXRhdGlvbiBvciByZWZlcmVuY2UgdG8gYW5vdGhlciBjcmVhdGl2ZSB3b3JrLCBzdWNoIGFzIGFub3RoZXIgcHVibGljYXRpb24sIHdlYiBwYWdlLCBzY2hvbGFybHkgYXJ0aWNsZSwgZXRjLmhlZGl0RUlEUqJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueQJwQW4gW0VJRFJdKGh0dHBzOi8vZWlkci5vcmcvKSAoRW50ZXJ0YWlubWVudCBJZGVudGlmaWVyIFJlZ2lzdHJ5KSBbW2lkZW50aWZpZXJdXSByZXByZXNlbnRpbmcgYSBzcGVjaWZpYyBlZGl0IC8gZWRpdGlvbiBmb3IgYSB3b3JrIG9mIGZpbG0gb3IgdGVsZXZpc2lvbi4KCkZvciBleGFtcGxlLCB0aGUgbW90aW9uIHBpY3R1cmUga25vd24gYXMgIkdob3N0YnVzdGVycyIgd2hvc2UgW1t0aXRsZUVJRFJdXSBpcyAiMTAuNTI0MC83RUM3LTIyOEEtNTEwQS0wNTNFLUNCQjgtSiIsIGhhcyBzZXZlcmFsIGVkaXRzIGUuZy4gIjEwLjUyNDAvMUYyQS1FMUM1LTY4MEEtMTRDNi1FNzZCLUkiIGFuZCAiMTAuNTI0MC84QTM1LTNCRUUtNjQ5Ny01RDEyLTlFNEYtMyIuCgpTaW5jZSBzY2hlbWEub3JnIHR5cGVzIGxpa2UgW1tNb3ZpZV1dIGFuZCBbW1RWRXBpc29kZV1dIGNhbiBiZSB1c2VkIGZvciBib3RoIHdvcmtzIGFuZCB0aGVpciBtdWx0aXBsZSBleHByZXNzaW9ucywgaXQgaXMgcG9zc2libGUgdG8gdXNlIFtbdGl0bGVFSURSXV0gYWxvbmUgKGZvciBhIGdlbmVyYWwgZGVzY3JpcHRpb24pLCBvciBhbG9uZ3NpZGUgW1tlZGl0RUlEUl1dIGZvciBhIG1vcmUgZWRpdC1zcGVjaWZpYyBkZXNjcmlwdGlvbi4KaGVuY29kaW5nomVvbmVPZoKhZCRyZWZyc2NoZW1hOk1lZGlhT2JqZWN0omR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmcnNjaGVtYTpNZWRpYU9iamVjdGtkZXNjcmlwdGlvbnheQSBtZWRpYSBvYmplY3QgdGhhdCBlbmNvZGVzIHRoaXMgQ3JlYXRpdmVXb3JrLiBUaGlzIHByb3BlcnR5IGlzIGEgc3lub255bSBmb3IgYXNzb2NpYXRlZE1lZGlhLmhoZWFkbGluZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GEhlYWRsaW5lIG9mIHRoZSBhcnRpY2xlLmhpc1BhcnRPZqJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254XkluZGljYXRlcyBhbiBpdGVtIG9yIENyZWF0aXZlV29yayB0aGF0IHRoaXMgaXRlbSwgb3IgQ3JlYXRpdmVXb3JrIChpbiBzb21lIHNlbnNlKSwgaXMgcGFydCBvZi5oa2V5d29yZHOiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueHZLZXl3b3JkcyBvciB0YWdzIHVzZWQgdG8gZGVzY3JpYmUgdGhpcyBjb250ZW50LiBNdWx0aXBsZSBlbnRyaWVzIGluIGEga2V5d29yZHMgbGlzdCBhcmUgdHlwaWNhbGx5IGRlbGltaXRlZCBieSBjb21tYXMuaG1hdGVyaWFsomVvbmVPZoKhZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZuc2NoZW1hOlByb2R1Y3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZuc2NoZW1hOlByb2R1Y3RrZGVzY3JpcHRpb254SkEgbWF0ZXJpYWwgdGhhdCBzb21ldGhpbmcgaXMgbWFkZSBmcm9tLCBlLmcuIGxlYXRoZXIsIHdvb2wsIGNvdHRvbiwgcGFwZXIuaG1lbnRpb25zomVvbmVPZoKhZCRyZWZsc2NoZW1hOlRoaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbHNjaGVtYTpUaGluZ2tkZXNjcmlwdGlvbnhgSW5kaWNhdGVzIHRoYXQgdGhlIENyZWF0aXZlV29yayBjb250YWlucyBhIHJlZmVyZW5jZSB0bywgYnV0IGlzIG5vdCBuZWNlc3NhcmlseSBhYm91dCBhIGNvbmNlcHQuaHBvc2l0aW9uomVhbnlPZoKhZHR5cGVnaW50ZWdlcqFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254OVRoZSBwb3NpdGlvbiBvZiBhbiBpdGVtIGluIGEgc2VyaWVzIG9yIHNlcXVlbmNlIG9mIGl0ZW1zLmhwcm9kdWNlcqJlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnhhVGhlIHBlcnNvbiBvciBvcmdhbml6YXRpb24gd2hvIHByb2R1Y2VkIHRoZSB3b3JrIChlLmcuIG11c2ljIGFsYnVtLCBtb3ZpZSwgdHYvcmFkaW8gc2VyaWVzIGV0Yy4pLmhwcm92aWRlcqJlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnjQVGhlIHNlcnZpY2UgcHJvdmlkZXIsIHNlcnZpY2Ugb3BlcmF0b3IsIG9yIHNlcnZpY2UgcGVyZm9ybWVyOyB0aGUgZ29vZHMgcHJvZHVjZXIuIEFub3RoZXIgcGFydHkgKGEgc2VsbGVyKSBtYXkgb2ZmZXIgdGhvc2Ugc2VydmljZXMgb3IgZ29vZHMgb24gYmVoYWxmIG9mIHRoZSBwcm92aWRlci4gQSBwcm92aWRlciBtYXkgYWxzbyBzZXJ2ZSBhcyB0aGUgc2VsbGVyLmh0ZW1wb3JhbKJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1loWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbni+VGhlICJ0ZW1wb3JhbCIgcHJvcGVydHkgY2FuIGJlIHVzZWQgaW4gY2FzZXMgd2hlcmUgbW9yZSBzcGVjaWZpYyBwcm9wZXJ0aWVzCihlLmcuIFtbdGVtcG9yYWxDb3ZlcmFnZV1dLCBbW2RhdGVDcmVhdGVkXV0sIFtbZGF0ZU1vZGlmaWVkXV0sIFtbZGF0ZVB1Ymxpc2hlZF1dKSBhcmUgbm90IGtub3duIHRvIGJlIGFwcHJvcHJpYXRlLmljaGFyYWN0ZXKiZW9uZU9mgqFkJHJlZm1zY2hlbWE6UGVyc29uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254MEZpY3Rpb25hbCBwZXJzb24gY29ubmVjdGVkIHdpdGggYSBjcmVhdGl2ZSB3b3JrLmllbmNvZGluZ3OiZW9uZU9mgqFkJHJlZnJzY2hlbWE6TWVkaWFPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZyc2NoZW1hOk1lZGlhT2JqZWN0a2Rlc2NyaXB0aW9ueC5BIG1lZGlhIG9iamVjdCB0aGF0IGVuY29kZXMgdGhpcyBDcmVhdGl2ZVdvcmsuaWlzQmFzZWRPbqJlb25lT2aCoWVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZm5zY2hlbWE6UHJvZHVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZuc2NoZW1hOlByb2R1Y3RrZGVzY3JpcHRpb254WkEgcmVzb3VyY2UgZnJvbSB3aGljaCB0aGlzIHdvcmsgaXMgZGVyaXZlZCBvciBmcm9tIHdoaWNoIGl0IGlzIGEgbW9kaWZpY2F0aW9uIG9yIGFkYXB0aW9uLmlwdWJsaXNoZXKiZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254I1RoZSBwdWJsaXNoZXIgb2YgdGhlIGNyZWF0aXZlIHdvcmsuaXNkTGljZW5zZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254VEEgbGljZW5zZSBkb2N1bWVudCB0aGF0IGFwcGxpZXMgdG8gdGhpcyBzdHJ1Y3R1cmVkIGRhdGEsIHR5cGljYWxseSBpbmRpY2F0ZWQgYnkgVVJMLml1c2FnZUluZm+iZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueQM3VGhlIHNjaGVtYS5vcmcgW1t1c2FnZUluZm9dXSBwcm9wZXJ0eSBpbmRpY2F0ZXMgZnVydGhlciBpbmZvcm1hdGlvbiBhYm91dCBhIFtbQ3JlYXRpdmVXb3JrXV0uIFRoaXMgcHJvcGVydHkgaXMgYXBwbGljYWJsZSBib3RoIHRvIHdvcmtzIHRoYXQgYXJlIGZyZWVseSBhdmFpbGFibGUgYW5kIHRvIHRob3NlIHRoYXQgcmVxdWlyZSBwYXltZW50IG9yIG90aGVyIHRyYW5zYWN0aW9ucy4gSXQgY2FuIHJlZmVyZW5jZSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGUuZy4gY29tbXVuaXR5IGV4cGVjdGF0aW9ucyBvbiBwcmVmZXJyZWQgbGlua2luZyBhbmQgY2l0YXRpb24gY29udmVudGlvbnMsIGFzIHdlbGwgYXMgcHVyY2hhc2luZyBkZXRhaWxzLiBGb3Igc29tZXRoaW5nIHRoYXQgY2FuIGJlIGNvbW1lcmNpYWxseSBsaWNlbnNlZCwgdXNhZ2VJbmZvIGNhbiBwcm92aWRlIGRldGFpbGVkLCByZXNvdXJjZS1zcGVjaWZpYyBpbmZvcm1hdGlvbiBhYm91dCBsaWNlbnNpbmcgb3B0aW9ucy4KClRoaXMgcHJvcGVydHkgY2FuIGJlIHVzZWQgYWxvbmdzaWRlIHRoZSBsaWNlbnNlIHByb3BlcnR5IHdoaWNoIGluZGljYXRlcyBsaWNlbnNlKHMpIGFwcGxpY2FibGUgdG8gc29tZSBwaWVjZSBvZiBjb250ZW50LiBUaGUgdXNhZ2VJbmZvIHByb3BlcnR5IGNhbiBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IG90aGVyIGxpY2Vuc2luZyBvcHRpb25zLCBlLmcuIGFjcXVpcmluZyBjb21tZXJjaWFsIHVzYWdlIHJpZ2h0cyBmb3IgYW4gaW1hZ2UgdGhhdCBpcyBhbHNvIGF2YWlsYWJsZSB1bmRlciBub24tY29tbWVyY2lhbCBjcmVhdGl2ZSBjb21tb25zIGxpY2Vuc2VzLmphY2Nlc3NNb2RlomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkBIVRoZSBodW1hbiBzZW5zb3J5IHBlcmNlcHR1YWwgc3lzdGVtIG9yIGNvZ25pdGl2ZSBmYWN1bHR5IHRocm91Z2ggd2hpY2ggYSBwZXJzb24gbWF5IHByb2Nlc3Mgb3IgcGVyY2VpdmUgaW5mb3JtYXRpb24uIEV4cGVjdGVkIHZhbHVlcyBpbmNsdWRlOiBhdWRpdG9yeSwgdGFjdGlsZSwgdGV4dHVhbCwgdmlzdWFsLCBjb2xvckRlcGVuZGVudCwgY2hhcnRPblZpc3VhbCwgY2hlbU9uVmlzdWFsLCBkaWFncmFtT25WaXN1YWwsIG1hdGhPblZpc3VhbCwgbXVzaWNPblZpc3VhbCwgdGV4dE9uVmlzdWFsLgogICAgICBqYXJjaGl2ZWRBdKJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZuc2NoZW1hOldlYlBhZ2WiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZm5zY2hlbWE6V2ViUGFnZWtkZXNjcmlwdGlvbnkBTEluZGljYXRlcyBhIHBhZ2Ugb3Igb3RoZXIgbGluayBpbnZvbHZlZCBpbiBhcmNoaXZhbCBvZiBhIFtbQ3JlYXRpdmVXb3JrXV0uIEluIHRoZSBjYXNlIG9mIFtbTWVkaWFSZXZpZXddXSwgdGhlIGl0ZW1zIGluIGEgW1tNZWRpYVJldmlld0l0ZW1dXSBtYXkgb2Z0ZW4gYmVjb21lIGluYWNjZXNzaWJsZSwgYnV0IGJlIGFyY2hpdmVkIGJ5IGFyY2hpdmFsLCBqb3VybmFsaXN0aWMsIGFjdGl2aXN0LCBvciBsYXcgZW5mb3JjZW1lbnQgb3JnYW5pemF0aW9ucy4gSW4gc3VjaCBjYXNlcywgdGhlIHJlZmVyZW5jZWQgcGFnZSBtYXkgbm90IGRpcmVjdGx5IHB1Ymxpc2ggdGhlIGNvbnRlbnQuamNvcnJlY3Rpb26iZW9uZU9mgqFlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZngYc2NoZW1hOkNvcnJlY3Rpb25Db21tZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmeBhzY2hlbWE6Q29ycmVjdGlvbkNvbW1lbnRrZGVzY3JpcHRpb254c0luZGljYXRlcyBhIGNvcnJlY3Rpb24gdG8gYSBbW0NyZWF0aXZlV29ya11dLCBlaXRoZXIgdmlhIGEgW1tDb3JyZWN0aW9uQ29tbWVudF1dLCB0ZXh0dWFsbHkgb3IgaW4gYW5vdGhlciBkb2N1bWVudC5qY3JlZGl0VGV4dKJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254a1RleHQgdGhhdCBjYW4gYmUgdXNlZCB0byBjcmVkaXQgcGVyc29uKHMpIGFuZC9vciBvcmdhbml6YXRpb24ocykgYXNzb2NpYXRlZCB3aXRoIGEgcHVibGlzaGVkIENyZWF0aXZlIFdvcmsuamZpbGVGb3JtYXSiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255AeVNZWRpYSB0eXBlLCB0eXBpY2FsbHkgTUlNRSBmb3JtYXQgKHNlZSBbSUFOQSBzaXRlXShodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL21lZGlhLXR5cGVzL21lZGlhLXR5cGVzLnhodG1sKSkgb2YgdGhlIGNvbnRlbnQgZS5nLiBhcHBsaWNhdGlvbi96aXAgb2YgYSBTb2Z0d2FyZUFwcGxpY2F0aW9uIGJpbmFyeS4gSW4gY2FzZXMgd2hlcmUgYSBDcmVhdGl2ZVdvcmsgaGFzIHNldmVyYWwgbWVkaWEgdHlwZSByZXByZXNlbnRhdGlvbnMsICdlbmNvZGluZycgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgZWFjaCBNZWRpYU9iamVjdCBhbG9uZ3NpZGUgcGFydGljdWxhciBmaWxlRm9ybWF0IGluZm9ybWF0aW9uLiBVbnJlZ2lzdGVyZWQgb3IgbmljaGUgZmlsZSBmb3JtYXRzIGNhbiBiZSBpbmRpY2F0ZWQgaW5zdGVhZCB2aWEgdGhlIG1vc3QgYXBwcm9wcmlhdGUgVVJMLCBlLmcuIGRlZmluaW5nIFdlYiBwYWdlIG9yIGEgV2lraXBlZGlhIGVudHJ5Lmppbkxhbmd1YWdlomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmb3NjaGVtYTpMYW5ndWFnZWtkZXNjcmlwdGlvbnjIVGhlIGxhbmd1YWdlIG9mIHRoZSBjb250ZW50IG9yIHBlcmZvcm1hbmNlIG9yIHVzZWQgaW4gYW4gYWN0aW9uLiBQbGVhc2UgdXNlIG9uZSBvZiB0aGUgbGFuZ3VhZ2UgY29kZXMgZnJvbSB0aGUgW0lFVEYgQkNQIDQ3IHN0YW5kYXJkXShodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9iY3A0NykuIFNlZSBhbHNvIFtbYXZhaWxhYmxlTGFuZ3VhZ2VdXS5qbWFpbkVudGl0eaJlb25lT2aCoWQkcmVmbHNjaGVtYTpUaGluZ6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZmxzY2hlbWE6VGhpbmdrZGVzY3JpcHRpb254SkluZGljYXRlcyB0aGUgcHJpbWFyeSBlbnRpdHkgZGVzY3JpYmVkIGluIHNvbWUgcGFnZSBvciBvdGhlciBDcmVhdGl2ZVdvcmsuam1haW50YWluZXKiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnkDXEEgbWFpbnRhaW5lciBvZiBhIFtbRGF0YXNldF1dLCBzb2Z0d2FyZSBwYWNrYWdlIChbW1NvZnR3YXJlQXBwbGljYXRpb25dXSksIG9yIG90aGVyIFtbUHJvamVjdF1dLiBBIG1haW50YWluZXIgaXMgYSBbW1BlcnNvbl1dIG9yIFtbT3JnYW5pemF0aW9uXV0gdGhhdCBtYW5hZ2VzIGNvbnRyaWJ1dGlvbnMgdG8sIGFuZC9vciBwdWJsaWNhdGlvbiBvZiwgc29tZSAodHlwaWNhbGx5IGNvbXBsZXgpIGFydGlmYWN0LiBJdCBpcyBjb21tb24gZm9yIGRpc3RyaWJ1dGlvbnMgb2Ygc29mdHdhcmUgYW5kIGRhdGEgdG8gYmUgYmFzZWQgb24gInVwc3RyZWFtIiBzb3VyY2VzLiBXaGVuIFtbbWFpbnRhaW5lcl1dIGlzIGFwcGxpZWQgdG8gYSBzcGVjaWZpYyB2ZXJzaW9uIG9mIHNvbWV0aGluZyBlLmcuIGEgcGFydGljdWxhciB2ZXJzaW9uIG9yIHBhY2thZ2luZyBvZiBhIFtbRGF0YXNldF1dLCBpdCBpcyBhbHdheXMgIHBvc3NpYmxlIHRoYXQgdGhlIHVwc3RyZWFtIHNvdXJjZSBoYXMgYSBkaWZmZXJlbnQgbWFpbnRhaW5lci4gVGhlIFtbaXNCYXNlZE9uXV0gcHJvcGVydHkgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgc3VjaCByZWxhdGlvbnNoaXBzIGJldHdlZW4gZGF0YXNldHMgdG8gbWFrZSB0aGUgZGlmZmVyZW50IG1haW50ZW5hbmNlIHJvbGVzIGNsZWFyLiBTaW1pbGFybHkgaW4gdGhlIGNhc2Ugb2Ygc29mdHdhcmUsIGEgcGFja2FnZSBtYXkgaGF2ZSBkZWRpY2F0ZWQgbWFpbnRhaW5lcnMgd29ya2luZyBvbiBpbnRlZ3JhdGlvbiBpbnRvIHNvZnR3YXJlIGRpc3RyaWJ1dGlvbnMgc3VjaCBhcyBVYnVudHUsIGFzIHdlbGwgYXMgdXBzdHJlYW0gbWFpbnRhaW5lcnMgb2YgdGhlIHVuZGVybHlpbmcgd29yay4KICAgICAganJlY29yZGVkQXSiZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueGVUaGUgRXZlbnQgd2hlcmUgdGhlIENyZWF0aXZlV29yayB3YXMgcmVjb3JkZWQuIFRoZSBDcmVhdGl2ZVdvcmsgbWF5IGNhcHR1cmUgYWxsIG9yIHBhcnQgb2YgdGhlIGV2ZW50Lmp0cmFuc2xhdG9yomVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb26iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254s09yZ2FuaXphdGlvbiBvciBwZXJzb24gd2hvIGFkYXB0cyBhIGNyZWF0aXZlIHdvcmsgdG8gZGlmZmVyZW50IGxhbmd1YWdlcywgcmVnaW9uYWwgZGlmZmVyZW5jZXMgYW5kIHRlY2huaWNhbCByZXF1aXJlbWVudHMgb2YgYSB0YXJnZXQgbWFya2V0LCBvciB0aGF0IHRyYW5zbGF0ZXMgZHVyaW5nIHNvbWUgZXZlbnQua2NvbnRyaWJ1dG9yomVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb26iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254NUEgc2Vjb25kYXJ5IGNvbnRyaWJ1dG9yIHRvIHRoZSBDcmVhdGl2ZVdvcmsgb3IgRXZlbnQua2RhdGVDcmVhdGVkomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGRkYXRlomR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1la2Rlc2NyaXB0aW9ueFNUaGUgZGF0ZSBvbiB3aGljaCB0aGUgQ3JlYXRpdmVXb3JrIHdhcyBjcmVhdGVkIG9yIHRoZSBpdGVtIHdhcyBhZGRlZCB0byBhIERhdGFGZWVkLmtwdWJsaWNhdGlvbqJlb25lT2aCoWQkcmVmd3NjaGVtYTpQdWJsaWNhdGlvbkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmd3NjaGVtYTpQdWJsaWNhdGlvbkV2ZW50a2Rlc2NyaXB0aW9ueC1BIHB1YmxpY2F0aW9uIGV2ZW50IGFzc29jaWF0ZWQgd2l0aCB0aGUgaXRlbS5rc2RQdWJsaXNoZXKiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnkBtEluZGljYXRlcyB0aGUgcGFydHkgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgYW5kIHB1Ymxpc2hpbmcgdGhlIGN1cnJlbnQgc3RydWN0dXJlZCBkYXRhIG1hcmt1cCwgdHlwaWNhbGx5IGluIGNhc2VzIHdoZXJlIHRoZSBzdHJ1Y3R1cmVkIGRhdGEgaXMgZGVyaXZlZCBhdXRvbWF0aWNhbGx5IGZyb20gZXhpc3RpbmcgcHVibGlzaGVkIGNvbnRlbnQgYnV0IHB1Ymxpc2hlZCBvbiBhIGRpZmZlcmVudCBzaXRlLiBGb3IgZXhhbXBsZSwgc3R1ZGVudCBwcm9qZWN0cyBhbmQgb3BlbiBkYXRhIGluaXRpYXRpdmVzIG9mdGVuIHJlLXB1Ymxpc2ggZXhpc3RpbmcgY29udGVudCB3aXRoIG1vcmUgZXhwbGljaXRseSBzdHJ1Y3R1cmVkIG1ldGFkYXRhLiBUaGUKW1tzZFB1Ymxpc2hlcl1dIHByb3BlcnR5IGhlbHBzIG1ha2Ugc3VjaCBwcmFjdGljZXMgbW9yZSBleHBsaWNpdC5rd29ya0V4YW1wbGWiZW9uZU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254gUV4YW1wbGUvaW5zdGFuY2UvcmVhbGl6YXRpb24vZGVyaXZhdGlvbiBvZiB0aGUgY29uY2VwdCBvZiB0aGlzIGNyZWF0aXZlIHdvcmsuIGVnLiBUaGUgcGFwZXJiYWNrIGVkaXRpb24sIGZpcnN0IGVkaXRpb24sIG9yIGVCb29rLmxjb21tZW50Q291bnSiZHR5cGVnaW50ZWdlcmtkZXNjcmlwdGlvbnjSVGhlIG51bWJlciBvZiBjb21tZW50cyB0aGlzIENyZWF0aXZlV29yayAoZS5nLiBBcnRpY2xlLCBRdWVzdGlvbiBvciBBbnN3ZXIpIGhhcyByZWNlaXZlZC4gVGhpcyBpcyBtb3N0IGFwcGxpY2FibGUgdG8gd29ya3MgcHVibGlzaGVkIGluIFdlYiBzaXRlcyB3aXRoIGNvbW1lbnRpbmcgc3lzdGVtOyBhZGRpdGlvbmFsIGNvbW1lbnRzIG1heSBleGlzdCBlbHNld2hlcmUubGRhdGVNb2RpZmllZKJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZaJkdHlwZWZzdHJpbmdmZm9ybWF0aWRhdGUtdGltZWtkZXNjcmlwdGlvbnh2VGhlIGRhdGUgb24gd2hpY2ggdGhlIENyZWF0aXZlV29yayB3YXMgbW9zdCByZWNlbnRseSBtb2RpZmllZCBvciB3aGVuIHRoZSBpdGVtJ3MgZW50cnkgd2FzIG1vZGlmaWVkIHdpdGhpbiBhIERhdGFGZWVkLmxpc0Jhc2VkT25VcmyiZW9uZU9mgqFlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZuc2NoZW1hOlByb2R1Y3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbnNjaGVtYTpQcm9kdWN0a2Rlc2NyaXB0aW9ueKtBIHJlc291cmNlIHRoYXQgd2FzIHVzZWQgaW4gdGhlIGNyZWF0aW9uIG9mIHRoaXMgcmVzb3VyY2UuIFRoaXMgdGVybSBjYW4gYmUgcmVwZWF0ZWQgZm9yIG11bHRpcGxlIHNvdXJjZXMuIEZvciBleGFtcGxlLCBodHRwOi8vZXhhbXBsZS5jb20vZ3JlYXQtbXVsdGlwbGljYXRpb24taW50cm8uaHRtbC5sdGh1bWJuYWlsVXJsomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254KEEgdGh1bWJuYWlsIGltYWdlIHJlbGV2YW50IHRvIHRoZSBUaGluZy5sdGltZVJlcXVpcmVko2R0eXBlZnN0cmluZ2gkY29tbWVudHgbaHR0cHM6Ly9zY2hlbWEub3JnL0R1cmF0aW9ua2Rlc2NyaXB0aW9ueJZBcHByb3hpbWF0ZSBvciB0eXBpY2FsIHRpbWUgaXQgdGFrZXMgdG8gd29yayB3aXRoIG9yIHRocm91Z2ggdGhpcyBsZWFybmluZyByZXNvdXJjZSBmb3IgdGhlIHR5cGljYWwgaW50ZW5kZWQgdGFyZ2V0IGF1ZGllbmNlLCBlLmcuICdQVDMwTScsICdQVDFIMjVNJy5tY29udGVudFJhdGluZ6Jlb25lT2aCoWVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmbXNjaGVtYTpSYXRpbmeiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZtc2NoZW1hOlJhdGluZ2tkZXNjcmlwdGlvbnhBT2ZmaWNpYWwgcmF0aW5nIG9mIGEgcGllY2Ugb2YgY29udGVudOKAlGZvciBleGFtcGxlLCdNUEFBIFBHLTEzJy5tY29weXJpZ2h0WWVhcqJkdHlwZWZudW1iZXJrZGVzY3JpcHRpb254VFRoZSB5ZWFyIGR1cmluZyB3aGljaCB0aGUgY2xhaW1lZCBjb3B5cmlnaHQgZm9yIHRoZSBDcmVhdGl2ZVdvcmsgd2FzIGZpcnN0IGFzc2VydGVkLm1kYXRlUHVibGlzaGVkomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGRkYXRlomR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1la2Rlc2NyaXB0aW9ueCREYXRlIG9mIGZpcnN0IGJyb2FkY2FzdC9wdWJsaWNhdGlvbi5tZGlzY3Vzc2lvblVybKJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueD9BIGxpbmsgdG8gdGhlIHBhZ2UgY29udGFpbmluZyB0aGUgY29tbWVudHMgb2YgdGhlIENyZWF0aXZlV29yay5tZXhhbXBsZU9mV29ya6Jlb25lT2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnhQQSBjcmVhdGl2ZSB3b3JrIHRoYXQgdGhpcyB3b3JrIGlzIGFuIGV4YW1wbGUvaW5zdGFuY2UvcmVhbGl6YXRpb24vZGVyaXZhdGlvbiBvZi5tcmVsZWFzZWRFdmVudKJkJHJlZndzY2hlbWE6UHVibGljYXRpb25FdmVudGtkZXNjcmlwdGlvbnhLVGhlIHBsYWNlIGFuZCB0aW1lIHRoZSByZWxlYXNlIHdhcyBpc3N1ZWQsIGV4cHJlc3NlZCBhcyBhIFB1YmxpY2F0aW9uRXZlbnQubXNjaGVtYVZlcnNpb26iZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkCB0luZGljYXRlcyAoYnkgVVJMIG9yIHN0cmluZykgYSBwYXJ0aWN1bGFyIHZlcnNpb24gb2YgYSBzY2hlbWEgdXNlZCBpbiBzb21lIENyZWF0aXZlV29yay4gVGhpcyBwcm9wZXJ0eSB3YXMgY3JlYXRlZCBwcmltYXJpbHkgdG8KICAgIGluZGljYXRlIHRoZSB1c2Ugb2YgYSBzcGVjaWZpYyBzY2hlbWEub3JnIHJlbGVhc2UsIGUuZy4gYGBgMTAuMGBgYCBhcyBhIHNpbXBsZSBzdHJpbmcsIG9yIG1vcmUgZXhwbGljaXRseSB2aWEgVVJMLCBgYGBodHRwczovL3NjaGVtYS5vcmcvZG9jcy9yZWxlYXNlcy5odG1sI3YxMC4wYGBgLiBUaGVyZSBtYXkgYmUgc2l0dWF0aW9ucyBpbiB3aGljaCBvdGhlciBzY2hlbWFzIG1pZ2h0IHVzZWZ1bGx5IGJlIHJlZmVyZW5jZWQgdGhpcyB3YXksIGUuZy4gYGBgaHR0cDovL2R1YmxpbmNvcmUub3JnL3NwZWNpZmljYXRpb25zL2R1Ymxpbi1jb3JlL2RjZXMvMTk5OS0wNy0wMi9gYGAgYnV0IHRoaXMgaGFzIG5vdCBiZWVuIGNhcmVmdWxseSBleHBsb3JlZCBpbiB0aGUgY29tbXVuaXR5Lm5lZHVjYXRpb25hbFVzZaJlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm1rZGVzY3JpcHRpb254W1RoZSBwdXJwb3NlIG9mIGEgd29yayBpbiB0aGUgY29udGV4dCBvZiBlZHVjYXRpb247IGZvciBleGFtcGxlLCAnYXNzaWdubWVudCcsICdncm91cCB3b3JrJy5uZW5jb2RpbmdGb3JtYXSiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255Ao5NZWRpYSB0eXBlIHR5cGljYWxseSBleHByZXNzZWQgdXNpbmcgYSBNSU1FIGZvcm1hdCAoc2VlIFtJQU5BIHNpdGVdKGh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvbWVkaWEtdHlwZXMvbWVkaWEtdHlwZXMueGh0bWwpIGFuZCBbTUROIHJlZmVyZW5jZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9CYXNpY3Nfb2ZfSFRUUC9NSU1FX3R5cGVzKSkgZS5nLiBhcHBsaWNhdGlvbi96aXAgZm9yIGEgU29mdHdhcmVBcHBsaWNhdGlvbiBiaW5hcnksIGF1ZGlvL21wZWcgZm9yIC5tcDMgZXRjLikuCgpJbiBjYXNlcyB3aGVyZSBhIFtbQ3JlYXRpdmVXb3JrXV0gaGFzIHNldmVyYWwgbWVkaWEgdHlwZSByZXByZXNlbnRhdGlvbnMsIFtbZW5jb2RpbmddXSBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBlYWNoIFtbTWVkaWFPYmplY3RdXSBhbG9uZ3NpZGUgcGFydGljdWxhciBbW2VuY29kaW5nRm9ybWF0XV0gaW5mb3JtYXRpb24uCgpVbnJlZ2lzdGVyZWQgb3IgbmljaGUgZW5jb2RpbmcgYW5kIGZpbGUgZm9ybWF0cyBjYW4gYmUgaW5kaWNhdGVkIGluc3RlYWQgdmlhIHRoZSBtb3N0IGFwcHJvcHJpYXRlIFVSTCwgZS5nLiBkZWZpbmluZyBXZWIgcGFnZSBvciBhIFdpa2lwZWRpYS9XaWtpZGF0YSBlbnRyeS5vW29iamVjdCBPYmplY3RdomVvbmVPZoKhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZ4GHNjaGVtYTpRdWFudGl0YXRpdmVWYWx1ZaJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZngYc2NoZW1hOlF1YW50aXRhdGl2ZVZhbHVla2Rlc2NyaXB0aW9uYG9hZ2dyZWdhdGVSYXRpbmeiZCRyZWZ2c2NoZW1hOkFnZ3JlZ2F0ZVJhdGluZ2tkZXNjcmlwdGlvbnhNVGhlIG92ZXJhbGwgcmF0aW5nLCBiYXNlZCBvbiBhIGNvbGxlY3Rpb24gb2YgcmV2aWV3cyBvciByYXRpbmdzLCBvZiB0aGUgaXRlbS5vYXNzb2NpYXRlZE1lZGlhomQkcmVmcnNjaGVtYTpNZWRpYU9iamVjdGtkZXNjcmlwdGlvbnhXQSBtZWRpYSBvYmplY3QgdGhhdCBlbmNvZGVzIHRoaXMgQ3JlYXRpdmVXb3JrLiBUaGlzIHByb3BlcnR5IGlzIGEgc3lub255bSBmb3IgZW5jb2Rpbmcub2NvbnRlbnRMb2NhdGlvbqJkJHJlZmxzY2hlbWE6UGxhY2VrZGVzY3JpcHRpb254aVRoZSBsb2NhdGlvbiBkZXBpY3RlZCBvciBkZXNjcmliZWQgaW4gdGhlIGNvbnRlbnQuIEZvciBleGFtcGxlLCB0aGUgbG9jYXRpb24gaW4gYSBwaG90b2dyYXBoIG9yIHBhaW50aW5nLm9jb3B5cmlnaHRIb2xkZXKiZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254OlRoZSBwYXJ0eSBob2xkaW5nIHRoZSBsZWdhbCBjb3B5cmlnaHQgdG8gdGhlIENyZWF0aXZlV29yay5vY29weXJpZ2h0Tm90aWNlomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbniUVGV4dCBvZiBhIG5vdGljZSBhcHByb3ByaWF0ZSBmb3IgZGVzY3JpYmluZyB0aGUgY29weXJpZ2h0IGFzcGVjdHMgb2YgdGhpcyBDcmVhdGl2ZSBXb3JrLCBpZGVhbGx5IGluZGljYXRpbmcgdGhlIG93bmVyIG9mIHRoZSBjb3B5cmlnaHQgZm9yIHRoZSBXb3JrLm9jb3VudHJ5T2ZPcmlnaW6iZCRyZWZuc2NoZW1hOkNvdW50cnlrZGVzY3JpcHRpb255AmFUaGUgY291bnRyeSBvZiBvcmlnaW4gb2Ygc29tZXRoaW5nLCBpbmNsdWRpbmcgcHJvZHVjdHMgYXMgd2VsbCBhcyBjcmVhdGl2ZSAgd29ya3Mgc3VjaCBhcyBtb3ZpZSBhbmQgVFYgY29udGVudC4KCkluIHRoZSBjYXNlIG9mIFRWIGFuZCBtb3ZpZSwgdGhpcyB3b3VsZCBiZSB0aGUgY291bnRyeSBvZiB0aGUgcHJpbmNpcGxlIG9mZmljZXMgb2YgdGhlIHByb2R1Y3Rpb24gY29tcGFueSBvciBpbmRpdmlkdWFsIHJlc3BvbnNpYmxlIGZvciB0aGUgbW92aWUuIEZvciBvdGhlciBraW5kcyBvZiBbW0NyZWF0aXZlV29ya11dIGl0IGlzIGRpZmZpY3VsdCB0byBwcm92aWRlIGZ1bGx5IGdlbmVyYWwgZ3VpZGFuY2UsIGFuZCBwcm9wZXJ0aWVzIHN1Y2ggYXMgW1tjb250ZW50TG9jYXRpb25dXSBhbmQgW1tsb2NhdGlvbkNyZWF0ZWRdXSBtYXkgYmUgbW9yZSBhcHBsaWNhYmxlLgoKSW4gdGhlIGNhc2Ugb2YgcHJvZHVjdHMsIHRoZSBjb3VudHJ5IG9mIG9yaWdpbiBvZiB0aGUgcHJvZHVjdC4gVGhlIGV4YWN0IGludGVycHJldGF0aW9uIG9mIHRoaXMgbWF5IHZhcnkgYnkgY29udGV4dCBhbmQgcHJvZHVjdCB0eXBlLCBhbmQgY2Fubm90IGJlIGZ1bGx5IGVudW1lcmF0ZWQgaGVyZS5vbG9jYXRpb25DcmVhdGVkomQkcmVmbHNjaGVtYTpQbGFjZWtkZXNjcmlwdGlvbnh4VGhlIGxvY2F0aW9uIHdoZXJlIHRoZSBDcmVhdGl2ZVdvcmsgd2FzIGNyZWF0ZWQsIHdoaWNoIG1heSBub3QgYmUgdGhlIHNhbWUgYXMgdGhlIGxvY2F0aW9uIGRlcGljdGVkIGluIHRoZSBDcmVhdGl2ZVdvcmsub3NkRGF0ZVB1Ymxpc2hlZKJlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGVrZGVzY3JpcHRpb254e0luZGljYXRlcyB0aGUgZGF0ZSBvbiB3aGljaCB0aGUgY3VycmVudCBzdHJ1Y3R1cmVkIGRhdGEgd2FzIGdlbmVyYXRlZCAvIHB1Ymxpc2hlZC4gVHlwaWNhbGx5IHVzZWQgYWxvbmdzaWRlIFtbc2RQdWJsaXNoZXJdXW9zcGF0aWFsQ292ZXJhZ2WiZCRyZWZsc2NoZW1hOlBsYWNla2Rlc2NyaXB0aW9ueQGBVGhlIHNwYXRpYWxDb3ZlcmFnZSBvZiBhIENyZWF0aXZlV29yayBpbmRpY2F0ZXMgdGhlIHBsYWNlKHMpIHdoaWNoIGFyZSB0aGUgZm9jdXMgb2YgdGhlIGNvbnRlbnQuIEl0IGlzIGEgc3VicHJvcGVydHkgb2YKICAgICAgY29udGVudExvY2F0aW9uIGludGVuZGVkIHByaW1hcmlseSBmb3IgbW9yZSB0ZWNobmljYWwgYW5kIGRldGFpbGVkIG1hdGVyaWFscy4gRm9yIGV4YW1wbGUgd2l0aCBhIERhdGFzZXQsIGl0IGluZGljYXRlcwogICAgICBhcmVhcyB0aGF0IHRoZSBkYXRhc2V0IGRlc2NyaWJlczogYSBkYXRhc2V0IG9mIE5ldyBZb3JrIHdlYXRoZXIgd291bGQgaGF2ZSBzcGF0aWFsQ292ZXJhZ2Ugd2hpY2ggd2FzIHRoZSBwbGFjZTogdGhlIHN0YXRlIG9mIE5ldyBZb3JrLm90eXBpY2FsQWdlUmFuZ2WiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueDJUaGUgdHlwaWNhbCBleHBlY3RlZCBhZ2UgcmFuZ2UsIGUuZy4gJzctOScsICcxMS0nLm93b3JrVHJhbnNsYXRpb26iZW9uZU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb2547EEgd29yayB0aGF0IGlzIGEgdHJhbnNsYXRpb24gb2YgdGhlIGNvbnRlbnQgb2YgdGhpcyB3b3JrLiBlLmcuIOilv+mBiuiomCBoYXMgYW4gRW5nbGlzaCB3b3JrVHJhbnNsYXRpb24g4oCcSm91cm5leSB0byB0aGUgV2VzdOKAnSxhIEdlcm1hbiB3b3JrVHJhbnNsYXRpb24g4oCcTW9ua2V5cyBQaWxnZXJmYWhydOKAnSBhbmQgYSBWaWV0bmFtZXNlICB0cmFuc2xhdGlvbiBUw6J5IGR1IGvDvSBiw6xuaCBraOG6o28ucGFjY2Vzc2liaWxpdHlBUEmiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueKtJbmRpY2F0ZXMgdGhhdCB0aGUgcmVzb3VyY2UgaXMgY29tcGF0aWJsZSB3aXRoIHRoZSByZWZlcmVuY2VkIGFjY2Vzc2liaWxpdHkgQVBJIChbV2ViU2NoZW1hcyB3aWtpIGxpc3RzIHBvc3NpYmxlIHZhbHVlc10oaHR0cDovL3d3dy53My5vcmcvd2lraS9XZWJTY2hlbWFzL0FjY2Vzc2liaWxpdHkpKS5wZWR1Y2F0aW9uYWxMZXZlbKJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm1rZGVzY3JpcHRpb254w1RoZSBsZXZlbCBpbiB0ZXJtcyBvZiBwcm9ncmVzc2lvbiB0aHJvdWdoIGFuIGVkdWNhdGlvbmFsIG9yIHRyYWluaW5nIGNvbnRleHQuIEV4YW1wbGVzIG9mIGVkdWNhdGlvbmFsIGxldmVscyBpbmNsdWRlICdiZWdpbm5lcicsICdpbnRlcm1lZGlhdGUnIG9yICdhZHZhbmNlZCcsIGFuZCBmb3JtYWwgc2V0cyBvZiBsZXZlbCBpbmRpY2F0b3JzLnBpc0ZhbWlseUZyaWVuZGx5omR0eXBlZ2Jvb2xlYW5rZGVzY3JpcHRpb254MkluZGljYXRlcyB3aGV0aGVyIHRoaXMgY29udGVudCBpcyBmYW1pbHkgZnJpZW5kbHkucHB1Ymxpc2hlckltcHJpbnSiZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbmtkZXNjcmlwdGlvbngyVGhlIHB1Ymxpc2hpbmcgZGl2aXNpb24gd2hpY2ggcHVibGlzaGVkIHRoZSBjb21pYy5wdGVtcG9yYWxDb3ZlcmFnZaJlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1lomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkEK1RoZSB0ZW1wb3JhbENvdmVyYWdlIG9mIGEgQ3JlYXRpdmVXb3JrIGluZGljYXRlcyB0aGUgcGVyaW9kIHRoYXQgdGhlIGNvbnRlbnQgYXBwbGllcyB0bywgaS5lLiB0aGF0IGl0IGRlc2NyaWJlcywgZWl0aGVyIGFzIGEgRGF0ZVRpbWUgb3IgYXMgYSB0ZXh0dWFsIHN0cmluZyBpbmRpY2F0aW5nIGEgdGltZSBwZXJpb2QgaW4gW0lTTyA4NjAxIHRpbWUgaW50ZXJ2YWwgZm9ybWF0XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lX2ludGVydmFscykuIEluCiAgICAgIHRoZSBjYXNlIG9mIGEgRGF0YXNldCBpdCB3aWxsIHR5cGljYWxseSBpbmRpY2F0ZSB0aGUgcmVsZXZhbnQgdGltZSBwZXJpb2QgaW4gYSBwcmVjaXNlIG5vdGF0aW9uIChlLmcuIGZvciBhIDIwMTEgY2Vuc3VzIGRhdGFzZXQsIHRoZSB5ZWFyIDIwMTEgd291bGQgYmUgd3JpdHRlbiAiMjAxMS8yMDEyIikuIE90aGVyIGZvcm1zIG9mIGNvbnRlbnQgZS5nLiBTY2hvbGFybHlBcnRpY2xlLCBCb29rLCBUVlNlcmllcyBvciBUVkVwaXNvZGUgbWF5IGluZGljYXRlIHRoZWlyIHRlbXBvcmFsQ292ZXJhZ2UgaW4gYnJvYWRlciB0ZXJtcyAtIHRleHR1YWxseSBvciB2aWEgd2VsbC1rbm93biBVUkwuCiAgICAgIFdyaXR0ZW4gd29ya3Mgc3VjaCBhcyBib29rcyBtYXkgc29tZXRpbWVzIGhhdmUgcHJlY2lzZSB0ZW1wb3JhbCBjb3ZlcmFnZSB0b28sIGUuZy4gYSB3b3JrIHNldCBpbiAxOTM5IC0gMTk0NSBjYW4gYmUgaW5kaWNhdGVkIGluIElTTyA4NjAxIGludGVydmFsIGZvcm1hdCBmb3JtYXQgdmlhICIxOTM5LzE5NDUiLgoKT3Blbi1lbmRlZCBkYXRlIHJhbmdlcyBjYW4gYmUgd3JpdHRlbiB3aXRoICIuLiIgaW4gcGxhY2Ugb2YgdGhlIGVuZCBkYXRlLiBGb3IgZXhhbXBsZSwgIjIwMTUtMTEvLi4iIGluZGljYXRlcyBhIHJhbmdlIGJlZ2lubmluZyBpbiBOb3ZlbWJlciAyMDE1IGFuZCB3aXRoIG5vIHNwZWNpZmllZCBmaW5hbCBkYXRlLiBUaGlzIGlzIHRlbnRhdGl2ZSBhbmQgbWlnaHQgYmUgdXBkYXRlZCBpbiBmdXR1cmUgd2hlbiBJU08gODYwMSBpcyBvZmZpY2lhbGx5IHVwZGF0ZWQucWFjY291bnRhYmxlUGVyc29uomQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254RlNwZWNpZmllcyB0aGUgUGVyc29uIHRoYXQgaXMgbGVnYWxseSBhY2NvdW50YWJsZSBmb3IgdGhlIENyZWF0aXZlV29yay5xaW50ZXJhY3Rpdml0eVR5cGWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueH5UaGUgcHJlZG9taW5hbnQgbW9kZSBvZiBsZWFybmluZyBzdXBwb3J0ZWQgYnkgdGhlIGxlYXJuaW5nIHJlc291cmNlLiBBY2NlcHRhYmxlIHZhbHVlcyBhcmUgJ2FjdGl2ZScsICdleHBvc2l0aXZlJywgb3IgJ21peGVkJy5xdHJhbnNsYXRpb25PZldvcmuiZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnh1VGhlIHdvcmsgdGhhdCB0aGlzIHdvcmsgaGFzIGJlZW4gdHJhbnNsYXRlZCBmcm9tLiBlLmcuIOeJqeenjei1t+a6kCBpcyBhIHRyYW5zbGF0aW9uT2Yg4oCcT24gdGhlIE9yaWdpbiBvZiBTcGVjaWVz4oCdcmFjcXVpcmVMaWNlbnNlUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254Z0luZGljYXRlcyBhIHBhZ2UgZG9jdW1lbnRpbmcgaG93IGxpY2Vuc2VzIGNhbiBiZSBwdXJjaGFzZWQgb3Igb3RoZXJ3aXNlIGFjcXVpcmVkLCBmb3IgdGhlIGN1cnJlbnQgaXRlbS5yY29uZGl0aW9uc09mQWNjZXNzomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkBokNvbmRpdGlvbnMgdGhhdCBhZmZlY3QgdGhlIGF2YWlsYWJpbGl0eSBvZiwgb3IgbWV0aG9kKHMpIG9mIGFjY2VzcyB0bywgYW4gaXRlbS4gVHlwaWNhbGx5IHVzZWQgZm9yIHJlYWwgd29ybGQgaXRlbXMgc3VjaCBhcyBhbiBbW0FyY2hpdmVDb21wb25lbnRdXSBoZWxkIGJ5IGFuIFtbQXJjaGl2ZU9yZ2FuaXphdGlvbl1dLiBUaGlzIHByb3BlcnR5IGlzIG5vdCBzdWl0YWJsZSBmb3IgdXNlIGFzIGEgZ2VuZXJhbCBXZWIgYWNjZXNzIGNvbnRyb2wgbWVjaGFuaXNtLiBJdCBpcyBleHByZXNzZWQgb25seSBpbiBuYXR1cmFsIGxhbmd1YWdlLlxuXG5Gb3IgZXhhbXBsZSAiQXZhaWxhYmxlIGJ5IGFwcG9pbnRtZW50IGZyb20gdGhlIFJlYWRpbmcgUm9vbSIgb3IgIkFjY2Vzc2libGUgb25seSBmcm9tIGxvZ2dlZC1pbiBhY2NvdW50cyAiLiByY3JlYXRpdmVXb3JrU3RhdHVzomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybWtkZXNjcmlwdGlvbnjZVGhlIHN0YXR1cyBvZiBhIGNyZWF0aXZlIHdvcmsgaW4gdGVybXMgb2YgaXRzIHN0YWdlIGluIGEgbGlmZWN5Y2xlLiBFeGFtcGxlIHRlcm1zIGluY2x1ZGUgSW5jb21wbGV0ZSwgRHJhZnQsIFB1Ymxpc2hlZCwgT2Jzb2xldGUuIFNvbWUgb3JnYW5pemF0aW9ucyBkZWZpbmUgYSBzZXQgb2YgdGVybXMgZm9yIHRoZSBzdGFnZXMgb2YgdGhlaXIgcHVibGljYXRpb24gbGlmZWN5Y2xlLnJpbnRlcnByZXRlZEFzQ2xhaW2iZW9uZU9mgqFkJHJlZmxzY2hlbWE6Q2xhaW2iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZsc2NoZW1hOkNsYWlta2Rlc2NyaXB0aW9ueNBVc2VkIHRvIGluZGljYXRlIGEgc3BlY2lmaWMgY2xhaW0gY29udGFpbmVkLCBpbXBsaWVkLCB0cmFuc2xhdGVkIG9yIHJlZmluZWQgZnJvbSB0aGUgY29udGVudCBvZiBhIFtbTWVkaWFPYmplY3RdXSBvciBvdGhlciBbW0NyZWF0aXZlV29ya11dLiBUaGUgaW50ZXJwcmV0aW5nIHBhcnR5IGNhbiBiZSBpbmRpY2F0ZWQgdXNpbmcgW1tjbGFpbUludGVycHJldGVyXV0ucnNvdXJjZU9yZ2FuaXphdGlvbqJkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9ua2Rlc2NyaXB0aW9ueDlUaGUgT3JnYW5pemF0aW9uIG9uIHdob3NlIGJlaGFsZiB0aGUgY3JlYXRvciB3YXMgd29ya2luZy5zYWNjZXNzaWJpbGl0eUhhemFyZKJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2542UEgY2hhcmFjdGVyaXN0aWMgb2YgdGhlIGRlc2NyaWJlZCByZXNvdXJjZSB0aGF0IGlzIHBoeXNpb2xvZ2ljYWxseSBkYW5nZXJvdXMgdG8gc29tZSB1c2Vycy4gUmVsYXRlZCB0byBXQ0FHIDIuMCBndWlkZWxpbmUgMi4zIChbV2ViU2NoZW1hcyB3aWtpIGxpc3RzIHBvc3NpYmxlIHZhbHVlc10oaHR0cDovL3d3dy53My5vcmcvd2lraS9XZWJTY2hlbWFzL0FjY2Vzc2liaWxpdHkpKS5zYWx0ZXJuYXRpdmVIZWFkbGluZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254JkEgc2Vjb25kYXJ5IHRpdGxlIG9mIHRoZSBDcmVhdGl2ZVdvcmsuc2lzQWNjZXNzaWJsZUZvckZyZWWiZHR5cGVnYm9vbGVhbmtkZXNjcmlwdGlvbnhHQSBmbGFnIHRvIHNpZ25hbCB0aGF0IHRoZSBpdGVtLCBldmVudCwgb3IgcGxhY2UgaXMgYWNjZXNzaWJsZSBmb3IgZnJlZS50YWNjZXNzTW9kZVN1ZmZpY2llbnSiZW9uZU9mgqFkJHJlZm9zY2hlbWE6SXRlbUxpc3SiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZvc2NoZW1hOkl0ZW1MaXN0a2Rlc2NyaXB0aW9ueLtBIGxpc3Qgb2Ygc2luZ2xlIG9yIGNvbWJpbmVkIGFjY2Vzc01vZGVzIHRoYXQgYXJlIHN1ZmZpY2llbnQgdG8gdW5kZXJzdGFuZCBhbGwgdGhlIGludGVsbGVjdHVhbCBjb250ZW50IG9mIGEgcmVzb3VyY2UuIEV4cGVjdGVkIHZhbHVlcyBpbmNsdWRlOiAgYXVkaXRvcnksIHRhY3RpbGUsIHRleHR1YWwsIHZpc3VhbC4KICAgICAgdGFjY2Vzc2liaWxpdHlDb250cm9somVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbniwSWRlbnRpZmllcyBpbnB1dCBtZXRob2RzIHRoYXQgYXJlIHN1ZmZpY2llbnQgdG8gZnVsbHkgY29udHJvbCB0aGUgZGVzY3JpYmVkIHJlc291cmNlIChbV2ViU2NoZW1hcyB3aWtpIGxpc3RzIHBvc3NpYmxlIHZhbHVlc10oaHR0cDovL3d3dy53My5vcmcvd2lraS9XZWJTY2hlbWFzL0FjY2Vzc2liaWxpdHkpKS50YWNjZXNzaWJpbGl0eUZlYXR1cmWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueNFDb250ZW50IGZlYXR1cmVzIG9mIHRoZSByZXNvdXJjZSwgc3VjaCBhcyBhY2Nlc3NpYmxlIG1lZGlhLCBhbHRlcm5hdGl2ZXMgYW5kIHN1cHBvcnRlZCBlbmhhbmNlbWVudHMgZm9yIGFjY2Vzc2liaWxpdHkgKFtXZWJTY2hlbWFzIHdpa2kgbGlzdHMgcG9zc2libGUgdmFsdWVzXShodHRwOi8vd3d3LnczLm9yZy93aWtpL1dlYlNjaGVtYXMvQWNjZXNzaWJpbGl0eSkpLnRhY2Nlc3NpYmlsaXR5U3VtbWFyeaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255AUNBIGh1bWFuLXJlYWRhYmxlIHN1bW1hcnkgb2Ygc3BlY2lmaWMgYWNjZXNzaWJpbGl0eSBmZWF0dXJlcyBvciBkZWZpY2llbmNpZXMsIGNvbnNpc3RlbnQgd2l0aCB0aGUgb3RoZXIgYWNjZXNzaWJpbGl0eSBtZXRhZGF0YSBidXQgZXhwcmVzc2luZyBzdWJ0bGV0aWVzIHN1Y2ggYXMgInNob3J0IGRlc2NyaXB0aW9ucyBhcmUgcHJlc2VudCBidXQgbG9uZyBkZXNjcmlwdGlvbnMgd2lsbCBiZSBuZWVkZWQgZm9yIG5vbi12aXN1YWwgdXNlcnMiIG9yICJzaG9ydCBkZXNjcmlwdGlvbnMgYXJlIHByZXNlbnQgYW5kIG5vIGxvbmcgZGVzY3JpcHRpb25zIGFyZSBuZWVkZWQuInRjb250ZW50UmVmZXJlbmNlVGltZaNkdHlwZWZzdHJpbmdmZm9ybWF0aWRhdGUtdGltZWtkZXNjcmlwdGlvbniRVGhlIHNwZWNpZmljIHRpbWUgZGVzY3JpYmVkIGJ5IGEgY3JlYXRpdmUgd29yaywgZm9yIHdvcmtzIChlLmcuIGFydGljbGVzLCB2aWRlbyBvYmplY3RzIGV0Yy4pIHRoYXQgZW1waGFzaXNlIGEgcGFydGljdWxhciBtb21lbnQgd2l0aGluIGFuIEV2ZW50LnRlZHVjYXRpb25hbEFsaWdubWVudKJlb25lT2aCoWQkcmVmdnNjaGVtYTpBbGlnbm1lbnRPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ2c2NoZW1hOkFsaWdubWVudE9iamVjdGtkZXNjcmlwdGlvbnj0QW4gYWxpZ25tZW50IHRvIGFuIGVzdGFibGlzaGVkIGVkdWNhdGlvbmFsIGZyYW1ld29yay4KClRoaXMgcHJvcGVydHkgc2hvdWxkIG5vdCBiZSB1c2VkIHdoZXJlIHRoZSBuYXR1cmUgb2YgdGhlIGFsaWdubWVudCBjYW4gYmUgZGVzY3JpYmVkIHVzaW5nIGEgc2ltcGxlIHByb3BlcnR5LCBmb3IgZXhhbXBsZSB0byBleHByZXNzIHRoYXQgYSByZXNvdXJjZSBbW3RlYWNoZXNdXSBvciBbW2Fzc2Vzc2VzXV0gYSBjb21wZXRlbmN5LnRpbnRlcmFjdGlvblN0YXRpc3RpY6JkJHJlZngZc2NoZW1hOkludGVyYWN0aW9uQ291bnRlcmtkZXNjcmlwdGlvbnicVGhlIG51bWJlciBvZiBpbnRlcmFjdGlvbnMgZm9yIHRoZSBDcmVhdGl2ZVdvcmsgdXNpbmcgdGhlIFdlYlNpdGUgb3IgU29mdHdhcmVBcHBsaWNhdGlvbi4gVGhlIG1vc3Qgc3BlY2lmaWMgY2hpbGQgdHlwZSBvZiBJbnRlcmFjdGlvbkNvdW50ZXIgc2hvdWxkIGJlIHVzZWQudGxlYXJuaW5nUmVzb3VyY2VUeXBlomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybWtkZXNjcmlwdGlvbnhqVGhlIHByZWRvbWluYW50IHR5cGUgb3Iga2luZCBjaGFyYWN0ZXJpemluZyB0aGUgbGVhcm5pbmcgcmVzb3VyY2UuIEZvciBleGFtcGxlLCAncHJlc2VudGF0aW9uJywgJ2hhbmRvdXQnLnRwdWJsaXNoaW5nUHJpbmNpcGxlc6JlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb255AmFUaGUgcHVibGlzaGluZ1ByaW5jaXBsZXMgcHJvcGVydHkgaW5kaWNhdGVzICh0eXBpY2FsbHkgdmlhIFtbVVJMXV0pIGEgZG9jdW1lbnQgZGVzY3JpYmluZyB0aGUgZWRpdG9yaWFsIHByaW5jaXBsZXMgb2YgYW4gW1tPcmdhbml6YXRpb25dXSAob3IgaW5kaXZpZHVhbCBlLmcuIGEgW1tQZXJzb25dXSB3cml0aW5nIGEgYmxvZykgdGhhdCByZWxhdGUgdG8gdGhlaXIgYWN0aXZpdGllcyBhcyBhIHB1Ymxpc2hlciwgZS5nLiBldGhpY3Mgb3IgZGl2ZXJzaXR5IHBvbGljaWVzLiBXaGVuIGFwcGxpZWQgdG8gYSBbW0NyZWF0aXZlV29ya11dIChlLmcuIFtbTmV3c0FydGljbGVdXSkgdGhlIHByaW5jaXBsZXMgYXJlIHRob3NlIG9mIHRoZSBwYXJ0eSBwcmltYXJpbHkgcmVzcG9uc2libGUgZm9yIHRoZSBjcmVhdGlvbiBvZiB0aGUgW1tDcmVhdGl2ZVdvcmtdXS4KCldoaWxlIHN1Y2ggcG9saWNpZXMgYXJlIG1vc3QgdHlwaWNhbGx5IGV4cHJlc3NlZCBpbiBuYXR1cmFsIGxhbmd1YWdlLCBzb21ldGltZXMgcmVsYXRlZCBpbmZvcm1hdGlvbiAoZS5nLiBpbmRpY2F0aW5nIGEgW1tmdW5kZXJdXSkgY2FuIGJlIGV4cHJlc3NlZCB1c2luZyBzY2hlbWEub3JnIHRlcm1pbm9sb2d5LgprZGVzY3JpcHRpb254ZVRoZSBtb3N0IGdlbmVyaWMga2luZCBvZiBjcmVhdGl2ZSB3b3JrLCBpbmNsdWRpbmcgYm9va3MsIG1vdmllcywgcGhvdG9ncmFwaHMsIHNvZnR3YXJlIHByb2dyYW1zLCBldGMua2Rlc2NyaXB0aW9ueHpBIFdlYlNpdGUgaXMgYSBzZXQgb2YgcmVsYXRlZCB3ZWIgcGFnZXMgYW5kIG90aGVyIGl0ZW1zIHR5cGljYWxseSBzZXJ2ZWQgZnJvbSBhIHNpbmdsZSB3ZWIgZG9tYWluIGFuZCBhY2Nlc3NpYmxlIHZpYSBVUkxzLmZoZWFkZXKiZnVuaXF1ZXBrQitEUjBYeHVJZTh3Q21Xa2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1fry8i0nfl0htckxp7t1tyfeybg2ylnjn4oof86erz1sqgohj7262o0"},"kjzl6cwe1jw149zs3gugovi3dhno690jfz967bsjxyladxpe8mhnp000t991b2x":{"alias":"MusicAlbumReleaseType","commits":[{"jws":{"payload":"AXESILRrnLtf9wn7eGVgYgCD735d2Sce-jwLw4gB5GcE13qJ","signatures":[{"signature":"b9euA2ym2fMxbFol7wwrxovjPy2Un1WdUvxmjCj-zwOdmFmvyOotUXAXW_1va8895uk37iENsq7RuRSoq_SLDw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreifunoolwx7xbh5xqzlamiaih336lxmsohx2hqf4hcab4rtqjv32re"},"linkedBlock":"omRkYXRhpWR0eXBlZnN0cmluZ2VvbmVPZoSiZWNvbnN0bEFsYnVtUmVsZWFzZWtkZXNjcmlwdGlvbm1BbGJ1bVJlbGVhc2UuomVjb25zdHBCcm9hZGNhc3RSZWxlYXNla2Rlc2NyaXB0aW9ucUJyb2FkY2FzdFJlbGVhc2UuomVjb25zdGlFUFJlbGVhc2VrZGVzY3JpcHRpb25qRVBSZWxlYXNlLqJlY29uc3RtU2luZ2xlUmVsZWFzZWtkZXNjcmlwdGlvbm5TaW5nbGVSZWxlYXNlLmV0aXRsZXVNdXNpY0FsYnVtUmVsZWFzZVR5cGVnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEja2Rlc2NyaXB0aW9ueD1UaGUga2luZCBvZiByZWxlYXNlIHdoaWNoIHRoaXMgYWxidW0gaXM6IHNpbmdsZSwgRVAgb3IgYWxidW0uZmhlYWRlcqJmdW5pcXVlcHFlamN6RzRKWUI0b3piOUprY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1fryf2fsnsmow0nzxkbwg3u9mp843v1thzdv3ol9bxkhs05s1s9asqo"},"kjzl6cwe1jw148b8yag2uup6anq6gafk7szrkl8u3dln5yw81yravjv6qdk9vuo":{"alias":"Article","commits":[{"jws":{"payload":"AXESIElA7tXFcorql4izWuc3lWm49oekFPA3-N7OnxUrPs04","signatures":[{"signature":"4K2aVhGvbCuCY1PC3mmgOW1VGTAoaegIijSbR0rQmspNhNU6B9LRC5tnLKptLHm3fnMdK793ah-hGhZCgOsjCA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicjidxnlrlsrlvjpcftllttpfljxd3ipjau6a37rxwot4kswpwnha"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fry33znuacbeb0rsq5vu6nri6c2f2u00pwqg559z65cd9rvkg6ai2o"},"kjzl6cwe1jw148t68cugazlt58st5ip3palesohqb09euw0m661d2dawgkpemaj":{"alias":"SpeakableSpecification","commits":[{"jws":{"payload":"AXESID4dulRfmIDl-OpvesTE8vOR-FOj094RWRoWykS3vTeZ","signatures":[{"signature":"jKUmZJz2VAmrk_Sh61te_bsWAUkJ6bdP7mSZGZO3Zbq9wfD3GzQR2FiPLIj5WehDDVxek6IPPW2QSLuNnyeVDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreib6dw5fix4yqds7r2tpplcmj4xtsh4fhi6t3yivsgqwzjclppjxte"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxldlNwZWFrYWJsZVNwZWNpZmljYXRpb25nJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjanByb3BlcnRpZXOiZXhwYXRoomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnivQW4gWFBhdGgsIGUuZy4gb2YgYSBbW1NwZWFrYWJsZVNwZWNpZmljYXRpb25dXSBvciBbW1dlYlBhZ2VFbGVtZW50XV0uIEluIHRoZSBsYXR0ZXIgY2FzZSwgbXVsdGlwbGUgbWF0Y2hlcyB3aXRoaW4gYSBwYWdlIGNhbiBjb25zdGl0dXRlIGEgc2luZ2xlIGNvbmNlcHR1YWwgIldlYiBwYWdlIGVsZW1lbnQiLmtjc3NTZWxlY3RvcqJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254tUEgQ1NTIHNlbGVjdG9yLCBlLmcuIG9mIGEgW1tTcGVha2FibGVTcGVjaWZpY2F0aW9uXV0gb3IgW1tXZWJQYWdlRWxlbWVudF1dLiBJbiB0aGUgbGF0dGVyIGNhc2UsIG11bHRpcGxlIG1hdGNoZXMgd2l0aGluIGEgcGFnZSBjYW4gY29uc3RpdHV0ZSBhIHNpbmdsZSBjb25jZXB0dWFsICJXZWIgcGFnZSBlbGVtZW50Ii5rZGVmaW5pdGlvbnOiZVRoaW5npGR0eXBlZm9iamVjdGV0aXRsZWVUaGluZ2pwcm9wZXJ0aWVzrmN1cmyjZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb25wVVJMIG9mIHRoZSBpdGVtLmRuYW1lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnVUaGUgbmFtZSBvZiB0aGUgaXRlbS5lQHR5cGWhZHR5cGVmc3RyaW5nZWltYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb254UUFuIGltYWdlIG9mIHRoZSBpdGVtLiBUaGlzIGNhbiBiZSBhIFtbVVJMXV0gb3IgYSBmdWxseSBkZXNjcmliZWQgW1tJbWFnZU9iamVjdF1dLmZzYW1lQXOiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnidVVJMIG9mIGEgcmVmZXJlbmNlIFdlYiBwYWdlIHRoYXQgdW5hbWJpZ3VvdXNseSBpbmRpY2F0ZXMgdGhlIGl0ZW0ncyBpZGVudGl0eS4gRS5nLiB0aGUgVVJMIG9mIHRoZSBpdGVtJ3MgV2lraXBlZGlhIHBhZ2UsIFdpa2lkYXRhIGVudHJ5LCBvciBvZmZpY2lhbCB3ZWJzaXRlLmhAY29udGV4dKFkdHlwZWZzdHJpbmdpc3ViamVjdE9momVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueClBIENyZWF0aXZlV29yayBvciBFdmVudCBhYm91dCB0aGlzIFRoaW5nLmppZGVudGlmaWVyomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVla2Rlc2NyaXB0aW9ueQFJVGhlIGlkZW50aWZpZXIgcHJvcGVydHkgcmVwcmVzZW50cyBhbnkga2luZCBvZiBpZGVudGlmaWVyIGZvciBhbnkga2luZCBvZiBbW1RoaW5nXV0sIHN1Y2ggYXMgSVNCTnMsIEdUSU4gY29kZXMsIFVVSURzIGV0Yy4gU2NoZW1hLm9yZyBwcm92aWRlcyBkZWRpY2F0ZWQgcHJvcGVydGllcyBmb3IgcmVwcmVzZW50aW5nIG1hbnkgb2YgdGhlc2UsIGVpdGhlciBhcyB0ZXh0dWFsIHN0cmluZ3Mgb3IgYXMgVVJMIChVUkkpIGxpbmtzLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI2lkZW50aWZpZXJCZykgZm9yIG1vcmUgZGV0YWlscy4KICAgICAgICBrZGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueBpBIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtLm1hbHRlcm5hdGVOYW1lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnZBbiBhbGlhcyBmb3IgdGhlIGl0ZW0ubmFkZGl0aW9uYWxUeXBlomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb255AZ9BbiBhZGRpdGlvbmFsIHR5cGUgZm9yIHRoZSBpdGVtLCB0eXBpY2FsbHkgdXNlZCBmb3IgYWRkaW5nIG1vcmUgc3BlY2lmaWMgdHlwZXMgZnJvbSBleHRlcm5hbCB2b2NhYnVsYXJpZXMgaW4gbWljcm9kYXRhIHN5bnRheC4gVGhpcyBpcyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHNvbWV0aGluZyBhbmQgYSBjbGFzcyB0aGF0IHRoZSB0aGluZyBpcyBpbi4gSW4gUkRGYSBzeW50YXgsIGl0IGlzIGJldHRlciB0byB1c2UgdGhlIG5hdGl2ZSBSREZhIHN5bnRheCAtIHRoZSAndHlwZW9mJyBhdHRyaWJ1dGUgLSBmb3IgbXVsdGlwbGUgdHlwZXMuIFNjaGVtYS5vcmcgdG9vbHMgbWF5IGhhdmUgb25seSB3ZWFrZXIgdW5kZXJzdGFuZGluZyBvZiBleHRyYSB0eXBlcywgaW4gcGFydGljdWxhciB0aG9zZSBkZWZpbmVkIGV4dGVybmFsbHkub3BvdGVudGlhbEFjdGlvbqJlb25lT2aCoWQkcmVmbXNjaGVtYTpBY3Rpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOkFjdGlvbmtkZXNjcmlwdGlvbnhySW5kaWNhdGVzIGEgcG90ZW50aWFsIEFjdGlvbiwgd2hpY2ggZGVzY3JpYmVzIGFuIGlkZWFsaXplZCBhY3Rpb24gaW4gd2hpY2ggdGhpcyB0aGluZyB3b3VsZCBwbGF5IGFuICdvYmplY3QnIHJvbGUucG1haW5FbnRpdHlPZlBhZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueLBJbmRpY2F0ZXMgYSBwYWdlIChvciBvdGhlciBDcmVhdGl2ZVdvcmspIGZvciB3aGljaCB0aGlzIHRoaW5nIGlzIHRoZSBtYWluIGVudGl0eSBiZWluZyBkZXNjcmliZWQuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjbWFpbkVudGl0eUJhY2tncm91bmQpIGZvciBkZXRhaWxzLngZZGlzYW1iaWd1YXRpbmdEZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2547EEgc3ViIHByb3BlcnR5IG9mIGRlc2NyaXB0aW9uLiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGZyb20gb3RoZXIsIHNpbWlsYXIgaXRlbXMuIEluZm9ybWF0aW9uIGZyb20gb3RoZXIgcHJvcGVydGllcyAoaW4gcGFydGljdWxhciwgbmFtZSkgbWF5IGJlIG5lY2Vzc2FyeSBmb3IgdGhlIGRlc2NyaXB0aW9uIHRvIGJlIHVzZWZ1bCBmb3IgZGlzYW1iaWd1YXRpb24ua2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5qSW50YW5naWJsZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmcyMvZGVmaW5pdGlvbnMvVGhpbmdrZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmV0aXRsZWpJbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5rZGVzY3JpcHRpb254/EEgU3BlYWthYmxlU3BlY2lmaWNhdGlvbiBpbmRpY2F0ZXMgKHR5cGljYWxseSB2aWEgW1t4cGF0aF1dIG9yIFtbY3NzU2VsZWN0b3JdXSkgc2VjdGlvbnMgb2YgYSBkb2N1bWVudCB0aGF0IGFyZSBoaWdobGlnaHRlZCBhcyBwYXJ0aWN1bGFybHkgW1tzcGVha2FibGVdXS4gSW5zdGFuY2VzIG9mIHRoaXMgdHlwZSBhcmUgZXhwZWN0ZWQgdG8gYmUgdXNlZCBwcmltYXJpbHkgYXMgdmFsdWVzIG9mIHRoZSBbW3NwZWFrYWJsZV1dIHByb3BlcnR5LmZoZWFkZXKiZnVuaXF1ZXBGNFJ4NmFwcnh3MUI0V0E1a2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1fry6ngbfcjy5739akvb8yibvc97y6329uxnnodnuxowulitv8nyiv4"},"kjzl6cwe1jw149f39ovcryw69zqddgpqgyznwtguunkm7ge87h2jyd500si8sqf":{"alias":"EducationalOccupationalCredential","commits":[{"jws":{"payload":"AXESIIAB_cDPFTgIY_kdgpXTOtgDzvU1L4_VoLBLOkH6j-kP","signatures":[{"signature":"oW2Ue7ZNB6ZGVU2pbQmGi3AmReeUhPJl7BXXu-4DpDGIzVHPVS2lc631Eg58CzFCN8JVODE9OXG_a8CpYDSiCg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreieaah64btyvhaegh6i5qkk5gowyaphpknjpr7k2bmclhja7vd7jb4"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fryazb8wuyuw4sn23j3qv08otm1djvdzmlx0l6d5e5wdfk5mpqkbuo"},"kjzl6cwe1jw147cj76lkphnt83p0f5ljri0sqhtvecx911kf69gvl50olyi1mma":{"alias":"ProgramMembership","commits":[{"jws":{"payload":"AXESIF81cXVlN6rQLm3mWqHctHxEfS8A6ZgcEz7Pp26IuUwL","signatures":[{"signature":"SH1eHNoNtKYvWiY1yDYwlAipTYPrJYztoknUFQ-h08a5w7i6t0Lkv2PcrqUt4RJkDmnxz2IH0bW1zHQV-ML8Cg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreic7gvyxkzjxvlic43pglkq5znd4ir6s6ahjtaobgpwpu5xirokmbm"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlcVByb2dyYW1NZW1iZXJzaGlwZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzpmZtZW1iZXKiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbniSQSBtZW1iZXIgb2YgYW4gT3JnYW5pemF0aW9uIG9yIGEgUHJvZ3JhbU1lbWJlcnNoaXAuIE9yZ2FuaXphdGlvbnMgY2FuIGJlIG1lbWJlcnMgb2Ygb3JnYW5pemF0aW9uczsgUHJvZ3JhbU1lbWJlcnNoaXAgaXMgdHlwaWNhbGx5IGZvciBpbmRpdmlkdWFscy5nbWVtYmVyc6Jlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29uomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueB5BIG1lbWJlciBvZiB0aGlzIG9yZ2FuaXphdGlvbi5rcHJvZ3JhbU5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueCVUaGUgcHJvZ3JhbSBwcm92aWRpbmcgdGhlIG1lbWJlcnNoaXAucG1lbWJlcnNoaXBOdW1iZXKiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueCdBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgbWVtYmVyc2hpcC5zaG9zdGluZ09yZ2FuaXphdGlvbqJkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9ua2Rlc2NyaXB0aW9ueE5UaGUgb3JnYW5pemF0aW9uIChhaXJsaW5lLCB0cmF2ZWxlcnMnIGNsdWIsIGV0Yy4pIHRoZSBtZW1iZXJzaGlwIGlzIG1hZGUgd2l0aC52bWVtYmVyc2hpcFBvaW50c0Vhcm5lZKJlYW55T2aCoWR0eXBlZm51bWJlcqFkJHJlZngYc2NoZW1hOlF1YW50aXRhdGl2ZVZhbHVla2Rlc2NyaXB0aW9ueKVUaGUgbnVtYmVyIG9mIG1lbWJlcnNoaXAgcG9pbnRzIGVhcm5lZCBieSB0aGUgbWVtYmVyLiBJZiBuZWNlc3NhcnksIHRoZSB1bml0VGV4dCBjYW4gYmUgdXNlZCB0byBleHByZXNzIHRoZSB1bml0cyB0aGUgcG9pbnRzIGFyZSBpc3N1ZWQgaW4uIChlLmcuIHN0YXJzLCBtaWxlcywgZXRjLilrZGVmaW5pdGlvbnOiZVRoaW5npGR0eXBlZm9iamVjdGV0aXRsZWVUaGluZ2pwcm9wZXJ0aWVzrmN1cmyjZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb25wVVJMIG9mIHRoZSBpdGVtLmRuYW1lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnVUaGUgbmFtZSBvZiB0aGUgaXRlbS5lQHR5cGWhZHR5cGVmc3RyaW5nZWltYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb254UUFuIGltYWdlIG9mIHRoZSBpdGVtLiBUaGlzIGNhbiBiZSBhIFtbVVJMXV0gb3IgYSBmdWxseSBkZXNjcmliZWQgW1tJbWFnZU9iamVjdF1dLmZzYW1lQXOiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnidVVJMIG9mIGEgcmVmZXJlbmNlIFdlYiBwYWdlIHRoYXQgdW5hbWJpZ3VvdXNseSBpbmRpY2F0ZXMgdGhlIGl0ZW0ncyBpZGVudGl0eS4gRS5nLiB0aGUgVVJMIG9mIHRoZSBpdGVtJ3MgV2lraXBlZGlhIHBhZ2UsIFdpa2lkYXRhIGVudHJ5LCBvciBvZmZpY2lhbCB3ZWJzaXRlLmhAY29udGV4dKFkdHlwZWZzdHJpbmdpc3ViamVjdE9momVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueClBIENyZWF0aXZlV29yayBvciBFdmVudCBhYm91dCB0aGlzIFRoaW5nLmppZGVudGlmaWVyomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVla2Rlc2NyaXB0aW9ueQFJVGhlIGlkZW50aWZpZXIgcHJvcGVydHkgcmVwcmVzZW50cyBhbnkga2luZCBvZiBpZGVudGlmaWVyIGZvciBhbnkga2luZCBvZiBbW1RoaW5nXV0sIHN1Y2ggYXMgSVNCTnMsIEdUSU4gY29kZXMsIFVVSURzIGV0Yy4gU2NoZW1hLm9yZyBwcm92aWRlcyBkZWRpY2F0ZWQgcHJvcGVydGllcyBmb3IgcmVwcmVzZW50aW5nIG1hbnkgb2YgdGhlc2UsIGVpdGhlciBhcyB0ZXh0dWFsIHN0cmluZ3Mgb3IgYXMgVVJMIChVUkkpIGxpbmtzLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI2lkZW50aWZpZXJCZykgZm9yIG1vcmUgZGV0YWlscy4KICAgICAgICBrZGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueBpBIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtLm1hbHRlcm5hdGVOYW1lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnZBbiBhbGlhcyBmb3IgdGhlIGl0ZW0ubmFkZGl0aW9uYWxUeXBlomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb255AZ9BbiBhZGRpdGlvbmFsIHR5cGUgZm9yIHRoZSBpdGVtLCB0eXBpY2FsbHkgdXNlZCBmb3IgYWRkaW5nIG1vcmUgc3BlY2lmaWMgdHlwZXMgZnJvbSBleHRlcm5hbCB2b2NhYnVsYXJpZXMgaW4gbWljcm9kYXRhIHN5bnRheC4gVGhpcyBpcyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHNvbWV0aGluZyBhbmQgYSBjbGFzcyB0aGF0IHRoZSB0aGluZyBpcyBpbi4gSW4gUkRGYSBzeW50YXgsIGl0IGlzIGJldHRlciB0byB1c2UgdGhlIG5hdGl2ZSBSREZhIHN5bnRheCAtIHRoZSAndHlwZW9mJyBhdHRyaWJ1dGUgLSBmb3IgbXVsdGlwbGUgdHlwZXMuIFNjaGVtYS5vcmcgdG9vbHMgbWF5IGhhdmUgb25seSB3ZWFrZXIgdW5kZXJzdGFuZGluZyBvZiBleHRyYSB0eXBlcywgaW4gcGFydGljdWxhciB0aG9zZSBkZWZpbmVkIGV4dGVybmFsbHkub3BvdGVudGlhbEFjdGlvbqJlb25lT2aCoWQkcmVmbXNjaGVtYTpBY3Rpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOkFjdGlvbmtkZXNjcmlwdGlvbnhySW5kaWNhdGVzIGEgcG90ZW50aWFsIEFjdGlvbiwgd2hpY2ggZGVzY3JpYmVzIGFuIGlkZWFsaXplZCBhY3Rpb24gaW4gd2hpY2ggdGhpcyB0aGluZyB3b3VsZCBwbGF5IGFuICdvYmplY3QnIHJvbGUucG1haW5FbnRpdHlPZlBhZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueLBJbmRpY2F0ZXMgYSBwYWdlIChvciBvdGhlciBDcmVhdGl2ZVdvcmspIGZvciB3aGljaCB0aGlzIHRoaW5nIGlzIHRoZSBtYWluIGVudGl0eSBiZWluZyBkZXNjcmliZWQuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjbWFpbkVudGl0eUJhY2tncm91bmQpIGZvciBkZXRhaWxzLngZZGlzYW1iaWd1YXRpbmdEZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2547EEgc3ViIHByb3BlcnR5IG9mIGRlc2NyaXB0aW9uLiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGZyb20gb3RoZXIsIHNpbWlsYXIgaXRlbXMuIEluZm9ybWF0aW9uIGZyb20gb3RoZXIgcHJvcGVydGllcyAoaW4gcGFydGljdWxhciwgbmFtZSkgbWF5IGJlIG5lY2Vzc2FyeSBmb3IgdGhlIGRlc2NyaXB0aW9uIHRvIGJlIHVzZWZ1bCBmb3IgZGlzYW1iaWd1YXRpb24ua2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5qSW50YW5naWJsZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmcyMvZGVmaW5pdGlvbnMvVGhpbmdrZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmV0aXRsZWpJbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5rZGVzY3JpcHRpb254ilVzZWQgdG8gZGVzY3JpYmUgbWVtYmVyc2hpcCBpbiBhIGxveWFsdHkgcHJvZ3JhbXMgKGUuZy4gIlN0YXJBbGlhbmNlIiksIHRyYXZlbGVyIGNsdWJzIChlLmcuICJBQUEiKSwgcHVyY2hhc2UgY2x1YnMgKCJTYWZld2F5IENsdWIiKSwgZXRjLmZoZWFkZXKiZnVuaXF1ZXBWeS9QMDZlZzdhZ0QwZkxaa2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frxw94j2xf99lbtm9uzrt8jk5ocesfa3wg7f57wjc0mbov05cbkuf4"},"kjzl6cwe1jw1478j20385ky9k34pjvm8ednn7ihgn5rwh44ksgu4hdwtk0z6adx":{"alias":"NonprofitType","commits":[{"jws":{"payload":"AXESIPyZfA95PTvfAhwmp8_ou3GzioZvC4Y5bdheb1xibgCu","signatures":[{"signature":"eRSxVeuguWgmZLtdXPOs_NSbprrich_TFK1reOEH_lP3UcvayItoAIlb9I3pCCNGE626EBeq84sXr_rE1wY1Cg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreih4tf6a66j5hppqehbgu7h6ro3rwofim3ylqy4w3wc6n5oge3qavy"},"linkedBlock":"omRkYXRhpGR0eXBlZm9iamVjdGV0aXRsZW1Ob25wcm9maXRUeXBlZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2tkZXNjcmlwdGlvbnhuTm9ucHJvZml0VHlwZSBlbnVtZXJhdGVzIHNldmVyYWwga2luZHMgb2Ygb2ZmaWNpYWwgbm9uLXByb2ZpdCB0eXBlcyBvZiB3aGljaCBhIG5vbi1wcm9maXQgb3JnYW5pemF0aW9uIGNhbiBiZS5maGVhZGVyomZ1bmlxdWVwVzI1WkFqc1FiVSsyM2VUeGtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frxvgni8mxzoznyu9hpcu3q9451fg6cp2expcjufq7vmxe6ey4puyo"},"kjzl6cwe1jw14a0pwmdooeh9mxsy0ao9dinecozxc56bimog2j8u9hoz8p06td3":{"alias":"AboutPage","commits":[{"jws":{"payload":"AXESIEO88go8dyf1MTlwQt7WDwKSIjxdL2-T_Y_XnSJZP2-S","signatures":[{"signature":"_Aov5EhExTmFc4HOFEt4rZWTorZq-V-OCBQ7BO01i__Jebz24I0Q5Zoz9WBZgYlGAn1OyaLcmLdocFw8-ytgAg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicdxtzaupdxe72tcolqilpnmdycsirdyxjpn6j73d6xturfsp3psi"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1fryf947z5bhiysj4dtu3wio4me29rh2csxwh9ua0uv7htmlttcgt1c"},"kjzl6cwe1jw146q0hkg1tr8nb7mvl5ihair3w91hns9uovnxtvxxu0peu1sdy5w":{"alias":"Specialty","commits":[{"jws":{"payload":"AXESIDgHq0RPx9LiySj1wy5COlZsvqkrCdgWdk4yro3eraTL","signatures":[{"signature":"cOye6aY1en5tL7dZVdfNmLbi6RoU3drPbE-QoGhKKUQpiz6JtjZWqdkeGIo1vH2RznM7CXJSh14hlZOLCtLoAQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreibya6vuit6h2lrmskhvymxeeoswns7kskyj3alhmtrsv2g55lnezm"},"linkedBlock":"omRkYXRhpGR0eXBlZm9iamVjdGV0aXRsZWlTcGVjaWFsdHlnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEja2Rlc2NyaXB0aW9ueH5BbnkgYnJhbmNoIG9mIGEgZmllbGQgaW4gd2hpY2ggcGVvcGxlIHR5cGljYWxseSBkZXZlbG9wIHNwZWNpZmljIGV4cGVydGlzZSwgdXN1YWxseSBhZnRlciBzaWduaWZpY2FudCBzdHVkeSwgdGltZSwgYW5kIGVmZm9ydC5maGVhZGVyomZ1bmlxdWVwcHUwRU5pVHJhbWJ6Q1E2Nmtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frxrszgxe4zlphrqaomf7eytcrpcall5228x68kj5clh0phopv6xvk"},"kjzl6cwe1jw14931oxjsnzwinv111qq3vt25cjruhv4zz400d37oa1w00en0sqf":{"alias":"OwnershipInfo","commits":[{"jws":{"payload":"AXESIPYEvbgzF1Q_fxn7dU_lqO6emzaI1K0J4gKwU2RwhfG5","signatures":[{"signature":"cFPBSlVBEmV8A3_iv3SyGDQhbPlm6o9tBuGNcZ7ZgRcwyd05SkIv7Tbr3lch0pvAzcICJIb3as_o3H73svpMDw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihwas63qmyxkq7x6gp3ovh6lkhot2ntncguvue6eavqknshbbprxe"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4HSMvZGVmaW5pdGlvbnMvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcuZXRpdGxlbU93bmVyc2hpcEluZm9nJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjanByb3BlcnRpZXOkaW93bmVkRnJvbaNkdHlwZWZzdHJpbmdmZm9ybWF0aWRhdGUtdGltZWtkZXNjcmlwdGlvbngrVGhlIGRhdGUgYW5kIHRpbWUgb2Ygb2J0YWluaW5nIHRoZSBwcm9kdWN0Lmp0eXBlT2ZHb29komVhbnlPZoKhZCRyZWZuc2NoZW1hOlByb2R1Y3ShZCRyZWZuc2NoZW1hOlNlcnZpY2VrZGVzY3JpcHRpb254N1RoZSBwcm9kdWN0IHRoYXQgdGhpcyBzdHJ1Y3R1cmVkIHZhbHVlIGlzIHJlZmVycmluZyB0by5sYWNxdWlyZWRGcm9tomVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueD9UaGUgb3JnYW5pemF0aW9uIG9yIHBlcnNvbiBmcm9tIHdoaWNoIHRoZSBwcm9kdWN0IHdhcyBhY3F1aXJlZC5sb3duZWRUaHJvdWdoo2R0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1la2Rlc2NyaXB0aW9ueDhUaGUgZGF0ZSBhbmQgdGltZSBvZiBnaXZpbmcgdXAgb3duZXJzaGlwIG9uIHRoZSBwcm9kdWN0LmtkZWZpbml0aW9uc6NlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLm9TdHJ1Y3R1cmVkVmFsdWWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZngYIy9kZWZpbml0aW9ucy9JbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5ldGl0bGVvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcua2Rlc2NyaXB0aW9ueG1BIHN0cnVjdHVyZWQgdmFsdWUgcHJvdmlkaW5nIGluZm9ybWF0aW9uIGFib3V0IHdoZW4gYSBjZXJ0YWluIG9yZ2FuaXphdGlvbiBvciBwZXJzb24gb3duZWQgYSBjZXJ0YWluIHByb2R1Y3QuZmhlYWRlcqJmdW5pcXVlcFRZMTRTVUFSSlpPdTdhVEhrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1fry8lo1akrunb8ponbge1nm6na18m0v1fjtog2l2uknhfk2w3pobuo"},"kjzl6cwe1jw14atx3nrpjiky46kmvtsf8507ija88o030bu0jgr2k6iffe7gbib":{"alias":"MusicPlaylist","commits":[{"jws":{"payload":"AXESIOywwitFHckbgBZKPbZHr0Q9DGedmxfVnRAZVOji_A8r","signatures":[{"signature":"Te2rkLX4Yb8FUS_azKf1ckaVKTFSFJ5wa5IrEUx4hVFXgsdjX8NDF4a9JQ8RtpdO4wAQMmerYiiT3d3XMezQBw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihmwdbcwri5zenyafskhw3epl2ehuggphm3c7kz2eazktuof7apfm"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GiMvZGVmaW5pdGlvbnMvQ3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueGVUaGUgbW9zdCBnZW5lcmljIGtpbmQgb2YgY3JlYXRpdmUgd29yaywgaW5jbHVkaW5nIGJvb2tzLCBtb3ZpZXMsIHBob3RvZ3JhcGhzLCBzb2Z0d2FyZSBwcm9ncmFtcywgZXRjLmV0aXRsZW1NdXNpY1BsYXlsaXN0ZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzo2V0cmFja6Jlb25lT2aCoWVhbnlPZoKhZCRyZWZvc2NoZW1hOkl0ZW1MaXN0oWQkcmVmdXNjaGVtYTpNdXNpY1JlY29yZGluZ6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmb3NjaGVtYTpJdGVtTGlzdKFkJHJlZnVzY2hlbWE6TXVzaWNSZWNvcmRpbmdrZGVzY3JpcHRpb254gUEgbXVzaWMgcmVjb3JkaW5nICh0cmFjaynigJR1c3VhbGx5IGEgc2luZ2xlIHNvbmcuIElmIGFuIEl0ZW1MaXN0IGlzIGdpdmVuLCB0aGUgbGlzdCBzaG91bGQgY29udGFpbiBpdGVtcyBvZiB0eXBlIE11c2ljUmVjb3JkaW5nLmZ0cmFja3OiZW9uZU9mgqFkJHJlZnVzY2hlbWE6TXVzaWNSZWNvcmRpbmeiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ1c2NoZW1hOk11c2ljUmVjb3JkaW5na2Rlc2NyaXB0aW9ueDJBIG11c2ljIHJlY29yZGluZyAodHJhY2sp4oCUdXN1YWxseSBhIHNpbmdsZSBzb25nLmludW1UcmFja3OiZHR5cGVnaW50ZWdlcmtkZXNjcmlwdGlvbngvVGhlIG51bWJlciBvZiB0cmFja3MgaW4gdGhpcyBhbGJ1bSBvciBwbGF5bGlzdC5rZGVmaW5pdGlvbnOiZVRoaW5npGR0eXBlZm9iamVjdGV0aXRsZWVUaGluZ2pwcm9wZXJ0aWVzrmN1cmyjZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb25wVVJMIG9mIHRoZSBpdGVtLmRuYW1lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnVUaGUgbmFtZSBvZiB0aGUgaXRlbS5lQHR5cGWhZHR5cGVmc3RyaW5nZWltYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb254UUFuIGltYWdlIG9mIHRoZSBpdGVtLiBUaGlzIGNhbiBiZSBhIFtbVVJMXV0gb3IgYSBmdWxseSBkZXNjcmliZWQgW1tJbWFnZU9iamVjdF1dLmZzYW1lQXOiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnidVVJMIG9mIGEgcmVmZXJlbmNlIFdlYiBwYWdlIHRoYXQgdW5hbWJpZ3VvdXNseSBpbmRpY2F0ZXMgdGhlIGl0ZW0ncyBpZGVudGl0eS4gRS5nLiB0aGUgVVJMIG9mIHRoZSBpdGVtJ3MgV2lraXBlZGlhIHBhZ2UsIFdpa2lkYXRhIGVudHJ5LCBvciBvZmZpY2lhbCB3ZWJzaXRlLmhAY29udGV4dKFkdHlwZWZzdHJpbmdpc3ViamVjdE9momVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueClBIENyZWF0aXZlV29yayBvciBFdmVudCBhYm91dCB0aGlzIFRoaW5nLmppZGVudGlmaWVyomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVla2Rlc2NyaXB0aW9ueQFJVGhlIGlkZW50aWZpZXIgcHJvcGVydHkgcmVwcmVzZW50cyBhbnkga2luZCBvZiBpZGVudGlmaWVyIGZvciBhbnkga2luZCBvZiBbW1RoaW5nXV0sIHN1Y2ggYXMgSVNCTnMsIEdUSU4gY29kZXMsIFVVSURzIGV0Yy4gU2NoZW1hLm9yZyBwcm92aWRlcyBkZWRpY2F0ZWQgcHJvcGVydGllcyBmb3IgcmVwcmVzZW50aW5nIG1hbnkgb2YgdGhlc2UsIGVpdGhlciBhcyB0ZXh0dWFsIHN0cmluZ3Mgb3IgYXMgVVJMIChVUkkpIGxpbmtzLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI2lkZW50aWZpZXJCZykgZm9yIG1vcmUgZGV0YWlscy4KICAgICAgICBrZGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueBpBIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtLm1hbHRlcm5hdGVOYW1lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnZBbiBhbGlhcyBmb3IgdGhlIGl0ZW0ubmFkZGl0aW9uYWxUeXBlomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb255AZ9BbiBhZGRpdGlvbmFsIHR5cGUgZm9yIHRoZSBpdGVtLCB0eXBpY2FsbHkgdXNlZCBmb3IgYWRkaW5nIG1vcmUgc3BlY2lmaWMgdHlwZXMgZnJvbSBleHRlcm5hbCB2b2NhYnVsYXJpZXMgaW4gbWljcm9kYXRhIHN5bnRheC4gVGhpcyBpcyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHNvbWV0aGluZyBhbmQgYSBjbGFzcyB0aGF0IHRoZSB0aGluZyBpcyBpbi4gSW4gUkRGYSBzeW50YXgsIGl0IGlzIGJldHRlciB0byB1c2UgdGhlIG5hdGl2ZSBSREZhIHN5bnRheCAtIHRoZSAndHlwZW9mJyBhdHRyaWJ1dGUgLSBmb3IgbXVsdGlwbGUgdHlwZXMuIFNjaGVtYS5vcmcgdG9vbHMgbWF5IGhhdmUgb25seSB3ZWFrZXIgdW5kZXJzdGFuZGluZyBvZiBleHRyYSB0eXBlcywgaW4gcGFydGljdWxhciB0aG9zZSBkZWZpbmVkIGV4dGVybmFsbHkub3BvdGVudGlhbEFjdGlvbqJlb25lT2aCoWQkcmVmbXNjaGVtYTpBY3Rpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOkFjdGlvbmtkZXNjcmlwdGlvbnhySW5kaWNhdGVzIGEgcG90ZW50aWFsIEFjdGlvbiwgd2hpY2ggZGVzY3JpYmVzIGFuIGlkZWFsaXplZCBhY3Rpb24gaW4gd2hpY2ggdGhpcyB0aGluZyB3b3VsZCBwbGF5IGFuICdvYmplY3QnIHJvbGUucG1haW5FbnRpdHlPZlBhZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueLBJbmRpY2F0ZXMgYSBwYWdlIChvciBvdGhlciBDcmVhdGl2ZVdvcmspIGZvciB3aGljaCB0aGlzIHRoaW5nIGlzIHRoZSBtYWluIGVudGl0eSBiZWluZyBkZXNjcmliZWQuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjbWFpbkVudGl0eUJhY2tncm91bmQpIGZvciBkZXRhaWxzLngZZGlzYW1iaWd1YXRpbmdEZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2547EEgc3ViIHByb3BlcnR5IG9mIGRlc2NyaXB0aW9uLiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGZyb20gb3RoZXIsIHNpbWlsYXIgaXRlbXMuIEluZm9ybWF0aW9uIGZyb20gb3RoZXIgcHJvcGVydGllcyAoaW4gcGFydGljdWxhciwgbmFtZSkgbWF5IGJlIG5lY2Vzc2FyeSBmb3IgdGhlIGRlc2NyaXB0aW9uIHRvIGJlIHVzZWZ1bCBmb3IgZGlzYW1iaWd1YXRpb24ua2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5sQ3JlYXRpdmVXb3JrpWR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlbENyZWF0aXZlV29ya2pwcm9wZXJ0aWVzuG9kc2l6ZaJlb25lT2aCoWVhbnlPZoShZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybaFkJHJlZngYc2NoZW1hOlF1YW50aXRhdGl2ZVZhbHVloWQkcmVmeBhzY2hlbWE6U2l6ZVNwZWNpZmljYXRpb26iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mhKFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJtoWQkcmVmeBhzY2hlbWE6UXVhbnRpdGF0aXZlVmFsdWWhZCRyZWZ4GHNjaGVtYTpTaXplU3BlY2lmaWNhdGlvbmtkZXNjcmlwdGlvbnkBSUEgc3RhbmRhcmRpemVkIHNpemUgb2YgYSBwcm9kdWN0IG9yIGNyZWF0aXZlIHdvcmssIHNwZWNpZmllZCBlaXRoZXIgdGhyb3VnaCBhIHNpbXBsZSB0ZXh0dWFsIHN0cmluZyAoZm9yIGV4YW1wbGUgJ1hMJywgJzMyV3gzNEwnKSwgYSAgUXVhbnRpdGF0aXZlVmFsdWUgd2l0aCBhIHVuaXRDb2RlLCBvciBhIGNvbXByZWhlbnNpdmUgYW5kIHN0cnVjdHVyZWQgW1tTaXplU3BlY2lmaWNhdGlvbl1dOyBpbiBvdGhlciBjYXNlcywgdGhlIFtbd2lkdGhdXSwgW1toZWlnaHRdXSwgW1tkZXB0aF1dIGFuZCBbW3dlaWdodF1dIHByb3BlcnRpZXMgbWF5IGJlIG1vcmUgYXBwbGljYWJsZS4gZHRleHSiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueClUaGUgdGV4dHVhbCBjb250ZW50IG9mIHRoaXMgQ3JlYXRpdmVXb3JrLmVhYm91dKJkJHJlZmxzY2hlbWE6VGhpbmdrZGVzY3JpcHRpb254IlRoZSBzdWJqZWN0IG1hdHRlciBvZiB0aGUgY29udGVudC5lYXVkaW+iZW9uZU9mgqFlYW55T2aDoWQkcmVmcnNjaGVtYTpBdWRpb09iamVjdKFkJHJlZmtzY2hlbWE6Q2xpcKFkJHJlZnVzY2hlbWE6TXVzaWNSZWNvcmRpbmeiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mg6FkJHJlZnJzY2hlbWE6QXVkaW9PYmplY3ShZCRyZWZrc2NoZW1hOkNsaXChZCRyZWZ1c2NoZW1hOk11c2ljUmVjb3JkaW5na2Rlc2NyaXB0aW9ueBlBbiBlbWJlZGRlZCBhdWRpbyBvYmplY3QuZWF3YXJkomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnghQW4gYXdhcmQgd29uIGJ5IG9yIGZvciB0aGlzIGl0ZW0uZWdlbnJlomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueDdHZW5yZSBvZiB0aGUgY3JlYXRpdmUgd29yaywgYnJvYWRjYXN0IGNoYW5uZWwgb3IgZ3JvdXAuZXZpZGVvomVvbmVPZoKhZWFueU9mgqFkJHJlZmtzY2hlbWE6Q2xpcKFkJHJlZnJzY2hlbWE6VmlkZW9PYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZmtzY2hlbWE6Q2xpcKFkJHJlZnJzY2hlbWE6VmlkZW9PYmplY3RrZGVzY3JpcHRpb254GUFuIGVtYmVkZGVkIHZpZGVvIG9iamVjdC5mYXV0aG9yomVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueNtUaGUgYXV0aG9yIG9mIHRoaXMgY29udGVudCBvciByYXRpbmcuIFBsZWFzZSBub3RlIHRoYXQgYXV0aG9yIGlzIHNwZWNpYWwgaW4gdGhhdCBIVE1MIDUgcHJvdmlkZXMgYSBzcGVjaWFsIG1lY2hhbmlzbSBmb3IgaW5kaWNhdGluZyBhdXRob3JzaGlwIHZpYSB0aGUgcmVsIHRhZy4gVGhhdCBpcyBlcXVpdmFsZW50IHRvIHRoaXMgYW5kIG1heSBiZSB1c2VkIGludGVyY2hhbmdlYWJseS5mYXdhcmRzomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngfQXdhcmRzIHdvbiBieSBvciBmb3IgdGhpcyBpdGVtLmZlZGl0b3KiZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbngxU3BlY2lmaWVzIHRoZSBQZXJzb24gd2hvIGVkaXRlZCB0aGUgQ3JlYXRpdmVXb3JrLmZmdW5kZXKiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnhoQSBwZXJzb24gb3Igb3JnYW5pemF0aW9uIHRoYXQgc3VwcG9ydHMgKHNwb25zb3JzKSBzb21ldGhpbmcgdGhyb3VnaCBzb21lIGtpbmQgb2YgZmluYW5jaWFsIGNvbnRyaWJ1dGlvbi5mb2ZmZXJzomVvbmVPZoKhZWFueU9mgqFkJHJlZm1zY2hlbWE6RGVtYW5koWQkcmVmbHNjaGVtYTpPZmZlcqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmbXNjaGVtYTpEZW1hbmShZCRyZWZsc2NoZW1hOk9mZmVya2Rlc2NyaXB0aW9ueQIFQW4gb2ZmZXIgdG8gcHJvdmlkZSB0aGlzIGl0ZW3igJRmb3IgZXhhbXBsZSwgYW4gb2ZmZXIgdG8gc2VsbCBhIHByb2R1Y3QsIHJlbnQgdGhlIERWRCBvZiBhIG1vdmllLCBwZXJmb3JtIGEgc2VydmljZSwgb3IgZ2l2ZSBhd2F5IHRpY2tldHMgdG8gYW4gZXZlbnQuIFVzZSBbW2J1c2luZXNzRnVuY3Rpb25dXSB0byBpbmRpY2F0ZSB0aGUga2luZCBvZiB0cmFuc2FjdGlvbiBvZmZlcmVkLCBpLmUuIHNlbGwsIGxlYXNlLCBldGMuIFRoaXMgcHJvcGVydHkgY2FuIGFsc28gYmUgdXNlZCB0byBkZXNjcmliZSBhIFtbRGVtYW5kXV0uIFdoaWxlIHRoaXMgcHJvcGVydHkgaXMgbGlzdGVkIGFzIGV4cGVjdGVkIG9uIGEgbnVtYmVyIG9mIGNvbW1vbiB0eXBlcywgaXQgY2FuIGJlIHVzZWQgaW4gb3RoZXJzLiBJbiB0aGF0IGNhc2UsIHVzaW5nIGEgc2Vjb25kIHR5cGUsIHN1Y2ggYXMgUHJvZHVjdCBvciBhIHN1YnR5cGUgb2YgUHJvZHVjdCwgY2FuIGNsYXJpZnkgdGhlIG5hdHVyZSBvZiB0aGUgb2ZmZXIuCiAgICAgIGZyZXZpZXeiZW9uZU9mgqFkJHJlZm1zY2hlbWE6UmV2aWV3omR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpSZXZpZXdrZGVzY3JpcHRpb251QSByZXZpZXcgb2YgdGhlIGl0ZW0uZ2NvbW1lbnSiZW9uZU9mgqFkJHJlZm5zY2hlbWE6Q29tbWVudKJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm5zY2hlbWE6Q29tbWVudGtkZXNjcmlwdGlvbngfQ29tbWVudHMsIHR5cGljYWxseSBmcm9tIHVzZXJzLmdjcmVhdG9yomVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueGJUaGUgY3JlYXRvci9hdXRob3Igb2YgdGhpcyBDcmVhdGl2ZVdvcmsuIFRoaXMgaXMgdGhlIHNhbWUgYXMgdGhlIEF1dGhvciBwcm9wZXJ0eSBmb3IgQ3JlYXRpdmVXb3JrLmdleHBpcmVzo2R0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZWtkZXNjcmlwdGlvbnkBL0RhdGUgdGhlIGNvbnRlbnQgZXhwaXJlcyBhbmQgaXMgbm8gbG9uZ2VyIHVzZWZ1bCBvciBhdmFpbGFibGUuIEZvciBleGFtcGxlIGEgW1tWaWRlb09iamVjdF1dIG9yIFtbTmV3c0FydGljbGVdXSB3aG9zZSBhdmFpbGFiaWxpdHkgb3IgcmVsZXZhbmNlIGlzIHRpbWUtbGltaXRlZCwgb3IgYSBbW0NsYWltUmV2aWV3XV0gZmFjdCBjaGVjayB3aG9zZSBwdWJsaXNoZXIgd2FudHMgdG8gaW5kaWNhdGUgdGhhdCBpdCBtYXkgbm8gbG9uZ2VyIGJlIHJlbGV2YW50IChvciBoZWxwZnVsIHRvIGhpZ2hsaWdodCkgYWZ0ZXIgc29tZSBkYXRlLmdoYXNQYXJ0omVvbmVPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueF1JbmRpY2F0ZXMgYW4gaXRlbSBvciBDcmVhdGl2ZVdvcmsgdGhhdCBpcyBwYXJ0IG9mIHRoaXMgaXRlbSwgb3IgQ3JlYXRpdmVXb3JrIChpbiBzb21lIHNlbnNlKS5nbGljZW5zZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254TEEgbGljZW5zZSBkb2N1bWVudCB0aGF0IGFwcGxpZXMgdG8gdGhpcyBjb250ZW50LCB0eXBpY2FsbHkgaW5kaWNhdGVkIGJ5IFVSTC5ncGF0dGVybqJlb25lT2aCoWVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybaJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm1rZGVzY3JpcHRpb254uUEgcGF0dGVybiB0aGF0IHNvbWV0aGluZyBoYXMsIGZvciBleGFtcGxlICdwb2xrYSBkb3QnLCAnc3RyaXBlZCcsICdDYW5hZGlhbiBmbGFnJy4gVmFsdWVzIGFyZSB0eXBpY2FsbHkgZXhwcmVzc2VkIGFzIHRleHQsIGFsdGhvdWdoIGxpbmtzIHRvIGNvbnRyb2xsZWQgdmFsdWUgc2NoZW1lcyBhcmUgYWxzbyBzdXBwb3J0ZWQuZ3Jldmlld3OiZW9uZU9mgqFkJHJlZm1zY2hlbWE6UmV2aWV3omR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbXNjaGVtYTpSZXZpZXdrZGVzY3JpcHRpb25zUmV2aWV3IG9mIHRoZSBpdGVtLmdzcGF0aWFsomQkcmVmbHNjaGVtYTpQbGFjZWtkZXNjcmlwdGlvbnivVGhlICJzcGF0aWFsIiBwcm9wZXJ0eSBjYW4gYmUgdXNlZCBpbiBjYXNlcyB3aGVuIG1vcmUgc3BlY2lmaWMgcHJvcGVydGllcwooZS5nLiBbW2xvY2F0aW9uQ3JlYXRlZF1dLCBbW3NwYXRpYWxDb3ZlcmFnZV1dLCBbW2NvbnRlbnRMb2NhdGlvbl1dKSBhcmUgbm90IGtub3duIHRvIGJlIGFwcHJvcHJpYXRlLmdzcG9uc29yomVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb26iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9uoWQkcmVmbXNjaGVtYTpQZXJzb25rZGVzY3JpcHRpb254qkEgcGVyc29uIG9yIG9yZ2FuaXphdGlvbiB0aGF0IHN1cHBvcnRzIGEgdGhpbmcgdGhyb3VnaCBhIHBsZWRnZSwgcHJvbWlzZSwgb3IgZmluYW5jaWFsIGNvbnRyaWJ1dGlvbi4gZS5nLiBhIHNwb25zb3Igb2YgYSBNZWRpY2FsIFN0dWR5IG9yIGEgY29ycG9yYXRlIHNwb25zb3Igb2YgYW4gZXZlbnQuZ3RlYWNoZXOiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueH5UaGUgaXRlbSBiZWluZyBkZXNjcmliZWQgaXMgaW50ZW5kZWQgdG8gaGVscCBhIHBlcnNvbiBsZWFybiB0aGUgY29tcGV0ZW5jeSBvciBsZWFybmluZyBvdXRjb21lIGRlZmluZWQgYnkgdGhlIHJlZmVyZW5jZWQgdGVybS5ndmVyc2lvbqJlYW55T2aCoWR0eXBlZm51bWJlcqFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254QVRoZSB2ZXJzaW9uIG9mIHRoZSBDcmVhdGl2ZVdvcmsgZW1ib2RpZWQgYnkgYSBzcGVjaWZpZWQgcmVzb3VyY2UuaGFic3RyYWN0omVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnhGQW4gYWJzdHJhY3QgaXMgYSBzaG9ydCBkZXNjcmlwdGlvbiB0aGF0IHN1bW1hcml6ZXMgYSBbW0NyZWF0aXZlV29ya11dLmhhc3Nlc3Nlc6JlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm1rZGVzY3JpcHRpb254cVRoZSBpdGVtIGJlaW5nIGRlc2NyaWJlZCBpcyBpbnRlbmRlZCB0byBhc3Nlc3MgdGhlIGNvbXBldGVuY3kgb3IgbGVhcm5pbmcgb3V0Y29tZSBkZWZpbmVkIGJ5IHRoZSByZWZlcmVuY2VkIHRlcm0uaGF1ZGllbmNlomQkcmVmb3NjaGVtYTpBdWRpZW5jZWtkZXNjcmlwdGlvbnhCQW4gaW50ZW5kZWQgYXVkaWVuY2UsIGkuZS4gYSBncm91cCBmb3Igd2hvbSBzb21ldGhpbmcgd2FzIGNyZWF0ZWQuaGNpdGF0aW9uomVvbmVPZoKhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueHBBIGNpdGF0aW9uIG9yIHJlZmVyZW5jZSB0byBhbm90aGVyIGNyZWF0aXZlIHdvcmssIHN1Y2ggYXMgYW5vdGhlciBwdWJsaWNhdGlvbiwgd2ViIHBhZ2UsIHNjaG9sYXJseSBhcnRpY2xlLCBldGMuaGVkaXRFSURSomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255AnBBbiBbRUlEUl0oaHR0cHM6Ly9laWRyLm9yZy8pIChFbnRlcnRhaW5tZW50IElkZW50aWZpZXIgUmVnaXN0cnkpIFtbaWRlbnRpZmllcl1dIHJlcHJlc2VudGluZyBhIHNwZWNpZmljIGVkaXQgLyBlZGl0aW9uIGZvciBhIHdvcmsgb2YgZmlsbSBvciB0ZWxldmlzaW9uLgoKRm9yIGV4YW1wbGUsIHRoZSBtb3Rpb24gcGljdHVyZSBrbm93biBhcyAiR2hvc3RidXN0ZXJzIiB3aG9zZSBbW3RpdGxlRUlEUl1dIGlzICIxMC41MjQwLzdFQzctMjI4QS01MTBBLTA1M0UtQ0JCOC1KIiwgaGFzIHNldmVyYWwgZWRpdHMgZS5nLiAiMTAuNTI0MC8xRjJBLUUxQzUtNjgwQS0xNEM2LUU3NkItSSIgYW5kICIxMC41MjQwLzhBMzUtM0JFRS02NDk3LTVEMTItOUU0Ri0zIi4KClNpbmNlIHNjaGVtYS5vcmcgdHlwZXMgbGlrZSBbW01vdmllXV0gYW5kIFtbVFZFcGlzb2RlXV0gY2FuIGJlIHVzZWQgZm9yIGJvdGggd29ya3MgYW5kIHRoZWlyIG11bHRpcGxlIGV4cHJlc3Npb25zLCBpdCBpcyBwb3NzaWJsZSB0byB1c2UgW1t0aXRsZUVJRFJdXSBhbG9uZSAoZm9yIGEgZ2VuZXJhbCBkZXNjcmlwdGlvbiksIG9yIGFsb25nc2lkZSBbW2VkaXRFSURSXV0gZm9yIGEgbW9yZSBlZGl0LXNwZWNpZmljIGRlc2NyaXB0aW9uLgpoZW5jb2RpbmeiZW9uZU9mgqFkJHJlZnJzY2hlbWE6TWVkaWFPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZyc2NoZW1hOk1lZGlhT2JqZWN0a2Rlc2NyaXB0aW9ueF5BIG1lZGlhIG9iamVjdCB0aGF0IGVuY29kZXMgdGhpcyBDcmVhdGl2ZVdvcmsuIFRoaXMgcHJvcGVydHkgaXMgYSBzeW5vbnltIGZvciBhc3NvY2lhdGVkTWVkaWEuaGhlYWRsaW5lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngYSGVhZGxpbmUgb2YgdGhlIGFydGljbGUuaGlzUGFydE9momVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnheSW5kaWNhdGVzIGFuIGl0ZW0gb3IgQ3JlYXRpdmVXb3JrIHRoYXQgdGhpcyBpdGVtLCBvciBDcmVhdGl2ZVdvcmsgKGluIHNvbWUgc2Vuc2UpLCBpcyBwYXJ0IG9mLmhrZXl3b3Jkc6JlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm1rZGVzY3JpcHRpb254dktleXdvcmRzIG9yIHRhZ3MgdXNlZCB0byBkZXNjcmliZSB0aGlzIGNvbnRlbnQuIE11bHRpcGxlIGVudHJpZXMgaW4gYSBrZXl3b3JkcyBsaXN0IGFyZSB0eXBpY2FsbHkgZGVsaW1pdGVkIGJ5IGNvbW1hcy5obWF0ZXJpYWyiZW9uZU9mgqFlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZm5zY2hlbWE6UHJvZHVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ6FkJHJlZm5zY2hlbWE6UHJvZHVjdGtkZXNjcmlwdGlvbnhKQSBtYXRlcmlhbCB0aGF0IHNvbWV0aGluZyBpcyBtYWRlIGZyb20sIGUuZy4gbGVhdGhlciwgd29vbCwgY290dG9uLCBwYXBlci5obWVudGlvbnOiZW9uZU9mgqFkJHJlZmxzY2hlbWE6VGhpbmeiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZsc2NoZW1hOlRoaW5na2Rlc2NyaXB0aW9ueGBJbmRpY2F0ZXMgdGhhdCB0aGUgQ3JlYXRpdmVXb3JrIGNvbnRhaW5zIGEgcmVmZXJlbmNlIHRvLCBidXQgaXMgbm90IG5lY2Vzc2FyaWx5IGFib3V0IGEgY29uY2VwdC5ocG9zaXRpb26iZWFueU9mgqFkdHlwZWdpbnRlZ2VyoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbng5VGhlIHBvc2l0aW9uIG9mIGFuIGl0ZW0gaW4gYSBzZXJpZXMgb3Igc2VxdWVuY2Ugb2YgaXRlbXMuaHByb2R1Y2VyomVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueGFUaGUgcGVyc29uIG9yIG9yZ2FuaXphdGlvbiB3aG8gcHJvZHVjZWQgdGhlIHdvcmsgKGUuZy4gbXVzaWMgYWxidW0sIG1vdmllLCB0di9yYWRpbyBzZXJpZXMgZXRjLikuaHByb3ZpZGVyomVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueNBUaGUgc2VydmljZSBwcm92aWRlciwgc2VydmljZSBvcGVyYXRvciwgb3Igc2VydmljZSBwZXJmb3JtZXI7IHRoZSBnb29kcyBwcm9kdWNlci4gQW5vdGhlciBwYXJ0eSAoYSBzZWxsZXIpIG1heSBvZmZlciB0aG9zZSBzZXJ2aWNlcyBvciBnb29kcyBvbiBiZWhhbGYgb2YgdGhlIHByb3ZpZGVyLiBBIHByb3ZpZGVyIG1heSBhbHNvIHNlcnZlIGFzIHRoZSBzZWxsZXIuaHRlbXBvcmFsomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGlkYXRlLXRpbWWhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueL5UaGUgInRlbXBvcmFsIiBwcm9wZXJ0eSBjYW4gYmUgdXNlZCBpbiBjYXNlcyB3aGVyZSBtb3JlIHNwZWNpZmljIHByb3BlcnRpZXMKKGUuZy4gW1t0ZW1wb3JhbENvdmVyYWdlXV0sIFtbZGF0ZUNyZWF0ZWRdXSwgW1tkYXRlTW9kaWZpZWRdXSwgW1tkYXRlUHVibGlzaGVkXV0pIGFyZSBub3Qga25vd24gdG8gYmUgYXBwcm9wcmlhdGUuaWNoYXJhY3RlcqJlb25lT2aCoWQkcmVmbXNjaGVtYTpQZXJzb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbngwRmljdGlvbmFsIHBlcnNvbiBjb25uZWN0ZWQgd2l0aCBhIGNyZWF0aXZlIHdvcmsuaWVuY29kaW5nc6Jlb25lT2aCoWQkcmVmcnNjaGVtYTpNZWRpYU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZnJzY2hlbWE6TWVkaWFPYmplY3RrZGVzY3JpcHRpb254LkEgbWVkaWEgb2JqZWN0IHRoYXQgZW5jb2RlcyB0aGlzIENyZWF0aXZlV29yay5paXNCYXNlZE9uomVvbmVPZoKhZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbnNjaGVtYTpQcm9kdWN0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZm5zY2hlbWE6UHJvZHVjdGtkZXNjcmlwdGlvbnhaQSByZXNvdXJjZSBmcm9tIHdoaWNoIHRoaXMgd29yayBpcyBkZXJpdmVkIG9yIGZyb20gd2hpY2ggaXQgaXMgYSBtb2RpZmljYXRpb24gb3IgYWRhcHRpb24uaXB1Ymxpc2hlcqJlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbngjVGhlIHB1Ymxpc2hlciBvZiB0aGUgY3JlYXRpdmUgd29yay5pc2RMaWNlbnNlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnhUQSBsaWNlbnNlIGRvY3VtZW50IHRoYXQgYXBwbGllcyB0byB0aGlzIHN0cnVjdHVyZWQgZGF0YSwgdHlwaWNhbGx5IGluZGljYXRlZCBieSBVUkwuaXVzYWdlSW5mb6JlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb255AzdUaGUgc2NoZW1hLm9yZyBbW3VzYWdlSW5mb11dIHByb3BlcnR5IGluZGljYXRlcyBmdXJ0aGVyIGluZm9ybWF0aW9uIGFib3V0IGEgW1tDcmVhdGl2ZVdvcmtdXS4gVGhpcyBwcm9wZXJ0eSBpcyBhcHBsaWNhYmxlIGJvdGggdG8gd29ya3MgdGhhdCBhcmUgZnJlZWx5IGF2YWlsYWJsZSBhbmQgdG8gdGhvc2UgdGhhdCByZXF1aXJlIHBheW1lbnQgb3Igb3RoZXIgdHJhbnNhY3Rpb25zLiBJdCBjYW4gcmVmZXJlbmNlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gZS5nLiBjb21tdW5pdHkgZXhwZWN0YXRpb25zIG9uIHByZWZlcnJlZCBsaW5raW5nIGFuZCBjaXRhdGlvbiBjb252ZW50aW9ucywgYXMgd2VsbCBhcyBwdXJjaGFzaW5nIGRldGFpbHMuIEZvciBzb21ldGhpbmcgdGhhdCBjYW4gYmUgY29tbWVyY2lhbGx5IGxpY2Vuc2VkLCB1c2FnZUluZm8gY2FuIHByb3ZpZGUgZGV0YWlsZWQsIHJlc291cmNlLXNwZWNpZmljIGluZm9ybWF0aW9uIGFib3V0IGxpY2Vuc2luZyBvcHRpb25zLgoKVGhpcyBwcm9wZXJ0eSBjYW4gYmUgdXNlZCBhbG9uZ3NpZGUgdGhlIGxpY2Vuc2UgcHJvcGVydHkgd2hpY2ggaW5kaWNhdGVzIGxpY2Vuc2UocykgYXBwbGljYWJsZSB0byBzb21lIHBpZWNlIG9mIGNvbnRlbnQuIFRoZSB1c2FnZUluZm8gcHJvcGVydHkgY2FuIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgb3RoZXIgbGljZW5zaW5nIG9wdGlvbnMsIGUuZy4gYWNxdWlyaW5nIGNvbW1lcmNpYWwgdXNhZ2UgcmlnaHRzIGZvciBhbiBpbWFnZSB0aGF0IGlzIGFsc28gYXZhaWxhYmxlIHVuZGVyIG5vbi1jb21tZXJjaWFsIGNyZWF0aXZlIGNvbW1vbnMgbGljZW5zZXMuamFjY2Vzc01vZGWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueQEhVGhlIGh1bWFuIHNlbnNvcnkgcGVyY2VwdHVhbCBzeXN0ZW0gb3IgY29nbml0aXZlIGZhY3VsdHkgdGhyb3VnaCB3aGljaCBhIHBlcnNvbiBtYXkgcHJvY2VzcyBvciBwZXJjZWl2ZSBpbmZvcm1hdGlvbi4gRXhwZWN0ZWQgdmFsdWVzIGluY2x1ZGU6IGF1ZGl0b3J5LCB0YWN0aWxlLCB0ZXh0dWFsLCB2aXN1YWwsIGNvbG9yRGVwZW5kZW50LCBjaGFydE9uVmlzdWFsLCBjaGVtT25WaXN1YWwsIGRpYWdyYW1PblZpc3VhbCwgbWF0aE9uVmlzdWFsLCBtdXNpY09uVmlzdWFsLCB0ZXh0T25WaXN1YWwuCiAgICAgIGphcmNoaXZlZEF0omVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZm5zY2hlbWE6V2ViUGFnZaJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmbnNjaGVtYTpXZWJQYWdla2Rlc2NyaXB0aW9ueQFMSW5kaWNhdGVzIGEgcGFnZSBvciBvdGhlciBsaW5rIGludm9sdmVkIGluIGFyY2hpdmFsIG9mIGEgW1tDcmVhdGl2ZVdvcmtdXS4gSW4gdGhlIGNhc2Ugb2YgW1tNZWRpYVJldmlld11dLCB0aGUgaXRlbXMgaW4gYSBbW01lZGlhUmV2aWV3SXRlbV1dIG1heSBvZnRlbiBiZWNvbWUgaW5hY2Nlc3NpYmxlLCBidXQgYmUgYXJjaGl2ZWQgYnkgYXJjaGl2YWwsIGpvdXJuYWxpc3RpYywgYWN0aXZpc3QsIG9yIGxhdyBlbmZvcmNlbWVudCBvcmdhbml6YXRpb25zLiBJbiBzdWNoIGNhc2VzLCB0aGUgcmVmZXJlbmNlZCBwYWdlIG1heSBub3QgZGlyZWN0bHkgcHVibGlzaCB0aGUgY29udGVudC5qY29ycmVjdGlvbqJlb25lT2aCoWVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmeBhzY2hlbWE6Q29ycmVjdGlvbkNvbW1lbnSiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ4GHNjaGVtYTpDb3JyZWN0aW9uQ29tbWVudGtkZXNjcmlwdGlvbnhzSW5kaWNhdGVzIGEgY29ycmVjdGlvbiB0byBhIFtbQ3JlYXRpdmVXb3JrXV0sIGVpdGhlciB2aWEgYSBbW0NvcnJlY3Rpb25Db21tZW50XV0sIHRleHR1YWxseSBvciBpbiBhbm90aGVyIGRvY3VtZW50LmpjcmVkaXRUZXh0omVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnhrVGV4dCB0aGF0IGNhbiBiZSB1c2VkIHRvIGNyZWRpdCBwZXJzb24ocykgYW5kL29yIG9yZ2FuaXphdGlvbihzKSBhc3NvY2lhdGVkIHdpdGggYSBwdWJsaXNoZWQgQ3JlYXRpdmUgV29yay5qZmlsZUZvcm1hdKJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkB5U1lZGlhIHR5cGUsIHR5cGljYWxseSBNSU1FIGZvcm1hdCAoc2VlIFtJQU5BIHNpdGVdKGh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvbWVkaWEtdHlwZXMvbWVkaWEtdHlwZXMueGh0bWwpKSBvZiB0aGUgY29udGVudCBlLmcuIGFwcGxpY2F0aW9uL3ppcCBvZiBhIFNvZnR3YXJlQXBwbGljYXRpb24gYmluYXJ5LiBJbiBjYXNlcyB3aGVyZSBhIENyZWF0aXZlV29yayBoYXMgc2V2ZXJhbCBtZWRpYSB0eXBlIHJlcHJlc2VudGF0aW9ucywgJ2VuY29kaW5nJyBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBlYWNoIE1lZGlhT2JqZWN0IGFsb25nc2lkZSBwYXJ0aWN1bGFyIGZpbGVGb3JtYXQgaW5mb3JtYXRpb24uIFVucmVnaXN0ZXJlZCBvciBuaWNoZSBmaWxlIGZvcm1hdHMgY2FuIGJlIGluZGljYXRlZCBpbnN0ZWFkIHZpYSB0aGUgbW9zdCBhcHByb3ByaWF0ZSBVUkwsIGUuZy4gZGVmaW5pbmcgV2ViIHBhZ2Ugb3IgYSBXaWtpcGVkaWEgZW50cnkuamluTGFuZ3VhZ2WiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZvc2NoZW1hOkxhbmd1YWdla2Rlc2NyaXB0aW9ueMhUaGUgbGFuZ3VhZ2Ugb2YgdGhlIGNvbnRlbnQgb3IgcGVyZm9ybWFuY2Ugb3IgdXNlZCBpbiBhbiBhY3Rpb24uIFBsZWFzZSB1c2Ugb25lIG9mIHRoZSBsYW5ndWFnZSBjb2RlcyBmcm9tIHRoZSBbSUVURiBCQ1AgNDcgc3RhbmRhcmRdKGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL2JjcDQ3KS4gU2VlIGFsc28gW1thdmFpbGFibGVMYW5ndWFnZV1dLmptYWluRW50aXR5omVvbmVPZoKhZCRyZWZsc2NoZW1hOlRoaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmbHNjaGVtYTpUaGluZ2tkZXNjcmlwdGlvbnhKSW5kaWNhdGVzIHRoZSBwcmltYXJ5IGVudGl0eSBkZXNjcmliZWQgaW4gc29tZSBwYWdlIG9yIG90aGVyIENyZWF0aXZlV29yay5qbWFpbnRhaW5lcqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29uomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueQNcQSBtYWludGFpbmVyIG9mIGEgW1tEYXRhc2V0XV0sIHNvZnR3YXJlIHBhY2thZ2UgKFtbU29mdHdhcmVBcHBsaWNhdGlvbl1dKSwgb3Igb3RoZXIgW1tQcm9qZWN0XV0uIEEgbWFpbnRhaW5lciBpcyBhIFtbUGVyc29uXV0gb3IgW1tPcmdhbml6YXRpb25dXSB0aGF0IG1hbmFnZXMgY29udHJpYnV0aW9ucyB0bywgYW5kL29yIHB1YmxpY2F0aW9uIG9mLCBzb21lICh0eXBpY2FsbHkgY29tcGxleCkgYXJ0aWZhY3QuIEl0IGlzIGNvbW1vbiBmb3IgZGlzdHJpYnV0aW9ucyBvZiBzb2Z0d2FyZSBhbmQgZGF0YSB0byBiZSBiYXNlZCBvbiAidXBzdHJlYW0iIHNvdXJjZXMuIFdoZW4gW1ttYWludGFpbmVyXV0gaXMgYXBwbGllZCB0byBhIHNwZWNpZmljIHZlcnNpb24gb2Ygc29tZXRoaW5nIGUuZy4gYSBwYXJ0aWN1bGFyIHZlcnNpb24gb3IgcGFja2FnaW5nIG9mIGEgW1tEYXRhc2V0XV0sIGl0IGlzIGFsd2F5cyAgcG9zc2libGUgdGhhdCB0aGUgdXBzdHJlYW0gc291cmNlIGhhcyBhIGRpZmZlcmVudCBtYWludGFpbmVyLiBUaGUgW1tpc0Jhc2VkT25dXSBwcm9wZXJ0eSBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBzdWNoIHJlbGF0aW9uc2hpcHMgYmV0d2VlbiBkYXRhc2V0cyB0byBtYWtlIHRoZSBkaWZmZXJlbnQgbWFpbnRlbmFuY2Ugcm9sZXMgY2xlYXIuIFNpbWlsYXJseSBpbiB0aGUgY2FzZSBvZiBzb2Z0d2FyZSwgYSBwYWNrYWdlIG1heSBoYXZlIGRlZGljYXRlZCBtYWludGFpbmVycyB3b3JraW5nIG9uIGludGVncmF0aW9uIGludG8gc29mdHdhcmUgZGlzdHJpYnV0aW9ucyBzdWNoIGFzIFVidW50dSwgYXMgd2VsbCBhcyB1cHN0cmVhbSBtYWludGFpbmVycyBvZiB0aGUgdW5kZXJseWluZyB3b3JrLgogICAgICBqcmVjb3JkZWRBdKJkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254ZVRoZSBFdmVudCB3aGVyZSB0aGUgQ3JlYXRpdmVXb3JrIHdhcyByZWNvcmRlZC4gVGhlIENyZWF0aXZlV29yayBtYXkgY2FwdHVyZSBhbGwgb3IgcGFydCBvZiB0aGUgZXZlbnQuanRyYW5zbGF0b3KiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnizT3JnYW5pemF0aW9uIG9yIHBlcnNvbiB3aG8gYWRhcHRzIGEgY3JlYXRpdmUgd29yayB0byBkaWZmZXJlbnQgbGFuZ3VhZ2VzLCByZWdpb25hbCBkaWZmZXJlbmNlcyBhbmQgdGVjaG5pY2FsIHJlcXVpcmVtZW50cyBvZiBhIHRhcmdldCBtYXJrZXQsIG9yIHRoYXQgdHJhbnNsYXRlcyBkdXJpbmcgc29tZSBldmVudC5rY29udHJpYnV0b3KiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbqJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbng1QSBzZWNvbmRhcnkgY29udHJpYnV0b3IgdG8gdGhlIENyZWF0aXZlV29yayBvciBFdmVudC5rZGF0ZUNyZWF0ZWSiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGWiZHR5cGVmc3RyaW5nZmZvcm1hdGlkYXRlLXRpbWVrZGVzY3JpcHRpb254U1RoZSBkYXRlIG9uIHdoaWNoIHRoZSBDcmVhdGl2ZVdvcmsgd2FzIGNyZWF0ZWQgb3IgdGhlIGl0ZW0gd2FzIGFkZGVkIHRvIGEgRGF0YUZlZWQua3B1YmxpY2F0aW9uomVvbmVPZoKhZCRyZWZ3c2NoZW1hOlB1YmxpY2F0aW9uRXZlbnSiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ3c2NoZW1hOlB1YmxpY2F0aW9uRXZlbnRrZGVzY3JpcHRpb254LUEgcHVibGljYXRpb24gZXZlbnQgYXNzb2NpYXRlZCB3aXRoIHRoZSBpdGVtLmtzZFB1Ymxpc2hlcqJlb25lT2aCoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29uomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOk9yZ2FuaXphdGlvbqFkJHJlZm1zY2hlbWE6UGVyc29ua2Rlc2NyaXB0aW9ueQG0SW5kaWNhdGVzIHRoZSBwYXJ0eSByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyBhbmQgcHVibGlzaGluZyB0aGUgY3VycmVudCBzdHJ1Y3R1cmVkIGRhdGEgbWFya3VwLCB0eXBpY2FsbHkgaW4gY2FzZXMgd2hlcmUgdGhlIHN0cnVjdHVyZWQgZGF0YSBpcyBkZXJpdmVkIGF1dG9tYXRpY2FsbHkgZnJvbSBleGlzdGluZyBwdWJsaXNoZWQgY29udGVudCBidXQgcHVibGlzaGVkIG9uIGEgZGlmZmVyZW50IHNpdGUuIEZvciBleGFtcGxlLCBzdHVkZW50IHByb2plY3RzIGFuZCBvcGVuIGRhdGEgaW5pdGlhdGl2ZXMgb2Z0ZW4gcmUtcHVibGlzaCBleGlzdGluZyBjb250ZW50IHdpdGggbW9yZSBleHBsaWNpdGx5IHN0cnVjdHVyZWQgbWV0YWRhdGEuIFRoZQpbW3NkUHVibGlzaGVyXV0gcHJvcGVydHkgaGVscHMgbWFrZSBzdWNoIHByYWN0aWNlcyBtb3JlIGV4cGxpY2l0Lmt3b3JrRXhhbXBsZaJlb25lT2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbniBRXhhbXBsZS9pbnN0YW5jZS9yZWFsaXphdGlvbi9kZXJpdmF0aW9uIG9mIHRoZSBjb25jZXB0IG9mIHRoaXMgY3JlYXRpdmUgd29yay4gZWcuIFRoZSBwYXBlcmJhY2sgZWRpdGlvbiwgZmlyc3QgZWRpdGlvbiwgb3IgZUJvb2subGNvbW1lbnRDb3VudKJkdHlwZWdpbnRlZ2Vya2Rlc2NyaXB0aW9ueNJUaGUgbnVtYmVyIG9mIGNvbW1lbnRzIHRoaXMgQ3JlYXRpdmVXb3JrIChlLmcuIEFydGljbGUsIFF1ZXN0aW9uIG9yIEFuc3dlcikgaGFzIHJlY2VpdmVkLiBUaGlzIGlzIG1vc3QgYXBwbGljYWJsZSB0byB3b3JrcyBwdWJsaXNoZWQgaW4gV2ViIHNpdGVzIHdpdGggY29tbWVudGluZyBzeXN0ZW07IGFkZGl0aW9uYWwgY29tbWVudHMgbWF5IGV4aXN0IGVsc2V3aGVyZS5sZGF0ZU1vZGlmaWVkomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGRkYXRlomR0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1la2Rlc2NyaXB0aW9ueHZUaGUgZGF0ZSBvbiB3aGljaCB0aGUgQ3JlYXRpdmVXb3JrIHdhcyBtb3N0IHJlY2VudGx5IG1vZGlmaWVkIG9yIHdoZW4gdGhlIGl0ZW0ncyBlbnRyeSB3YXMgbW9kaWZpZWQgd2l0aGluIGEgRGF0YUZlZWQubGlzQmFzZWRPblVybKJlb25lT2aCoWVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZm5zY2hlbWE6UHJvZHVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aDomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZuc2NoZW1hOlByb2R1Y3RrZGVzY3JpcHRpb254q0EgcmVzb3VyY2UgdGhhdCB3YXMgdXNlZCBpbiB0aGUgY3JlYXRpb24gb2YgdGhpcyByZXNvdXJjZS4gVGhpcyB0ZXJtIGNhbiBiZSByZXBlYXRlZCBmb3IgbXVsdGlwbGUgc291cmNlcy4gRm9yIGV4YW1wbGUsIGh0dHA6Ly9leGFtcGxlLmNvbS9ncmVhdC1tdWx0aXBsaWNhdGlvbi1pbnRyby5odG1sLmx0aHVtYm5haWxVcmyiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbngoQSB0aHVtYm5haWwgaW1hZ2UgcmVsZXZhbnQgdG8gdGhlIFRoaW5nLmx0aW1lUmVxdWlyZWSjZHR5cGVmc3RyaW5naCRjb21tZW50eBtodHRwczovL3NjaGVtYS5vcmcvRHVyYXRpb25rZGVzY3JpcHRpb254lkFwcHJveGltYXRlIG9yIHR5cGljYWwgdGltZSBpdCB0YWtlcyB0byB3b3JrIHdpdGggb3IgdGhyb3VnaCB0aGlzIGxlYXJuaW5nIHJlc291cmNlIGZvciB0aGUgdHlwaWNhbCBpbnRlbmRlZCB0YXJnZXQgYXVkaWVuY2UsIGUuZy4gJ1BUMzBNJywgJ1BUMUgyNU0nLm1jb250ZW50UmF0aW5nomVvbmVPZoKhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZtc2NoZW1hOlJhdGluZ6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZm1zY2hlbWE6UmF0aW5na2Rlc2NyaXB0aW9ueEFPZmZpY2lhbCByYXRpbmcgb2YgYSBwaWVjZSBvZiBjb250ZW504oCUZm9yIGV4YW1wbGUsJ01QQUEgUEctMTMnLm1jb3B5cmlnaHRZZWFyomR0eXBlZm51bWJlcmtkZXNjcmlwdGlvbnhUVGhlIHllYXIgZHVyaW5nIHdoaWNoIHRoZSBjbGFpbWVkIGNvcHlyaWdodCBmb3IgdGhlIENyZWF0aXZlV29yayB3YXMgZmlyc3QgYXNzZXJ0ZWQubWRhdGVQdWJsaXNoZWSiZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0ZGRhdGWiZHR5cGVmc3RyaW5nZmZvcm1hdGlkYXRlLXRpbWVrZGVzY3JpcHRpb254JERhdGUgb2YgZmlyc3QgYnJvYWRjYXN0L3B1YmxpY2F0aW9uLm1kaXNjdXNzaW9uVXJsomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb254P0EgbGluayB0byB0aGUgcGFnZSBjb250YWluaW5nIHRoZSBjb21tZW50cyBvZiB0aGUgQ3JlYXRpdmVXb3JrLm1leGFtcGxlT2ZXb3JromVvbmVPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueFBBIGNyZWF0aXZlIHdvcmsgdGhhdCB0aGlzIHdvcmsgaXMgYW4gZXhhbXBsZS9pbnN0YW5jZS9yZWFsaXphdGlvbi9kZXJpdmF0aW9uIG9mLm1yZWxlYXNlZEV2ZW50omQkcmVmd3NjaGVtYTpQdWJsaWNhdGlvbkV2ZW50a2Rlc2NyaXB0aW9ueEtUaGUgcGxhY2UgYW5kIHRpbWUgdGhlIHJlbGVhc2Ugd2FzIGlzc3VlZCwgZXhwcmVzc2VkIGFzIGEgUHVibGljYXRpb25FdmVudC5tc2NoZW1hVmVyc2lvbqJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueQIHSW5kaWNhdGVzIChieSBVUkwgb3Igc3RyaW5nKSBhIHBhcnRpY3VsYXIgdmVyc2lvbiBvZiBhIHNjaGVtYSB1c2VkIGluIHNvbWUgQ3JlYXRpdmVXb3JrLiBUaGlzIHByb3BlcnR5IHdhcyBjcmVhdGVkIHByaW1hcmlseSB0bwogICAgaW5kaWNhdGUgdGhlIHVzZSBvZiBhIHNwZWNpZmljIHNjaGVtYS5vcmcgcmVsZWFzZSwgZS5nLiBgYGAxMC4wYGBgIGFzIGEgc2ltcGxlIHN0cmluZywgb3IgbW9yZSBleHBsaWNpdGx5IHZpYSBVUkwsIGBgYGh0dHBzOi8vc2NoZW1hLm9yZy9kb2NzL3JlbGVhc2VzLmh0bWwjdjEwLjBgYGAuIFRoZXJlIG1heSBiZSBzaXR1YXRpb25zIGluIHdoaWNoIG90aGVyIHNjaGVtYXMgbWlnaHQgdXNlZnVsbHkgYmUgcmVmZXJlbmNlZCB0aGlzIHdheSwgZS5nLiBgYGBodHRwOi8vZHVibGluY29yZS5vcmcvc3BlY2lmaWNhdGlvbnMvZHVibGluLWNvcmUvZGNlcy8xOTk5LTA3LTAyL2BgYCBidXQgdGhpcyBoYXMgbm90IGJlZW4gY2FyZWZ1bGx5IGV4cGxvcmVkIGluIHRoZSBjb21tdW5pdHkubmVkdWNhdGlvbmFsVXNlomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybWtkZXNjcmlwdGlvbnhbVGhlIHB1cnBvc2Ugb2YgYSB3b3JrIGluIHRoZSBjb250ZXh0IG9mIGVkdWNhdGlvbjsgZm9yIGV4YW1wbGUsICdhc3NpZ25tZW50JywgJ2dyb3VwIHdvcmsnLm5lbmNvZGluZ0Zvcm1hdKJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkCjk1lZGlhIHR5cGUgdHlwaWNhbGx5IGV4cHJlc3NlZCB1c2luZyBhIE1JTUUgZm9ybWF0IChzZWUgW0lBTkEgc2l0ZV0oaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9tZWRpYS10eXBlcy9tZWRpYS10eXBlcy54aHRtbCkgYW5kIFtNRE4gcmVmZXJlbmNlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0Jhc2ljc19vZl9IVFRQL01JTUVfdHlwZXMpKSBlLmcuIGFwcGxpY2F0aW9uL3ppcCBmb3IgYSBTb2Z0d2FyZUFwcGxpY2F0aW9uIGJpbmFyeSwgYXVkaW8vbXBlZyBmb3IgLm1wMyBldGMuKS4KCkluIGNhc2VzIHdoZXJlIGEgW1tDcmVhdGl2ZVdvcmtdXSBoYXMgc2V2ZXJhbCBtZWRpYSB0eXBlIHJlcHJlc2VudGF0aW9ucywgW1tlbmNvZGluZ11dIGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIGVhY2ggW1tNZWRpYU9iamVjdF1dIGFsb25nc2lkZSBwYXJ0aWN1bGFyIFtbZW5jb2RpbmdGb3JtYXRdXSBpbmZvcm1hdGlvbi4KClVucmVnaXN0ZXJlZCBvciBuaWNoZSBlbmNvZGluZyBhbmQgZmlsZSBmb3JtYXRzIGNhbiBiZSBpbmRpY2F0ZWQgaW5zdGVhZCB2aWEgdGhlIG1vc3QgYXBwcm9wcmlhdGUgVVJMLCBlLmcuIGRlZmluaW5nIFdlYiBwYWdlIG9yIGEgV2lraXBlZGlhL1dpa2lkYXRhIGVudHJ5Lm9bb2JqZWN0IE9iamVjdF2iZW9uZU9mgqFlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZngYc2NoZW1hOlF1YW50aXRhdGl2ZVZhbHVlomR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmeBhzY2hlbWE6UXVhbnRpdGF0aXZlVmFsdWVrZGVzY3JpcHRpb25gb2FnZ3JlZ2F0ZVJhdGluZ6JkJHJlZnZzY2hlbWE6QWdncmVnYXRlUmF0aW5na2Rlc2NyaXB0aW9ueE1UaGUgb3ZlcmFsbCByYXRpbmcsIGJhc2VkIG9uIGEgY29sbGVjdGlvbiBvZiByZXZpZXdzIG9yIHJhdGluZ3MsIG9mIHRoZSBpdGVtLm9hc3NvY2lhdGVkTWVkaWGiZCRyZWZyc2NoZW1hOk1lZGlhT2JqZWN0a2Rlc2NyaXB0aW9ueFdBIG1lZGlhIG9iamVjdCB0aGF0IGVuY29kZXMgdGhpcyBDcmVhdGl2ZVdvcmsuIFRoaXMgcHJvcGVydHkgaXMgYSBzeW5vbnltIGZvciBlbmNvZGluZy5vY29udGVudExvY2F0aW9uomQkcmVmbHNjaGVtYTpQbGFjZWtkZXNjcmlwdGlvbnhpVGhlIGxvY2F0aW9uIGRlcGljdGVkIG9yIGRlc2NyaWJlZCBpbiB0aGUgY29udGVudC4gRm9yIGV4YW1wbGUsIHRoZSBsb2NhdGlvbiBpbiBhIHBob3RvZ3JhcGggb3IgcGFpbnRpbmcub2NvcHlyaWdodEhvbGRlcqJlYW55T2aCoWQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb26hZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbng6VGhlIHBhcnR5IGhvbGRpbmcgdGhlIGxlZ2FsIGNvcHlyaWdodCB0byB0aGUgQ3JlYXRpdmVXb3JrLm9jb3B5cmlnaHROb3RpY2WiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueJRUZXh0IG9mIGEgbm90aWNlIGFwcHJvcHJpYXRlIGZvciBkZXNjcmliaW5nIHRoZSBjb3B5cmlnaHQgYXNwZWN0cyBvZiB0aGlzIENyZWF0aXZlIFdvcmssIGlkZWFsbHkgaW5kaWNhdGluZyB0aGUgb3duZXIgb2YgdGhlIGNvcHlyaWdodCBmb3IgdGhlIFdvcmsub2NvdW50cnlPZk9yaWdpbqJkJHJlZm5zY2hlbWE6Q291bnRyeWtkZXNjcmlwdGlvbnkCYVRoZSBjb3VudHJ5IG9mIG9yaWdpbiBvZiBzb21ldGhpbmcsIGluY2x1ZGluZyBwcm9kdWN0cyBhcyB3ZWxsIGFzIGNyZWF0aXZlICB3b3JrcyBzdWNoIGFzIG1vdmllIGFuZCBUViBjb250ZW50LgoKSW4gdGhlIGNhc2Ugb2YgVFYgYW5kIG1vdmllLCB0aGlzIHdvdWxkIGJlIHRoZSBjb3VudHJ5IG9mIHRoZSBwcmluY2lwbGUgb2ZmaWNlcyBvZiB0aGUgcHJvZHVjdGlvbiBjb21wYW55IG9yIGluZGl2aWR1YWwgcmVzcG9uc2libGUgZm9yIHRoZSBtb3ZpZS4gRm9yIG90aGVyIGtpbmRzIG9mIFtbQ3JlYXRpdmVXb3JrXV0gaXQgaXMgZGlmZmljdWx0IHRvIHByb3ZpZGUgZnVsbHkgZ2VuZXJhbCBndWlkYW5jZSwgYW5kIHByb3BlcnRpZXMgc3VjaCBhcyBbW2NvbnRlbnRMb2NhdGlvbl1dIGFuZCBbW2xvY2F0aW9uQ3JlYXRlZF1dIG1heSBiZSBtb3JlIGFwcGxpY2FibGUuCgpJbiB0aGUgY2FzZSBvZiBwcm9kdWN0cywgdGhlIGNvdW50cnkgb2Ygb3JpZ2luIG9mIHRoZSBwcm9kdWN0LiBUaGUgZXhhY3QgaW50ZXJwcmV0YXRpb24gb2YgdGhpcyBtYXkgdmFyeSBieSBjb250ZXh0IGFuZCBwcm9kdWN0IHR5cGUsIGFuZCBjYW5ub3QgYmUgZnVsbHkgZW51bWVyYXRlZCBoZXJlLm9sb2NhdGlvbkNyZWF0ZWSiZCRyZWZsc2NoZW1hOlBsYWNla2Rlc2NyaXB0aW9ueHhUaGUgbG9jYXRpb24gd2hlcmUgdGhlIENyZWF0aXZlV29yayB3YXMgY3JlYXRlZCwgd2hpY2ggbWF5IG5vdCBiZSB0aGUgc2FtZSBhcyB0aGUgbG9jYXRpb24gZGVwaWN0ZWQgaW4gdGhlIENyZWF0aXZlV29yay5vc2REYXRlUHVibGlzaGVkomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGRkYXRlomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZWtkZXNjcmlwdGlvbnh7SW5kaWNhdGVzIHRoZSBkYXRlIG9uIHdoaWNoIHRoZSBjdXJyZW50IHN0cnVjdHVyZWQgZGF0YSB3YXMgZ2VuZXJhdGVkIC8gcHVibGlzaGVkLiBUeXBpY2FsbHkgdXNlZCBhbG9uZ3NpZGUgW1tzZFB1Ymxpc2hlcl1db3NwYXRpYWxDb3ZlcmFnZaJkJHJlZmxzY2hlbWE6UGxhY2VrZGVzY3JpcHRpb255AYFUaGUgc3BhdGlhbENvdmVyYWdlIG9mIGEgQ3JlYXRpdmVXb3JrIGluZGljYXRlcyB0aGUgcGxhY2Uocykgd2hpY2ggYXJlIHRoZSBmb2N1cyBvZiB0aGUgY29udGVudC4gSXQgaXMgYSBzdWJwcm9wZXJ0eSBvZgogICAgICBjb250ZW50TG9jYXRpb24gaW50ZW5kZWQgcHJpbWFyaWx5IGZvciBtb3JlIHRlY2huaWNhbCBhbmQgZGV0YWlsZWQgbWF0ZXJpYWxzLiBGb3IgZXhhbXBsZSB3aXRoIGEgRGF0YXNldCwgaXQgaW5kaWNhdGVzCiAgICAgIGFyZWFzIHRoYXQgdGhlIGRhdGFzZXQgZGVzY3JpYmVzOiBhIGRhdGFzZXQgb2YgTmV3IFlvcmsgd2VhdGhlciB3b3VsZCBoYXZlIHNwYXRpYWxDb3ZlcmFnZSB3aGljaCB3YXMgdGhlIHBsYWNlOiB0aGUgc3RhdGUgb2YgTmV3IFlvcmsub3R5cGljYWxBZ2VSYW5nZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254MlRoZSB0eXBpY2FsIGV4cGVjdGVkIGFnZSByYW5nZSwgZS5nLiAnNy05JywgJzExLScub3dvcmtUcmFuc2xhdGlvbqJlb25lT2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnjsQSB3b3JrIHRoYXQgaXMgYSB0cmFuc2xhdGlvbiBvZiB0aGUgY29udGVudCBvZiB0aGlzIHdvcmsuIGUuZy4g6KW/6YGK6KiYIGhhcyBhbiBFbmdsaXNoIHdvcmtUcmFuc2xhdGlvbiDigJxKb3VybmV5IHRvIHRoZSBXZXN04oCdLGEgR2VybWFuIHdvcmtUcmFuc2xhdGlvbiDigJxNb25rZXlzIFBpbGdlcmZhaHJ04oCdIGFuZCBhIFZpZXRuYW1lc2UgIHRyYW5zbGF0aW9uIFTDonkgZHUga8O9IGLDrG5oIGto4bqjby5wYWNjZXNzaWJpbGl0eUFQSaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254q0luZGljYXRlcyB0aGF0IHRoZSByZXNvdXJjZSBpcyBjb21wYXRpYmxlIHdpdGggdGhlIHJlZmVyZW5jZWQgYWNjZXNzaWJpbGl0eSBBUEkgKFtXZWJTY2hlbWFzIHdpa2kgbGlzdHMgcG9zc2libGUgdmFsdWVzXShodHRwOi8vd3d3LnczLm9yZy93aWtpL1dlYlNjaGVtYXMvQWNjZXNzaWJpbGl0eSkpLnBlZHVjYXRpb25hbExldmVsomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybWtkZXNjcmlwdGlvbnjDVGhlIGxldmVsIGluIHRlcm1zIG9mIHByb2dyZXNzaW9uIHRocm91Z2ggYW4gZWR1Y2F0aW9uYWwgb3IgdHJhaW5pbmcgY29udGV4dC4gRXhhbXBsZXMgb2YgZWR1Y2F0aW9uYWwgbGV2ZWxzIGluY2x1ZGUgJ2JlZ2lubmVyJywgJ2ludGVybWVkaWF0ZScgb3IgJ2FkdmFuY2VkJywgYW5kIGZvcm1hbCBzZXRzIG9mIGxldmVsIGluZGljYXRvcnMucGlzRmFtaWx5RnJpZW5kbHmiZHR5cGVnYm9vbGVhbmtkZXNjcmlwdGlvbngySW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBjb250ZW50IGlzIGZhbWlseSBmcmllbmRseS5wcHVibGlzaGVySW1wcmludKJkJHJlZnNzY2hlbWE6T3JnYW5pemF0aW9ua2Rlc2NyaXB0aW9ueDJUaGUgcHVibGlzaGluZyBkaXZpc2lvbiB3aGljaCBwdWJsaXNoZWQgdGhlIGNvbWljLnB0ZW1wb3JhbENvdmVyYWdlomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGlkYXRlLXRpbWWiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueQQrVGhlIHRlbXBvcmFsQ292ZXJhZ2Ugb2YgYSBDcmVhdGl2ZVdvcmsgaW5kaWNhdGVzIHRoZSBwZXJpb2QgdGhhdCB0aGUgY29udGVudCBhcHBsaWVzIHRvLCBpLmUuIHRoYXQgaXQgZGVzY3JpYmVzLCBlaXRoZXIgYXMgYSBEYXRlVGltZSBvciBhcyBhIHRleHR1YWwgc3RyaW5nIGluZGljYXRpbmcgYSB0aW1lIHBlcmlvZCBpbiBbSVNPIDg2MDEgdGltZSBpbnRlcnZhbCBmb3JtYXRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI1RpbWVfaW50ZXJ2YWxzKS4gSW4KICAgICAgdGhlIGNhc2Ugb2YgYSBEYXRhc2V0IGl0IHdpbGwgdHlwaWNhbGx5IGluZGljYXRlIHRoZSByZWxldmFudCB0aW1lIHBlcmlvZCBpbiBhIHByZWNpc2Ugbm90YXRpb24gKGUuZy4gZm9yIGEgMjAxMSBjZW5zdXMgZGF0YXNldCwgdGhlIHllYXIgMjAxMSB3b3VsZCBiZSB3cml0dGVuICIyMDExLzIwMTIiKS4gT3RoZXIgZm9ybXMgb2YgY29udGVudCBlLmcuIFNjaG9sYXJseUFydGljbGUsIEJvb2ssIFRWU2VyaWVzIG9yIFRWRXBpc29kZSBtYXkgaW5kaWNhdGUgdGhlaXIgdGVtcG9yYWxDb3ZlcmFnZSBpbiBicm9hZGVyIHRlcm1zIC0gdGV4dHVhbGx5IG9yIHZpYSB3ZWxsLWtub3duIFVSTC4KICAgICAgV3JpdHRlbiB3b3JrcyBzdWNoIGFzIGJvb2tzIG1heSBzb21ldGltZXMgaGF2ZSBwcmVjaXNlIHRlbXBvcmFsIGNvdmVyYWdlIHRvbywgZS5nLiBhIHdvcmsgc2V0IGluIDE5MzkgLSAxOTQ1IGNhbiBiZSBpbmRpY2F0ZWQgaW4gSVNPIDg2MDEgaW50ZXJ2YWwgZm9ybWF0IGZvcm1hdCB2aWEgIjE5MzkvMTk0NSIuCgpPcGVuLWVuZGVkIGRhdGUgcmFuZ2VzIGNhbiBiZSB3cml0dGVuIHdpdGggIi4uIiBpbiBwbGFjZSBvZiB0aGUgZW5kIGRhdGUuIEZvciBleGFtcGxlLCAiMjAxNS0xMS8uLiIgaW5kaWNhdGVzIGEgcmFuZ2UgYmVnaW5uaW5nIGluIE5vdmVtYmVyIDIwMTUgYW5kIHdpdGggbm8gc3BlY2lmaWVkIGZpbmFsIGRhdGUuIFRoaXMgaXMgdGVudGF0aXZlIGFuZCBtaWdodCBiZSB1cGRhdGVkIGluIGZ1dHVyZSB3aGVuIElTTyA4NjAxIGlzIG9mZmljaWFsbHkgdXBkYXRlZC5xYWNjb3VudGFibGVQZXJzb26iZCRyZWZtc2NoZW1hOlBlcnNvbmtkZXNjcmlwdGlvbnhGU3BlY2lmaWVzIHRoZSBQZXJzb24gdGhhdCBpcyBsZWdhbGx5IGFjY291bnRhYmxlIGZvciB0aGUgQ3JlYXRpdmVXb3JrLnFpbnRlcmFjdGl2aXR5VHlwZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254flRoZSBwcmVkb21pbmFudCBtb2RlIG9mIGxlYXJuaW5nIHN1cHBvcnRlZCBieSB0aGUgbGVhcm5pbmcgcmVzb3VyY2UuIEFjY2VwdGFibGUgdmFsdWVzIGFyZSAnYWN0aXZlJywgJ2V4cG9zaXRpdmUnLCBvciAnbWl4ZWQnLnF0cmFuc2xhdGlvbk9mV29ya6JkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueHVUaGUgd29yayB0aGF0IHRoaXMgd29yayBoYXMgYmVlbiB0cmFuc2xhdGVkIGZyb20uIGUuZy4g54mp56eN6LW35rqQIGlzIGEgdHJhbnNsYXRpb25PZiDigJxPbiB0aGUgT3JpZ2luIG9mIFNwZWNpZXPigJ1yYWNxdWlyZUxpY2Vuc2VQYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JromR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnhnSW5kaWNhdGVzIGEgcGFnZSBkb2N1bWVudGluZyBob3cgbGljZW5zZXMgY2FuIGJlIHB1cmNoYXNlZCBvciBvdGhlcndpc2UgYWNxdWlyZWQsIGZvciB0aGUgY3VycmVudCBpdGVtLnJjb25kaXRpb25zT2ZBY2Nlc3OiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueQGiQ29uZGl0aW9ucyB0aGF0IGFmZmVjdCB0aGUgYXZhaWxhYmlsaXR5IG9mLCBvciBtZXRob2Qocykgb2YgYWNjZXNzIHRvLCBhbiBpdGVtLiBUeXBpY2FsbHkgdXNlZCBmb3IgcmVhbCB3b3JsZCBpdGVtcyBzdWNoIGFzIGFuIFtbQXJjaGl2ZUNvbXBvbmVudF1dIGhlbGQgYnkgYW4gW1tBcmNoaXZlT3JnYW5pemF0aW9uXV0uIFRoaXMgcHJvcGVydHkgaXMgbm90IHN1aXRhYmxlIGZvciB1c2UgYXMgYSBnZW5lcmFsIFdlYiBhY2Nlc3MgY29udHJvbCBtZWNoYW5pc20uIEl0IGlzIGV4cHJlc3NlZCBvbmx5IGluIG5hdHVyYWwgbGFuZ3VhZ2UuXG5cbkZvciBleGFtcGxlICJBdmFpbGFibGUgYnkgYXBwb2ludG1lbnQgZnJvbSB0aGUgUmVhZGluZyBSb29tIiBvciAiQWNjZXNzaWJsZSBvbmx5IGZyb20gbG9nZ2VkLWluIGFjY291bnRzICIuIHJjcmVhdGl2ZVdvcmtTdGF0dXOiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueNlUaGUgc3RhdHVzIG9mIGEgY3JlYXRpdmUgd29yayBpbiB0ZXJtcyBvZiBpdHMgc3RhZ2UgaW4gYSBsaWZlY3ljbGUuIEV4YW1wbGUgdGVybXMgaW5jbHVkZSBJbmNvbXBsZXRlLCBEcmFmdCwgUHVibGlzaGVkLCBPYnNvbGV0ZS4gU29tZSBvcmdhbml6YXRpb25zIGRlZmluZSBhIHNldCBvZiB0ZXJtcyBmb3IgdGhlIHN0YWdlcyBvZiB0aGVpciBwdWJsaWNhdGlvbiBsaWZlY3ljbGUucmludGVycHJldGVkQXNDbGFpbaJlb25lT2aCoWQkcmVmbHNjaGVtYTpDbGFpbaJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZmxzY2hlbWE6Q2xhaW1rZGVzY3JpcHRpb2540FVzZWQgdG8gaW5kaWNhdGUgYSBzcGVjaWZpYyBjbGFpbSBjb250YWluZWQsIGltcGxpZWQsIHRyYW5zbGF0ZWQgb3IgcmVmaW5lZCBmcm9tIHRoZSBjb250ZW50IG9mIGEgW1tNZWRpYU9iamVjdF1dIG9yIG90aGVyIFtbQ3JlYXRpdmVXb3JrXV0uIFRoZSBpbnRlcnByZXRpbmcgcGFydHkgY2FuIGJlIGluZGljYXRlZCB1c2luZyBbW2NsYWltSW50ZXJwcmV0ZXJdXS5yc291cmNlT3JnYW5pemF0aW9uomQkcmVmc3NjaGVtYTpPcmdhbml6YXRpb25rZGVzY3JpcHRpb254OVRoZSBPcmdhbml6YXRpb24gb24gd2hvc2UgYmVoYWxmIHRoZSBjcmVhdG9yIHdhcyB3b3JraW5nLnNhY2Nlc3NpYmlsaXR5SGF6YXJkomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjZQSBjaGFyYWN0ZXJpc3RpYyBvZiB0aGUgZGVzY3JpYmVkIHJlc291cmNlIHRoYXQgaXMgcGh5c2lvbG9naWNhbGx5IGRhbmdlcm91cyB0byBzb21lIHVzZXJzLiBSZWxhdGVkIHRvIFdDQUcgMi4wIGd1aWRlbGluZSAyLjMgKFtXZWJTY2hlbWFzIHdpa2kgbGlzdHMgcG9zc2libGUgdmFsdWVzXShodHRwOi8vd3d3LnczLm9yZy93aWtpL1dlYlNjaGVtYXMvQWNjZXNzaWJpbGl0eSkpLnNhbHRlcm5hdGl2ZUhlYWRsaW5lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbngmQSBzZWNvbmRhcnkgdGl0bGUgb2YgdGhlIENyZWF0aXZlV29yay5zaXNBY2Nlc3NpYmxlRm9yRnJlZaJkdHlwZWdib29sZWFua2Rlc2NyaXB0aW9ueEdBIGZsYWcgdG8gc2lnbmFsIHRoYXQgdGhlIGl0ZW0sIGV2ZW50LCBvciBwbGFjZSBpcyBhY2Nlc3NpYmxlIGZvciBmcmVlLnRhY2Nlc3NNb2RlU3VmZmljaWVudKJlb25lT2aCoWQkcmVmb3NjaGVtYTpJdGVtTGlzdKJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm9zY2hlbWE6SXRlbUxpc3RrZGVzY3JpcHRpb254u0EgbGlzdCBvZiBzaW5nbGUgb3IgY29tYmluZWQgYWNjZXNzTW9kZXMgdGhhdCBhcmUgc3VmZmljaWVudCB0byB1bmRlcnN0YW5kIGFsbCB0aGUgaW50ZWxsZWN0dWFsIGNvbnRlbnQgb2YgYSByZXNvdXJjZS4gRXhwZWN0ZWQgdmFsdWVzIGluY2x1ZGU6ICBhdWRpdG9yeSwgdGFjdGlsZSwgdGV4dHVhbCwgdmlzdWFsLgogICAgICB0YWNjZXNzaWJpbGl0eUNvbnRyb2yiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueLBJZGVudGlmaWVzIGlucHV0IG1ldGhvZHMgdGhhdCBhcmUgc3VmZmljaWVudCB0byBmdWxseSBjb250cm9sIHRoZSBkZXNjcmliZWQgcmVzb3VyY2UgKFtXZWJTY2hlbWFzIHdpa2kgbGlzdHMgcG9zc2libGUgdmFsdWVzXShodHRwOi8vd3d3LnczLm9yZy93aWtpL1dlYlNjaGVtYXMvQWNjZXNzaWJpbGl0eSkpLnRhY2Nlc3NpYmlsaXR5RmVhdHVyZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2540UNvbnRlbnQgZmVhdHVyZXMgb2YgdGhlIHJlc291cmNlLCBzdWNoIGFzIGFjY2Vzc2libGUgbWVkaWEsIGFsdGVybmF0aXZlcyBhbmQgc3VwcG9ydGVkIGVuaGFuY2VtZW50cyBmb3IgYWNjZXNzaWJpbGl0eSAoW1dlYlNjaGVtYXMgd2lraSBsaXN0cyBwb3NzaWJsZSB2YWx1ZXNdKGh0dHA6Ly93d3cudzMub3JnL3dpa2kvV2ViU2NoZW1hcy9BY2Nlc3NpYmlsaXR5KSkudGFjY2Vzc2liaWxpdHlTdW1tYXJ5omR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnkBQ0EgaHVtYW4tcmVhZGFibGUgc3VtbWFyeSBvZiBzcGVjaWZpYyBhY2Nlc3NpYmlsaXR5IGZlYXR1cmVzIG9yIGRlZmljaWVuY2llcywgY29uc2lzdGVudCB3aXRoIHRoZSBvdGhlciBhY2Nlc3NpYmlsaXR5IG1ldGFkYXRhIGJ1dCBleHByZXNzaW5nIHN1YnRsZXRpZXMgc3VjaCBhcyAic2hvcnQgZGVzY3JpcHRpb25zIGFyZSBwcmVzZW50IGJ1dCBsb25nIGRlc2NyaXB0aW9ucyB3aWxsIGJlIG5lZWRlZCBmb3Igbm9uLXZpc3VhbCB1c2VycyIgb3IgInNob3J0IGRlc2NyaXB0aW9ucyBhcmUgcHJlc2VudCBhbmQgbm8gbG9uZyBkZXNjcmlwdGlvbnMgYXJlIG5lZWRlZC4idGNvbnRlbnRSZWZlcmVuY2VUaW1lo2R0eXBlZnN0cmluZ2Zmb3JtYXRpZGF0ZS10aW1la2Rlc2NyaXB0aW9ueJFUaGUgc3BlY2lmaWMgdGltZSBkZXNjcmliZWQgYnkgYSBjcmVhdGl2ZSB3b3JrLCBmb3Igd29ya3MgKGUuZy4gYXJ0aWNsZXMsIHZpZGVvIG9iamVjdHMgZXRjLikgdGhhdCBlbXBoYXNpc2UgYSBwYXJ0aWN1bGFyIG1vbWVudCB3aXRoaW4gYW4gRXZlbnQudGVkdWNhdGlvbmFsQWxpZ25tZW50omVvbmVPZoKhZCRyZWZ2c2NoZW1hOkFsaWdubWVudE9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZnZzY2hlbWE6QWxpZ25tZW50T2JqZWN0a2Rlc2NyaXB0aW9uePRBbiBhbGlnbm1lbnQgdG8gYW4gZXN0YWJsaXNoZWQgZWR1Y2F0aW9uYWwgZnJhbWV3b3JrLgoKVGhpcyBwcm9wZXJ0eSBzaG91bGQgbm90IGJlIHVzZWQgd2hlcmUgdGhlIG5hdHVyZSBvZiB0aGUgYWxpZ25tZW50IGNhbiBiZSBkZXNjcmliZWQgdXNpbmcgYSBzaW1wbGUgcHJvcGVydHksIGZvciBleGFtcGxlIHRvIGV4cHJlc3MgdGhhdCBhIHJlc291cmNlIFtbdGVhY2hlc11dIG9yIFtbYXNzZXNzZXNdXSBhIGNvbXBldGVuY3kudGludGVyYWN0aW9uU3RhdGlzdGljomQkcmVmeBlzY2hlbWE6SW50ZXJhY3Rpb25Db3VudGVya2Rlc2NyaXB0aW9ueJxUaGUgbnVtYmVyIG9mIGludGVyYWN0aW9ucyBmb3IgdGhlIENyZWF0aXZlV29yayB1c2luZyB0aGUgV2ViU2l0ZSBvciBTb2Z0d2FyZUFwcGxpY2F0aW9uLiBUaGUgbW9zdCBzcGVjaWZpYyBjaGlsZCB0eXBlIG9mIEludGVyYWN0aW9uQ291bnRlciBzaG91bGQgYmUgdXNlZC50bGVhcm5pbmdSZXNvdXJjZVR5cGWiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZyc2NoZW1hOkRlZmluZWRUZXJta2Rlc2NyaXB0aW9ueGpUaGUgcHJlZG9taW5hbnQgdHlwZSBvciBraW5kIGNoYXJhY3Rlcml6aW5nIHRoZSBsZWFybmluZyByZXNvdXJjZS4gRm9yIGV4YW1wbGUsICdwcmVzZW50YXRpb24nLCAnaGFuZG91dCcudHB1Ymxpc2hpbmdQcmluY2lwbGVzomVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya2tkZXNjcmlwdGlvbnkCYVRoZSBwdWJsaXNoaW5nUHJpbmNpcGxlcyBwcm9wZXJ0eSBpbmRpY2F0ZXMgKHR5cGljYWxseSB2aWEgW1tVUkxdXSkgYSBkb2N1bWVudCBkZXNjcmliaW5nIHRoZSBlZGl0b3JpYWwgcHJpbmNpcGxlcyBvZiBhbiBbW09yZ2FuaXphdGlvbl1dIChvciBpbmRpdmlkdWFsIGUuZy4gYSBbW1BlcnNvbl1dIHdyaXRpbmcgYSBibG9nKSB0aGF0IHJlbGF0ZSB0byB0aGVpciBhY3Rpdml0aWVzIGFzIGEgcHVibGlzaGVyLCBlLmcuIGV0aGljcyBvciBkaXZlcnNpdHkgcG9saWNpZXMuIFdoZW4gYXBwbGllZCB0byBhIFtbQ3JlYXRpdmVXb3JrXV0gKGUuZy4gW1tOZXdzQXJ0aWNsZV1dKSB0aGUgcHJpbmNpcGxlcyBhcmUgdGhvc2Ugb2YgdGhlIHBhcnR5IHByaW1hcmlseSByZXNwb25zaWJsZSBmb3IgdGhlIGNyZWF0aW9uIG9mIHRoZSBbW0NyZWF0aXZlV29ya11dLgoKV2hpbGUgc3VjaCBwb2xpY2llcyBhcmUgbW9zdCB0eXBpY2FsbHkgZXhwcmVzc2VkIGluIG5hdHVyYWwgbGFuZ3VhZ2UsIHNvbWV0aW1lcyByZWxhdGVkIGluZm9ybWF0aW9uIChlLmcuIGluZGljYXRpbmcgYSBbW2Z1bmRlcl1dKSBjYW4gYmUgZXhwcmVzc2VkIHVzaW5nIHNjaGVtYS5vcmcgdGVybWlub2xvZ3kuCmtkZXNjcmlwdGlvbnhlVGhlIG1vc3QgZ2VuZXJpYyBraW5kIG9mIGNyZWF0aXZlIHdvcmssIGluY2x1ZGluZyBib29rcywgbW92aWVzLCBwaG90b2dyYXBocywgc29mdHdhcmUgcHJvZ3JhbXMsIGV0Yy5rZGVzY3JpcHRpb254LkEgY29sbGVjdGlvbiBvZiBtdXNpYyB0cmFja3MgaW4gcGxheWxpc3QgZm9ybS5maGVhZGVyomZ1bmlxdWVwOU9pSVJiQWsrVi9XVGtaaWtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1fryl0re111ms4ylqqqqbu49vlhft4qlmolec5fuf4i7ib1ph101u68"},"kjzl6cwe1jw14a91abp6xx19bn8t13ussz6bjt2xy8pdvlgaij3f42sbo5cspvr":{"alias":"MusicComposition","commits":[{"jws":{"payload":"AXESIL5wqCdanv6rmBFFtTgunph2BbEba95xkytc5iZ0ebMR","signatures":[{"signature":"Mlqoz2NhM4ylkJgexMsukPGjy5MQ28nz-ue7KCZQR1Z9oO94eIVirn3Bai6QhWDfHTPcB4kcKO6iLcf_vgR9DQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreif6ocucowu672vzqekfwu4c5huyoyc3cg3l3zyzgk244ythi6ntce"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frygw95f75d6wyatamfvf0u24y4usxfhwioojurrsbgztezq3081s0"},"kjzl6cwe1jw147ssbew6d3sf0ob3pyeycalpmvtiwvcdqlqtbog4c1f255u1t3p":{"alias":"Episode","commits":[{"jws":{"payload":"AXESID9PzNakhieN9IlOgFGjH11hPVfIQSOAFW_1ah9uXPjj","signatures":[{"signature":"uMoN2yhLw2CTo74jNCzPEvfssz2UHwTaMw1xs8SpyU9B_2IMqWF1NYtZT6DSsf_MfY-bGPQO92vF4_TTg8l1Dw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreib7j7gnnjege6g7jckoqbi2gh25me6vpscbeoabk37vnipw4xhy4m"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxzgpd5wt96y2ssuygkqc7feeaq9yhqw1p6moj1umtm338phouy9s"},"kjzl6cwe1jw147uv6x6g3zmkjvqaehhlh03ucs8pae9soj0an235gmehiqs4kj4":{"alias":"CreativeWorkSeason","commits":[{"jws":{"payload":"AXESIDgA-UEWRzyg1cbeiD6by2ANjJKbTP92et7RUzIhfAVV","signatures":[{"signature":"4nzioSyF_hb0ePMlTLvbbQouEUihoon4ilPsUSmWvqqPAgiX46eFXPAS-T6kBcRy5rrK0Y40lQwnmbaQV3KrBw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreibyad4ucfshhsqnlrw6ra7jxs3abwgjfg2m753hvxwrkmzcc7afku"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxzvht7xukdci5dmxz0d4owrbuwtvtxhnyf63nyueu7b0lag0hzwg"},"kjzl6cwe1jw1467kp518h71dsi5s5pc4g26mhmocerfmlyzqvxsvfrp6o3d6eqj":{"alias":"CreativeWorkSeries","commits":[{"jws":{"payload":"AXESILs4E6kdJy1WA631b9DwCD49T3OiJWnnx-3AZZqcB-2J","signatures":[{"signature":"Nk7djMcEoWRxzGwuHbzsb8Zc0_DRi7QryXz1HG65vIhCW_L4gWCjoam6AuWrF1Los1q7Lpf5uxVrRnZ6FpWICQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreif3haj2shjhfvlahlpvn7ipacb6hvhxhirfnht4p3oamwnjyb7nre"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxo5v6rssaa1u2p548k67m7j3xd948z34s8u774dbk4z3fbxpksn4"},"kjzl6cwe1jw147aspmtwuazowtgvxmyc4eu303ykpmvmxj6a622eakc7x0bg06c":{"alias":"Photograph","commits":[{"jws":{"payload":"AXESIMc3SX3lg3vhMHXeg4ca8JbiUyaE5bBD7mUodTucL1gz","signatures":[{"signature":"YPYwb4ufmSzf9cO3WYwo0jmBB8M4VPD69qFnig4fuWEV_dcdc_ZQcsMgtBBr84Tg8NfBZwqacnhbM3L7QljyDg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreighg5ex3zmdppqta5o6qodrv4ew4jjsnbhfwbb64zjiou5zyl2ygm"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxvws6acpji5t5dk337867dhxcs5vaaoz2gcob2p1n4mwaq9dt91c"},"kjzl6cwe1jw14ax6as302lv6khs6on10h4ruh0l7l4z2i19478f29svddhuhnox":{"alias":"Occupation","commits":[{"jws":{"payload":"AXESIG_Y5tFdPzpRW6IcGT2oer4mj6XEYxvJ0u6YD8kALEDW","signatures":[{"signature":"yEVY8HDQJ4gn2wu-RqqclfHiXVfR4NGHXJXzK_KT1Vl0n5baVGXrEFDht5JY8RYLwBX9rry4QqlOlE6yfErxDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreidp3dtncxj7hjivxiq4de62q6v6e2h2lrdddpe5f3uyb7eqalca2y"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlak9jY3VwYXRpb25nJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjanByb3BlcnRpZXOoZnNraWxsc6Jlb25lT2aCoWVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmcnNjaGVtYTpEZWZpbmVkVGVybaJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnJzY2hlbWE6RGVmaW5lZFRlcm1rZGVzY3JpcHRpb254rUEgc3RhdGVtZW50IG9mIGtub3dsZWRnZSwgc2tpbGwsIGFiaWxpdHksIHRhc2sgb3IgYW55IG90aGVyIGFzc2VydGlvbiBleHByZXNzaW5nIGEgY29tcGV0ZW5jeSB0aGF0IGlzIGRlc2lyZWQgb3IgcmVxdWlyZWQgdG8gZnVsZmlsbCB0aGlzIHJvbGUgb3IgdG8gd29yayBpbiB0aGlzIG9jY3VwYXRpb24ubnF1YWxpZmljYXRpb25zomVvbmVPZoKhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZ4KHNjaGVtYTpFZHVjYXRpb25hbE9jY3VwYXRpb25hbENyZWRlbnRpYWyiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZ4KHNjaGVtYTpFZHVjYXRpb25hbE9jY3VwYXRpb25hbENyZWRlbnRpYWxrZGVzY3JpcHRpb254PVNwZWNpZmljIHF1YWxpZmljYXRpb25zIHJlcXVpcmVkIGZvciB0aGlzIHJvbGUgb3IgT2NjdXBhdGlvbi5vZXN0aW1hdGVkU2FsYXJ5omVvbmVPZoKhZWFueU9mg6FkdHlwZWZudW1iZXKhZCRyZWZ1c2NoZW1hOk1vbmV0YXJ5QW1vdW50oWQkcmVmeCFzY2hlbWE6TW9uZXRhcnlBbW91bnREaXN0cmlidXRpb26iZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mg6FkdHlwZWZudW1iZXKhZCRyZWZ1c2NoZW1hOk1vbmV0YXJ5QW1vdW50oWQkcmVmeCFzY2hlbWE6TW9uZXRhcnlBbW91bnREaXN0cmlidXRpb25rZGVzY3JpcHRpb255AS1BbiBlc3RpbWF0ZWQgc2FsYXJ5IGZvciBhIGpvYiBwb3N0aW5nIG9yIG9jY3VwYXRpb24sIGJhc2VkIG9uIGEgdmFyaWV0eSBvZiB2YXJpYWJsZXMgaW5jbHVkaW5nLCBidXQgbm90IGxpbWl0ZWQgdG8gaW5kdXN0cnksIGpvYiB0aXRsZSwgYW5kIGxvY2F0aW9uLiBFc3RpbWF0ZWQgc2FsYXJpZXMgIGFyZSBvZnRlbiBjb21wdXRlZCBieSBvdXRzaWRlIG9yZ2FuaXphdGlvbnMgcmF0aGVyIHRoYW4gdGhlIGhpcmluZyBvcmdhbml6YXRpb24sIHdobyBtYXkgbm90IGhhdmUgY29tbWl0dGVkIHRvIHRoZSBlc3RpbWF0ZWQgdmFsdWUucHJlc3BvbnNpYmlsaXRpZXOiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueDlSZXNwb25zaWJpbGl0aWVzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHJvbGUgb3IgT2NjdXBhdGlvbi5yb2NjdXBhdGlvbkxvY2F0aW9uomQkcmVmeBlzY2hlbWE6QWRtaW5pc3RyYXRpdmVBcmVha2Rlc2NyaXB0aW9ueKBUaGUgcmVnaW9uL2NvdW50cnkgZm9yIHdoaWNoIHRoaXMgb2NjdXBhdGlvbmFsIGRlc2NyaXB0aW9uIGlzIGFwcHJvcHJpYXRlLiBOb3RlIHRoYXQgZWR1Y2F0aW9uYWwgcmVxdWlyZW1lbnRzIGFuZCBxdWFsaWZpY2F0aW9ucyBjYW4gdmFyeSBiZXR3ZWVuIGp1cmlzZGljdGlvbnMudG9jY3VwYXRpb25hbENhdGVnb3J5omVvbmVPZoKhZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZzc2NoZW1hOkNhdGVnb3J5Q29kZaJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWR0eXBlZnN0cmluZ6FkJHJlZnNzY2hlbWE6Q2F0ZWdvcnlDb2Rla2Rlc2NyaXB0aW9ueQIJQSBjYXRlZ29yeSBkZXNjcmliaW5nIHRoZSBqb2IsIHByZWZlcmFibHkgdXNpbmcgYSB0ZXJtIGZyb20gYSB0YXhvbm9teSBzdWNoIGFzIFtCTFMgTypORVQtU09DXShodHRwOi8vd3d3Lm9uZXRjZW50ZXIub3JnL3RheG9ub215Lmh0bWwpLCBbSVNDTy0wOF0oaHR0cHM6Ly93d3cuaWxvLm9yZy9wdWJsaWMvZW5nbGlzaC9idXJlYXUvc3RhdC9pc2NvL2lzY28wOC8pIG9yIHNpbWlsYXIsIHdpdGggdGhlIHByb3BlcnR5IHJlcGVhdGVkIGZvciBlYWNoIGFwcGxpY2FibGUgdmFsdWUuIElkZWFsbHkgdGhlIHRheG9ub215IHNob3VsZCBiZSBpZGVudGlmaWVkLCBhbmQgYm90aCB0aGUgdGV4dHVhbCBsYWJlbCBhbmQgZm9ybWFsIGNvZGUgZm9yIHRoZSBjYXRlZ29yeSBzaG91bGQgYmUgcHJvdmlkZWQuXG4KTm90ZTogZm9yIGhpc3RvcmljYWwgcmVhc29ucywgYW55IHRleHR1YWwgbGFiZWwgYW5kIGZvcm1hbCBjb2RlIHByb3ZpZGVkIGFzIGEgbGl0ZXJhbCBtYXkgYmUgYXNzdW1lZCB0byBiZSBmcm9tIE8qTkVULVNPQy51ZWR1Y2F0aW9uUmVxdWlyZW1lbnRzomVhbnlPZoKhZHR5cGVmc3RyaW5noWQkcmVmeChzY2hlbWE6RWR1Y2F0aW9uYWxPY2N1cGF0aW9uYWxDcmVkZW50aWFsa2Rlc2NyaXB0aW9ueD1FZHVjYXRpb25hbCBiYWNrZ3JvdW5kIG5lZWRlZCBmb3IgdGhlIHBvc2l0aW9uIG9yIE9jY3VwYXRpb24udmV4cGVyaWVuY2VSZXF1aXJlbWVudHOiZWFueU9mgqFkdHlwZWZzdHJpbmehZCRyZWZ4KXNjaGVtYTpPY2N1cGF0aW9uYWxFeHBlcmllbmNlUmVxdWlyZW1lbnRza2Rlc2NyaXB0aW9ueEtEZXNjcmlwdGlvbiBvZiBza2lsbHMgYW5kIGV4cGVyaWVuY2UgbmVlZGVkIGZvciB0aGUgcG9zaXRpb24gb3IgT2NjdXBhdGlvbi5rZGVmaW5pdGlvbnOiZVRoaW5npGR0eXBlZm9iamVjdGV0aXRsZWVUaGluZ2pwcm9wZXJ0aWVzrmN1cmyjZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb25wVVJMIG9mIHRoZSBpdGVtLmRuYW1lomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnVUaGUgbmFtZSBvZiB0aGUgaXRlbS5lQHR5cGWhZHR5cGVmc3RyaW5nZWltYWdlomVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3SiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnJzY2hlbWE6SW1hZ2VPYmplY3RrZGVzY3JpcHRpb254UUFuIGltYWdlIG9mIHRoZSBpdGVtLiBUaGlzIGNhbiBiZSBhIFtbVVJMXV0gb3IgYSBmdWxseSBkZXNjcmliZWQgW1tJbWFnZU9iamVjdF1dLmZzYW1lQXOiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnidVVJMIG9mIGEgcmVmZXJlbmNlIFdlYiBwYWdlIHRoYXQgdW5hbWJpZ3VvdXNseSBpbmRpY2F0ZXMgdGhlIGl0ZW0ncyBpZGVudGl0eS4gRS5nLiB0aGUgVVJMIG9mIHRoZSBpdGVtJ3MgV2lraXBlZGlhIHBhZ2UsIFdpa2lkYXRhIGVudHJ5LCBvciBvZmZpY2lhbCB3ZWJzaXRlLmhAY29udGV4dKFkdHlwZWZzdHJpbmdpc3ViamVjdE9momVvbmVPZoKhZWFueU9mgqFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3JroWQkcmVmbHNjaGVtYTpFdmVudKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50a2Rlc2NyaXB0aW9ueClBIENyZWF0aXZlV29yayBvciBFdmVudCBhYm91dCB0aGlzIFRoaW5nLmppZGVudGlmaWVyomVhbnlPZoOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZHR5cGVmc3RyaW5noWQkcmVmdHNjaGVtYTpQcm9wZXJ0eVZhbHVla2Rlc2NyaXB0aW9ueQFJVGhlIGlkZW50aWZpZXIgcHJvcGVydHkgcmVwcmVzZW50cyBhbnkga2luZCBvZiBpZGVudGlmaWVyIGZvciBhbnkga2luZCBvZiBbW1RoaW5nXV0sIHN1Y2ggYXMgSVNCTnMsIEdUSU4gY29kZXMsIFVVSURzIGV0Yy4gU2NoZW1hLm9yZyBwcm92aWRlcyBkZWRpY2F0ZWQgcHJvcGVydGllcyBmb3IgcmVwcmVzZW50aW5nIG1hbnkgb2YgdGhlc2UsIGVpdGhlciBhcyB0ZXh0dWFsIHN0cmluZ3Mgb3IgYXMgVVJMIChVUkkpIGxpbmtzLiBTZWUgW2JhY2tncm91bmQgbm90ZXNdKC9kb2NzL2RhdGFtb2RlbC5odG1sI2lkZW50aWZpZXJCZykgZm9yIG1vcmUgZGV0YWlscy4KICAgICAgICBrZGVzY3JpcHRpb26iZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueBpBIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtLm1hbHRlcm5hdGVOYW1lomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnZBbiBhbGlhcyBmb3IgdGhlIGl0ZW0ubmFkZGl0aW9uYWxUeXBlomVvbmVPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmiZHR5cGVlYXJyYXllaXRlbXOiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmlrZGVzY3JpcHRpb255AZ9BbiBhZGRpdGlvbmFsIHR5cGUgZm9yIHRoZSBpdGVtLCB0eXBpY2FsbHkgdXNlZCBmb3IgYWRkaW5nIG1vcmUgc3BlY2lmaWMgdHlwZXMgZnJvbSBleHRlcm5hbCB2b2NhYnVsYXJpZXMgaW4gbWljcm9kYXRhIHN5bnRheC4gVGhpcyBpcyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHNvbWV0aGluZyBhbmQgYSBjbGFzcyB0aGF0IHRoZSB0aGluZyBpcyBpbi4gSW4gUkRGYSBzeW50YXgsIGl0IGlzIGJldHRlciB0byB1c2UgdGhlIG5hdGl2ZSBSREZhIHN5bnRheCAtIHRoZSAndHlwZW9mJyBhdHRyaWJ1dGUgLSBmb3IgbXVsdGlwbGUgdHlwZXMuIFNjaGVtYS5vcmcgdG9vbHMgbWF5IGhhdmUgb25seSB3ZWFrZXIgdW5kZXJzdGFuZGluZyBvZiBleHRyYSB0eXBlcywgaW4gcGFydGljdWxhciB0aG9zZSBkZWZpbmVkIGV4dGVybmFsbHkub3BvdGVudGlhbEFjdGlvbqJlb25lT2aCoWQkcmVmbXNjaGVtYTpBY3Rpb26iZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZtc2NoZW1hOkFjdGlvbmtkZXNjcmlwdGlvbnhySW5kaWNhdGVzIGEgcG90ZW50aWFsIEFjdGlvbiwgd2hpY2ggZGVzY3JpYmVzIGFuIGlkZWFsaXplZCBhY3Rpb24gaW4gd2hpY2ggdGhpcyB0aGluZyB3b3VsZCBwbGF5IGFuICdvYmplY3QnIHJvbGUucG1haW5FbnRpdHlPZlBhZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuiZHR5cGVlYXJyYXllaXRlbXOhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnNzY2hlbWE6Q3JlYXRpdmVXb3Jra2Rlc2NyaXB0aW9ueLBJbmRpY2F0ZXMgYSBwYWdlIChvciBvdGhlciBDcmVhdGl2ZVdvcmspIGZvciB3aGljaCB0aGlzIHRoaW5nIGlzIHRoZSBtYWluIGVudGl0eSBiZWluZyBkZXNjcmliZWQuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjbWFpbkVudGl0eUJhY2tncm91bmQpIGZvciBkZXRhaWxzLngZZGlzYW1iaWd1YXRpbmdEZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb2547EEgc3ViIHByb3BlcnR5IG9mIGRlc2NyaXB0aW9uLiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGZyb20gb3RoZXIsIHNpbWlsYXIgaXRlbXMuIEluZm9ybWF0aW9uIGZyb20gb3RoZXIgcHJvcGVydGllcyAoaW4gcGFydGljdWxhciwgbmFtZSkgbWF5IGJlIG5lY2Vzc2FyeSBmb3IgdGhlIGRlc2NyaXB0aW9uIHRvIGJlIHVzZWZ1bCBmb3IgZGlzYW1iaWd1YXRpb24ua2Rlc2NyaXB0aW9ueB5UaGUgbW9zdCBnZW5lcmljIHR5cGUgb2YgaXRlbS5qSW50YW5naWJsZaRkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmcyMvZGVmaW5pdGlvbnMvVGhpbmdrZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmV0aXRsZWpJbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5rZGVzY3JpcHRpb254S0EgcHJvZmVzc2lvbiwgbWF5IGludm9sdmUgcHJvbG9uZ2VkIHRyYWluaW5nIGFuZC9vciBhIGZvcm1hbCBxdWFsaWZpY2F0aW9uLmZoZWFkZXKiZnVuaXF1ZXB6ejFRREx1K25ueGc2aXl1a2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frylnwsnpcijhqpqgfj7r7dty0p06tybdds8wtvfv45pb33ywtkh6o"},"kjzl6cwe1jw14axcoxcruc666w18k9orxrvfhexcterdfr0k80hp169fw3bt750":{"alias":"MonetaryAmountDistribution","commits":[{"jws":{"payload":"AXESILNjpcJ-kIETwpEc5Rj7_I7k2bUSrZauRO-SA6h02bfz","signatures":[{"signature":"v-aUdH6isOsZMeQWW1K2UwBASOdjmoyU2hD_IbCcpSS-abAo4l0ewAfhjxgmiDhPhqG4Ya2Y1j4lAf41zkwVDw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiftmos4e7uqqej4fei44umpx7eo4tm3kevns2xej34saouhjwnx6m"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4KyMvZGVmaW5pdGlvbnMvUXVhbnRpdGF0aXZlVmFsdWVEaXN0cmlidXRpb25rZGVzY3JpcHRpb254JUEgc3RhdGlzdGljYWwgZGlzdHJpYnV0aW9uIG9mIHZhbHVlcy5ldGl0bGV4Gk1vbmV0YXJ5QW1vdW50RGlzdHJpYnV0aW9uZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzoWhjdXJyZW5jeaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb255Aa9UaGUgY3VycmVuY3kgaW4gd2hpY2ggdGhlIG1vbmV0YXJ5IGFtb3VudCBpcyBleHByZXNzZWQuXG5cblVzZSBzdGFuZGFyZCBmb3JtYXRzOiBbSVNPIDQyMTcgY3VycmVuY3kgZm9ybWF0XShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT180MjE3KSBlLmcuICJVU0QiOyBbVGlja2VyIHN5bWJvbF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9jcnlwdG9jdXJyZW5jaWVzKSBmb3IgY3J5cHRvY3VycmVuY2llcyBlLmcuICJCVEMiOyB3ZWxsIGtub3duIG5hbWVzIGZvciBbTG9jYWwgRXhjaGFuZ2UgVHJhZGluZ3MgU3lzdGVtc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTG9jYWxfZXhjaGFuZ2VfdHJhZGluZ19zeXN0ZW0pIChMRVRTKSBhbmQgb3RoZXIgY3VycmVuY3kgdHlwZXMgZS5nLiAiSXRoYWNhIEhPVVIiLmtkZWZpbml0aW9uc6RlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLm9TdHJ1Y3R1cmVkVmFsdWWkZHR5cGVmb2JqZWN0ZWFsbE9mgaJkJHJlZngYIy9kZWZpbml0aW9ucy9JbnRhbmdpYmxla2Rlc2NyaXB0aW9ueHtBIHV0aWxpdHkgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgdGhlIHVtYnJlbGxhIGZvciBhIG51bWJlciBvZiAnaW50YW5naWJsZScgdGhpbmdzIHN1Y2ggYXMgcXVhbnRpdGllcywgc3RydWN0dXJlZCB2YWx1ZXMsIGV0Yy5ldGl0bGVvU3RydWN0dXJlZFZhbHVla2Rlc2NyaXB0aW9ueJdTdHJ1Y3R1cmVkIHZhbHVlcyBhcmUgdXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGhhcyBhIG1vcmUgY29tcGxleCBzdHJ1Y3R1cmUgdGhhbiBzaW1wbHkgYmVpbmcgYSB0ZXh0dWFsIHZhbHVlIG9yIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgdGhpbmcueB1RdWFudGl0YXRpdmVWYWx1ZURpc3RyaWJ1dGlvbqVkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmeB0jL2RlZmluaXRpb25zL1N0cnVjdHVyZWRWYWx1ZWtkZXNjcmlwdGlvbniXU3RydWN0dXJlZCB2YWx1ZXMgYXJlIHVzZWQgd2hlbiB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eSBoYXMgYSBtb3JlIGNvbXBsZXggc3RydWN0dXJlIHRoYW4gc2ltcGx5IGJlaW5nIGEgdGV4dHVhbCB2YWx1ZSBvciBhIHJlZmVyZW5jZSB0byBhbm90aGVyIHRoaW5nLmV0aXRsZXgdUXVhbnRpdGF0aXZlVmFsdWVEaXN0cmlidXRpb25qcHJvcGVydGllc6ZmbWVkaWFuomR0eXBlZm51bWJlcmtkZXNjcmlwdGlvbnFUaGUgbWVkaWFuIHZhbHVlLmhkdXJhdGlvbqNkdHlwZWZzdHJpbmdoJGNvbW1lbnR4G2h0dHBzOi8vc2NoZW1hLm9yZy9EdXJhdGlvbmtkZXNjcmlwdGlvbniAVGhlIGR1cmF0aW9uIG9mIHRoZSBpdGVtIChtb3ZpZSwgYXVkaW8gcmVjb3JkaW5nLCBldmVudCwgZXRjLikgaW4gW0lTTyA4NjAxIGRhdGUgZm9ybWF0XShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxKS5scGVyY2VudGlsZTEwomR0eXBlZm51bWJlcmtkZXNjcmlwdGlvbngaVGhlIDEwdGggcGVyY2VudGlsZSB2YWx1ZS5scGVyY2VudGlsZTI1omR0eXBlZm51bWJlcmtkZXNjcmlwdGlvbngaVGhlIDI1dGggcGVyY2VudGlsZSB2YWx1ZS5scGVyY2VudGlsZTc1omR0eXBlZm51bWJlcmtkZXNjcmlwdGlvbngaVGhlIDc1dGggcGVyY2VudGlsZSB2YWx1ZS5scGVyY2VudGlsZTkwomR0eXBlZm51bWJlcmtkZXNjcmlwdGlvbngaVGhlIDkwdGggcGVyY2VudGlsZSB2YWx1ZS5rZGVzY3JpcHRpb254JUEgc3RhdGlzdGljYWwgZGlzdHJpYnV0aW9uIG9mIHZhbHVlcy5rZGVzY3JpcHRpb254L0Egc3RhdGlzdGljYWwgZGlzdHJpYnV0aW9uIG9mIG1vbmV0YXJ5IGFtb3VudHMuZmhlYWRlcqJmdW5pcXVlcHhseDFERVFKaitaUFpmd3lrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frylp6996tzqjw0zssw4w6o67i3u5754ynk03zszhu0cj507nzmrk0"},"kjzl6cwe1jw147qfs0pta449hpg9e9jqybtr2c1eigjlxet0o4oekg9kpkq2gjf":{"alias":"OccupationalExperienceRequirements","commits":[{"jws":{"payload":"AXESIPZQ5mPHhaVBaKOftd6u2WitVwqyOu4yQTzVgyTwOFCO","signatures":[{"signature":"h5uXqJKUh6yIHYqeXqfix2oTMhzk6imghP8NqmBdTUe5bELtFsXJFWG0AxMyQi_lzhsbPsdVNdSIlsoIm_zxBw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihwkdtghr4fuvawri47wxpk5wlivvlqvmr25yzecpgvqmspaocqry"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxleCJPY2N1cGF0aW9uYWxFeHBlcmllbmNlUmVxdWlyZW1lbnRzZyRzY2hlbWF4J2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI2pwcm9wZXJ0aWVzoXJtb250aHNPZkV4cGVyaWVuY2WiZW9uZU9mgqFkdHlwZWZudW1iZXKiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmbnVtYmVya2Rlc2NyaXB0aW9ueE1JbmRpY2F0ZXMgdGhlIG1pbmltYWwgbnVtYmVyIG9mIG1vbnRocyBvZiBleHBlcmllbmNlIHJlcXVpcmVkIGZvciBhIHBvc2l0aW9uLmtkZWZpbml0aW9uc6JlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmtkZXNjcmlwdGlvbnhSSW5kaWNhdGVzIGVtcGxveW1lbnQtcmVsYXRlZCBleHBlcmllbmNlIHJlcXVpcmVtZW50cywgZS5nLiBbW21vbnRoc09mRXhwZXJpZW5jZV1dLmZoZWFkZXKiZnVuaXF1ZXBQRmhYcHVhZ1F0L2tlbnRMa2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1frxz00793k7xabhwzmtfwfo43kgllz79nfxlacrl9jlfo39vddhm2o"},"kjzl6cwe1jw14bfhv6tn225t5lxn5lb41cn9tcypkqpjgzag0esz93gsl5yvut7":{"alias":"CategoryCode","commits":[{"jws":{"payload":"AXESIM219LFtW6LqocBCs6sLXn8hKUDvqaLNSsoDGg5etPJ6","signatures":[{"signature":"valPkMJ71vATrJgg4iovZEhA1O35ANnY-7Bk1o84SdUQgmTnp0DZdmVtY0xR2plVgh_LP7wkB6JZVN-ERKLIBg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreignwx2lc3k3ulvkdqccwovqwxt7eeuub35julguvsqddihf5nhspi"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GSMvZGVmaW5pdGlvbnMvRGVmaW5lZFRlcm1rZGVzY3JpcHRpb255AWZBIHdvcmQsIG5hbWUsIGFjcm9ueW0sIHBocmFzZSwgZXRjLiB3aXRoIGEgZm9ybWFsIGRlZmluaXRpb24uIE9mdGVuIHVzZWQgaW4gdGhlIGNvbnRleHQgb2YgY2F0ZWdvcnkgb3Igc3ViamVjdCBjbGFzc2lmaWNhdGlvbiwgZ2xvc3NhcmllcyBvciBkaWN0aW9uYXJpZXMsIHByb2R1Y3Qgb3IgY3JlYXRpdmUgd29yayB0eXBlcywgZXRjLiBVc2UgdGhlIG5hbWUgcHJvcGVydHkgZm9yIHRoZSB0ZXJtIGJlaW5nIGRlZmluZWQsIHVzZSB0ZXJtQ29kZSBpZiB0aGUgdGVybSBoYXMgYW4gYWxwaGEtbnVtZXJpYyBjb2RlIGFsbG9jYXRlZCwgdXNlIGRlc2NyaXB0aW9uIHRvIHByb3ZpZGUgdGhlIGRlZmluaXRpb24gb2YgdGhlIHRlcm0uZXRpdGxlbENhdGVnb3J5Q29kZWckc2NoZW1heCdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNqcHJvcGVydGllc6JpY29kZVZhbHVlomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbng4QSBzaG9ydCB0ZXh0dWFsIGNvZGUgdGhhdCB1bmlxdWVseSBpZGVudGlmaWVzIHRoZSB2YWx1ZS5paW5Db2RlU2V0omVvbmVPZoKhZWFueU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkJHJlZnZzY2hlbWE6Q2F0ZWdvcnlDb2RlU2V0omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZ2c2NoZW1hOkNhdGVnb3J5Q29kZVNldGtkZXNjcmlwdGlvbng3QSBbW0NhdGVnb3J5Q29kZVNldF1dIHRoYXQgY29udGFpbnMgdGhpcyBjYXRlZ29yeSBjb2RlLmtkZWZpbml0aW9uc6NlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmtEZWZpbmVkVGVybaVkdHlwZWZvYmplY3RlYWxsT2aBomQkcmVmeBgjL2RlZmluaXRpb25zL0ludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmV0aXRsZWtEZWZpbmVkVGVybWpwcm9wZXJ0aWVzomh0ZXJtQ29kZaJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254R0EgY29kZSB0aGF0IGlkZW50aWZpZXMgdGhpcyBbW0RlZmluZWRUZXJtXV0gd2l0aGluIGEgW1tEZWZpbmVkVGVybVNldF1dcGluRGVmaW5lZFRlcm1TZXSiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmdXNjaGVtYTpEZWZpbmVkVGVybVNldKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmdXNjaGVtYTpEZWZpbmVkVGVybVNldGtkZXNjcmlwdGlvbngtQSBbW0RlZmluZWRUZXJtU2V0XV0gdGhhdCBjb250YWlucyB0aGlzIHRlcm0ua2Rlc2NyaXB0aW9ueQFmQSB3b3JkLCBuYW1lLCBhY3JvbnltLCBwaHJhc2UsIGV0Yy4gd2l0aCBhIGZvcm1hbCBkZWZpbml0aW9uLiBPZnRlbiB1c2VkIGluIHRoZSBjb250ZXh0IG9mIGNhdGVnb3J5IG9yIHN1YmplY3QgY2xhc3NpZmljYXRpb24sIGdsb3NzYXJpZXMgb3IgZGljdGlvbmFyaWVzLCBwcm9kdWN0IG9yIGNyZWF0aXZlIHdvcmsgdHlwZXMsIGV0Yy4gVXNlIHRoZSBuYW1lIHByb3BlcnR5IGZvciB0aGUgdGVybSBiZWluZyBkZWZpbmVkLCB1c2UgdGVybUNvZGUgaWYgdGhlIHRlcm0gaGFzIGFuIGFscGhhLW51bWVyaWMgY29kZSBhbGxvY2F0ZWQsIHVzZSBkZXNjcmlwdGlvbiB0byBwcm92aWRlIHRoZSBkZWZpbml0aW9uIG9mIHRoZSB0ZXJtLmtkZXNjcmlwdGlvbnBBIENhdGVnb3J5IENvZGUuZmhlYWRlcqJmdW5pcXVlcGk3czlQVStBalZWdUJ6OXNrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"dependencies":{},"version":"k3y52l7qbv1frypa71siryndbbvz8nrj0plxhss6tvhxmgqy9uxa2oonfaig2j3ls"},"kjzl6cwe1jw1463554a62l6xv975004llktwp85o33x53forewk2fwkqjxukf8g":{"alias":"CategoryCodeSet","commits":[{"jws":{"payload":"AXESIOdCJoTq0B6akaPVvib-JoJU0-FydEzMqcB2ln5LD-KB","signatures":[{"signature":"KkQFVmGNuf9w8AhJ6EMnY9C56zERex2SxK4xVi7N4XBzFj1GAJDArlGZCTKMKjmvedhtqFOWABmSoZJB63V9AQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihhiitij2wqd2njdi6vxytp4jucktj6c4tujtgktqdwsz7ewd7cqe"},"linkedBlock":""}],"dependencies":{},"version":"k3y52l7qbv1frxnackegb6epcu9erk0wplg4oje0ba3vo8fk2xzipd3ngtspd8c1s"},"kjzl6cwe1jw147uzg197popjcmt55pnbp8upbl3ycyt1c0kuou44vog783njn29":{"alias":"EntryPoint","commits":[{"jws":{"payload":"AXESIJ_43Xp9F2bvvq73LDKabORHQGMy0YihxH2ZoLkOeqx9","signatures":[{"signature":"THyAQW5U0I3gVDO8j9RwlYRCPEcy7DMqxf7ytEdI2LP65SG7jqgxhWa4o6KJsr88z0ZVhQ3AO_Ar5KwZF_doBg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreie77doxu7ixm3x35lxxfqzju3hei5aggmwrrcq4i7mzuc4q46vmpu"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZ4GCMvZGVmaW5pdGlvbnMvSW50YW5naWJsZWtkZXNjcmlwdGlvbnh7QSB1dGlsaXR5IGNsYXNzIHRoYXQgc2VydmVzIGFzIHRoZSB1bWJyZWxsYSBmb3IgYSBudW1iZXIgb2YgJ2ludGFuZ2libGUnIHRoaW5ncyBzdWNoIGFzIHF1YW50aXRpZXMsIHN0cnVjdHVyZWQgdmFsdWVzLCBldGMuZXRpdGxlakVudHJ5UG9pbnRnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjanByb3BlcnRpZXOnamh0dHBNZXRob2SiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9ueI5BbiBIVFRQIG1ldGhvZCB0aGF0IHNwZWNpZmllcyB0aGUgYXBwcm9wcmlhdGUgSFRUUCBtZXRob2QgZm9yIGEgcmVxdWVzdCB0byBhbiBIVFRQIEVudHJ5UG9pbnQuIFZhbHVlcyBhcmUgY2FwaXRhbGl6ZWQgc3RyaW5ncyBhcyB1c2VkIGluIEhUVFAua2FwcGxpY2F0aW9uomVvbmVPZoKhZCRyZWZ4GnNjaGVtYTpTb2Z0d2FyZUFwcGxpY2F0aW9uomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmeBpzY2hlbWE6U29mdHdhcmVBcHBsaWNhdGlvbmtkZXNjcmlwdGlvbngtQW4gYXBwbGljYXRpb24gdGhhdCBjYW4gY29tcGxldGUgdGhlIHJlcXVlc3Qua2NvbnRlbnRUeXBlomR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbng5VGhlIHN1cHBvcnRlZCBjb250ZW50IHR5cGUocykgZm9yIGFuIEVudHJ5UG9pbnQgcmVzcG9uc2Uua3VybFRlbXBsYXRlomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnhjQW4gdXJsIHRlbXBsYXRlIChSRkM2NTcwKSB0aGF0IHdpbGwgYmUgdXNlZCB0byBjb25zdHJ1Y3QgdGhlIHRhcmdldCBvZiB0aGUgZXhlY3V0aW9uIG9mIHRoZSBhY3Rpb24ubGVuY29kaW5nVHlwZaJkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254OVRoZSBzdXBwb3J0ZWQgZW5jb2RpbmcgdHlwZShzKSBmb3IgYW4gRW50cnlQb2ludCByZXF1ZXN0Lm5hY3Rpb25QbGF0Zm9ybaJlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnimVGhlIGhpZ2ggbGV2ZWwgcGxhdGZvcm0ocykgd2hlcmUgdGhlIEFjdGlvbiBjYW4gYmUgcGVyZm9ybWVkIGZvciB0aGUgZ2l2ZW4gVVJMLiBUbyBzcGVjaWZ5IGEgc3BlY2lmaWMgYXBwbGljYXRpb24gb3Igb3BlcmF0aW5nIHN5c3RlbSBpbnN0YW5jZSwgdXNlIGFjdGlvbkFwcGxpY2F0aW9uLnFhY3Rpb25BcHBsaWNhdGlvbqJlb25lT2aCoWQkcmVmeBpzY2hlbWE6U29mdHdhcmVBcHBsaWNhdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZngac2NoZW1hOlNvZnR3YXJlQXBwbGljYXRpb25rZGVzY3JpcHRpb254LUFuIGFwcGxpY2F0aW9uIHRoYXQgY2FuIGNvbXBsZXRlIHRoZSByZXF1ZXN0LmtkZWZpbml0aW9uc6JlVGhpbmekZHR5cGVmb2JqZWN0ZXRpdGxlZVRoaW5nanByb3BlcnRpZXOuY3VybKNkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnBVUkwgb2YgdGhlIGl0ZW0uZG5hbWWiZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udVRoZSBuYW1lIG9mIHRoZSBpdGVtLmVAdHlwZaFkdHlwZWZzdHJpbmdlaW1hZ2WiZW9uZU9mgqFlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdKJkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmcnNjaGVtYTpJbWFnZU9iamVjdGtkZXNjcmlwdGlvbnhRQW4gaW1hZ2Ugb2YgdGhlIGl0ZW0uIFRoaXMgY2FuIGJlIGEgW1tVUkxdXSBvciBhIGZ1bGx5IGRlc2NyaWJlZCBbW0ltYWdlT2JqZWN0XV0uZnNhbWVBc6Jlb25lT2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpa2Rlc2NyaXB0aW9ueJ1VUkwgb2YgYSByZWZlcmVuY2UgV2ViIHBhZ2UgdGhhdCB1bmFtYmlndW91c2x5IGluZGljYXRlcyB0aGUgaXRlbSdzIGlkZW50aXR5LiBFLmcuIHRoZSBVUkwgb2YgdGhlIGl0ZW0ncyBXaWtpcGVkaWEgcGFnZSwgV2lraWRhdGEgZW50cnksIG9yIG9mZmljaWFsIHdlYnNpdGUuaEBjb250ZXh0oWR0eXBlZnN0cmluZ2lzdWJqZWN0T2aiZW9uZU9mgqFlYW55T2aCoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmuhZCRyZWZsc2NoZW1hOkV2ZW50omR0eXBlZWFycmF5ZWl0ZW1zoWVhbnlPZoKhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6FkJHJlZmxzY2hlbWE6RXZlbnRrZGVzY3JpcHRpb254KUEgQ3JlYXRpdmVXb3JrIG9yIEV2ZW50IGFib3V0IHRoaXMgVGhpbmcuamlkZW50aWZpZXKiZWFueU9mg6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaFkdHlwZWZzdHJpbmehZCRyZWZ0c2NoZW1hOlByb3BlcnR5VmFsdWVrZGVzY3JpcHRpb255AUlUaGUgaWRlbnRpZmllciBwcm9wZXJ0eSByZXByZXNlbnRzIGFueSBraW5kIG9mIGlkZW50aWZpZXIgZm9yIGFueSBraW5kIG9mIFtbVGhpbmddXSwgc3VjaCBhcyBJU0JOcywgR1RJTiBjb2RlcywgVVVJRHMgZXRjLiBTY2hlbWEub3JnIHByb3ZpZGVzIGRlZGljYXRlZCBwcm9wZXJ0aWVzIGZvciByZXByZXNlbnRpbmcgbWFueSBvZiB0aGVzZSwgZWl0aGVyIGFzIHRleHR1YWwgc3RyaW5ncyBvciBhcyBVUkwgKFVSSSkgbGlua3MuIFNlZSBbYmFja2dyb3VuZCBub3Rlc10oL2RvY3MvZGF0YW1vZGVsLmh0bWwjaWRlbnRpZmllckJnKSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICAgIGtkZXNjcmlwdGlvbqJlb25lT2aCoWR0eXBlZnN0cmluZ6JkdHlwZWVhcnJheWVpdGVtc6FkdHlwZWZzdHJpbmdrZGVzY3JpcHRpb254GkEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0ubWFsdGVybmF0ZU5hbWWiZW9uZU9mgqFkdHlwZWZzdHJpbmeiZHR5cGVlYXJyYXllaXRlbXOhZHR5cGVmc3RyaW5na2Rlc2NyaXB0aW9udkFuIGFsaWFzIGZvciB0aGUgaXRlbS5uYWRkaXRpb25hbFR5cGWiZW9uZU9mgqJkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaaJkdHlwZWVhcnJheWVpdGVtc6JkdHlwZWZzdHJpbmdmZm9ybWF0Y3VyaWtkZXNjcmlwdGlvbnkBn0FuIGFkZGl0aW9uYWwgdHlwZSBmb3IgdGhlIGl0ZW0sIHR5cGljYWxseSB1c2VkIGZvciBhZGRpbmcgbW9yZSBzcGVjaWZpYyB0eXBlcyBmcm9tIGV4dGVybmFsIHZvY2FidWxhcmllcyBpbiBtaWNyb2RhdGEgc3ludGF4LiBUaGlzIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gc29tZXRoaW5nIGFuZCBhIGNsYXNzIHRoYXQgdGhlIHRoaW5nIGlzIGluLiBJbiBSREZhIHN5bnRheCwgaXQgaXMgYmV0dGVyIHRvIHVzZSB0aGUgbmF0aXZlIFJERmEgc3ludGF4IC0gdGhlICd0eXBlb2YnIGF0dHJpYnV0ZSAtIGZvciBtdWx0aXBsZSB0eXBlcy4gU2NoZW1hLm9yZyB0b29scyBtYXkgaGF2ZSBvbmx5IHdlYWtlciB1bmRlcnN0YW5kaW5nIG9mIGV4dHJhIHR5cGVzLCBpbiBwYXJ0aWN1bGFyIHRob3NlIGRlZmluZWQgZXh0ZXJuYWxseS5vcG90ZW50aWFsQWN0aW9uomVvbmVPZoKhZCRyZWZtc2NoZW1hOkFjdGlvbqJkdHlwZWVhcnJheWVpdGVtc6FkJHJlZm1zY2hlbWE6QWN0aW9ua2Rlc2NyaXB0aW9ueHJJbmRpY2F0ZXMgYSBwb3RlbnRpYWwgQWN0aW9uLCB3aGljaCBkZXNjcmliZXMgYW4gaWRlYWxpemVkIGFjdGlvbiBpbiB3aGljaCB0aGlzIHRoaW5nIHdvdWxkIHBsYXkgYW4gJ29iamVjdCcgcm9sZS5wbWFpbkVudGl0eU9mUGFnZaJlb25lT2aCoWVhbnlPZoKiZHR5cGVmc3RyaW5nZmZvcm1hdGN1cmmhZCRyZWZzc2NoZW1hOkNyZWF0aXZlV29ya6JkdHlwZWVhcnJheWVpdGVtc6FlYW55T2aComR0eXBlZnN0cmluZ2Zmb3JtYXRjdXJpoWQkcmVmc3NjaGVtYTpDcmVhdGl2ZVdvcmtrZGVzY3JpcHRpb254sEluZGljYXRlcyBhIHBhZ2UgKG9yIG90aGVyIENyZWF0aXZlV29yaykgZm9yIHdoaWNoIHRoaXMgdGhpbmcgaXMgdGhlIG1haW4gZW50aXR5IGJlaW5nIGRlc2NyaWJlZC4gU2VlIFtiYWNrZ3JvdW5kIG5vdGVzXSgvZG9jcy9kYXRhbW9kZWwuaHRtbCNtYWluRW50aXR5QmFja2dyb3VuZCkgZm9yIGRldGFpbHMueBlkaXNhbWJpZ3VhdGluZ0Rlc2NyaXB0aW9uomVvbmVPZoKhZHR5cGVmc3RyaW5nomR0eXBlZWFycmF5ZWl0ZW1zoWR0eXBlZnN0cmluZ2tkZXNjcmlwdGlvbnjsQSBzdWIgcHJvcGVydHkgb2YgZGVzY3JpcHRpb24uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW0gdXNlZCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBvdGhlciwgc2ltaWxhciBpdGVtcy4gSW5mb3JtYXRpb24gZnJvbSBvdGhlciBwcm9wZXJ0aWVzIChpbiBwYXJ0aWN1bGFyLCBuYW1lKSBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGUgZGVzY3JpcHRpb24gdG8gYmUgdXNlZnVsIGZvciBkaXNhbWJpZ3VhdGlvbi5rZGVzY3JpcHRpb254HlRoZSBtb3N0IGdlbmVyaWMgdHlwZSBvZiBpdGVtLmpJbnRhbmdpYmxlpGR0eXBlZm9iamVjdGVhbGxPZoGiZCRyZWZzIy9kZWZpbml0aW9ucy9UaGluZ2tkZXNjcmlwdGlvbngeVGhlIG1vc3QgZ2VuZXJpYyB0eXBlIG9mIGl0ZW0uZXRpdGxlakludGFuZ2libGVrZGVzY3JpcHRpb254e0EgdXRpbGl0eSBjbGFzcyB0aGF0IHNlcnZlcyBhcyB0aGUgdW1icmVsbGEgZm9yIGEgbnVtYmVyIG9mICdpbnRhbmdpYmxlJyB0aGluZ3Mgc3VjaCBhcyBxdWFudGl0aWVzLCBzdHJ1Y3R1cmVkIHZhbHVlcywgZXRjLmtkZXNjcmlwdGlvbngvQW4gZW50cnkgcG9pbnQsIHdpdGhpbiBzb21lIFdlYi1iYXNlZCBwcm90b2NvbC5maGVhZGVyomZ1bmlxdWVwc2x2eXcrdUNiTWJBQWsxS2tjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1frxzwc20xiunpllu78omdv7iyc2e44c7ihhg4a8m5ep9v7dlzfo000"},"kjzl6cwe1jw149ytrtme8lvrg0qn5n9pyqq42kacf0oo05sl4s6llratkaasqih":{"alias":"MediaGallery","commits":[{"jws":{"payload":"AXESIPAtcko249oRuI_oy9YbAfB7SjOEPMhVUAE6712WRTsN","signatures":[{"signature":"KHkT41CFBgVy1bdSNQxtGL6UNYM7MCnLjckUohRV9VHLb5R8L0dy88bASrrbOkc_Dc432egKY9YJ46QKqb1FDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreihqfvzeunxd3ii3rd7izplbwapqpnfdhbb4zbkvaaj255ozmrj3bu"},"linkedBlock":"omRkYXRhpWR0eXBlZm9iamVjdGV0aXRsZWxNZWRpYUdhbGxlcnlnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjanByb3BlcnRpZXOhcW1lZGlhR2FsbGVyeUl0ZW1zomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmeCEjL2RlZmluaXRpb25zL01lZGlhT2JqZWN0U3RyZWFtSWRrZGVmaW5pdGlvbnOhc01lZGlhT2JqZWN0U3RyZWFtSWSjZHR5cGVmc3RyaW5naCRjb21tZW50eFNjaXA4ODpyZWY6Y2VyYW1pYzovL2tqemw2Y3dlMWp3MTQ4N2ljbjY4aTllNXJkNnZxY2FiMzhpejR0eWIzd2w2MmZnMzViYnR0dDN6NmlrYTV2NmltYXhMZW5ndGgYlmZoZWFkZXKiZnVuaXF1ZXBuZjlRSm1GNC94bXNSTmdaa2NvbnRyb2xsZXJzgXg4ZGlkOmtleTp6Nk1rd2V4OW5rVkY5WUNkMU5SQzhSQXJHZ1FoRm9FamlWOUV0RThxVnUxVnJmaUE="}],"dependencies":{},"version":"k3y52l7qbv1fryevnpun997lv5x9go5h4n21oy89kasvep57aa0exmq4y898scjcw"},"kjzl6cwe1jw149qajgvtsvx9cw68ex1w2zcfsgj5admba18wubt9pe2zu2wj8cx":{"alias":"Pinset","commits":[{"jws":{"payload":"AXESIMofYLY4wS_7fNsk-we8vofGWGnRn1X9xwNtBMaSN48d","signatures":[{"signature":"WYB3QkDOVEHu4WIo499yxSxFdl8_YWZIIDgg7ve7G3PwY7xjQ9mdfFG-E6NnCke_q_Xv4KjGH2hvdQHEDU2VDA","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreigkd5qlmogbf75xzwze7md3zpuhyzmgtum7kx64oa3natdjen4pdu"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGV0aXRsZWZQaW5zZXRnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjaHJlcXVpcmVkgWRyb290anByb3BlcnRpZXOhZHJvb3ShZCRyZWZ1Iy9kZWZpbml0aW9ucy9JUEZTVXJsa2RlZmluaXRpb25zoWdJUEZTVXJso2R0eXBlZnN0cmluZ2dwYXR0ZXJual5pcGZzOi8vLitpbWF4TGVuZ3RoGJZrZGVzY3JpcHRpb254RkEgc2ltcGxlIHNjaGVtYSBmb3Igc3RvcmluZyBhIENJRCB0aGF0IHJlcHJlc2VudHMgdGhlIHJvb3Qgb2YgYSBwaW5zZXRmaGVhZGVyomZ1bmlxdWVwcXBwQ1lMMVI0S3NWWGZWemtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"dependencies":{},"version":"k3y52l7qbv1fryd6yyg2bxf0ijosbu31g57cgadk5lsuo7cvdjo050k5atwncrfuo"},"kjzl6cwe1jw146qshz0usllxyk6tz47wl3ki7pqqf81ojqi3kant0cvwzkwsdr2":{"alias":"Pinset","commits":[{"jws":{"payload":"AXESIFrrs95gYCzRyB5HMIjKu3VNbJk1zUgVD6JFHafGyoGA","signatures":[{"signature":"zBgvZR16vzllGL2PWHdhS5hK9-o2K_dc_BSO4VDC1055FK5f0sfQypAAWgnYu-9BqsmHwAxGeBqryLSU-4QsAg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa2lBeEpabXNaaW1TNGpYZUt2YXViTll0ckNoZGpoNFJ0SmlHY1Z6WkpGQURCI3o2TWtpQXhKWm1zWmltUzRqWGVLdmF1Yk5ZdHJDaGRqaDRSdEppR2NWelpKRkFEQiJ9"}],"link":"bafyreic25oz54ydafti4qhshgcemvo3vjvwjsnonjakq7isfdwt4nsubqa"},"linkedBlock":"omRkYXRhp2R0eXBlZm9iamVjdGV0aXRsZWZQaW5zZXRnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjaHJlcXVpcmVkgWRyb290anByb3BlcnRpZXOhZHJvb3ShZCRyZWZ1Iy9kZWZpbml0aW9ucy9JUEZTVXJsa2RlZmluaXRpb25zoWdJUEZTVXJso2R0eXBlZnN0cmluZ2dwYXR0ZXJual5pcGZzOi8vLitpbWF4TGVuZ3RoGJZrZGVzY3JpcHRpb254RkEgc2ltcGxlIHNjaGVtYSBmb3Igc3RvcmluZyBhIENJRCB0aGF0IHJlcHJlc2VudHMgdGhlIHJvb3Qgb2YgYSBwaW5zZXRmaGVhZGVyomZ1bmlxdWVwNlhxeUR0cVViRVpiYXdLVGtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa2lBeEpabXNaaW1TNGpYZUt2YXViTll0ckNoZGpoNFJ0SmlHY1Z6WkpGQURC"},{"jws":{"payload":"AXESIOJbAoLxBIan7dewY_eKBUgRboDlgCcd1peYN9tZ1sYN","signatures":[{"signature":"jKbthJaSyCLLBy286g0m4VtWZaPqg9RMSc7ZL02QGKUJRx7rCGZ3HYhql1U80jFHkJYYfBfB3zprgBrDZrEkDw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa2lBeEpabXNaaW1TNGpYZUt2YXViTll0ckNoZGpoNFJ0SmlHY1Z6WkpGQURCI3o2TWtpQXhKWm1zWmltUzRqWGVLdmF1Yk5ZdHJDaGRqaDRSdEppR2NWelpKRkFEQiJ9"}],"link":"bafyreihclmbif4ieq2t63v5qmp3yubkicfxibzmae4o5nf4yg7nvtvwgbu"},"linkedBlock":"pGJpZNgqWCYAAYUBEiA6969T96d76+ptYkhbStB4hRyPpr1/GW4AEzRghxNUnmRkYXRhgGRwcmV22CpYJgABhQESIDr3r1P3p3vr6m1iSFtK0HiFHI+mvX8ZbgATNGCHE1SeZmhlYWRlcqA="},{"jws":{"payload":"AXESICpANIEE45ofdkV2eequrRmwkwmhrx_JGIYqpepE5DWZ","signatures":[{"signature":"VMZL5XFYeFpQHTT7U4pymhT2NphM0oU72M2rZYzcfDhACloxh1doEUCYlq5bDfTHoOG5d_m_bufqs7xMKqWDDQ","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa2lBeEpabXNaaW1TNGpYZUt2YXViTll0ckNoZGpoNFJ0SmlHY1Z6WkpGQURCI3o2TWtpQXhKWm1zWmltUzRqWGVLdmF1Yk5ZdHJDaGRqaDRSdEppR2NWelpKRkFEQiJ9"}],"link":"bafyreibkia2icbhdtipxmrlwphvk5lizwcjqtinpd7errbrkuxvejzbvte"},"linkedBlock":"pGJpZNgqWCYAAYUBEiA6969T96d76+ptYkhbStB4hRyPpr1/GW4AEzRghxNUnmRkYXRhgGRwcmV22CpYJgABhQESIH8TPwE7MhgL1DukuoCgjFQm1m859UYCD5aSmG3bC1/NZmhlYWRlcqA="}],"dependencies":{},"version":"k3y52l7qbv1frxryint22zdo1hrkl5q07q1dtiv23w97ykcgpcbtaajmyl0p5tse8"},"kjzl6cwe1jw1492g6h2ycxghrwyq7kdbnsvs9ur44apyj8rqia5cdxgw3x8d2rp":{"alias":"MediaGallery","commits":[{"jws":{"payload":"AXESINpr0thP5i59fFLtCRnSSasXHf-qvyluRVLYSXdPToUO","signatures":[{"signature":"lhWKWH9mLggVcErwXQJreQXdlRluFDmfZlZm4OQHXcXBR0-y5tG3WTHo_8LQIA0vfqxzKh4E8PoAaEd9vSS-Bw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa2lBeEpabXNaaW1TNGpYZUt2YXViTll0ckNoZGpoNFJ0SmlHY1Z6WkpGQURCI3o2TWtpQXhKWm1zWmltUzRqWGVLdmF1Yk5ZdHJDaGRqaDRSdEppR2NWelpKRkFEQiJ9"}],"link":"bafyreig2npjnqt7gfz6xyuxnbem5esnlc4o77kv7ffxekuwyjf3u6tufby"},"linkedBlock":"omRkYXRhpWR0eXBlZm9iamVjdGV0aXRsZWxNZWRpYUdhbGxlcnlnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjanByb3BlcnRpZXOhcW1lZGlhR2FsbGVyeUl0ZW1zomR0eXBlZWFycmF5ZWl0ZW1zoWQkcmVmeBkjL2RlZmluaXRpb25zL01lZGlhT2JqZWN0a2RlZmluaXRpb25zoXNNZWRpYU9iamVjdFN0cmVhbUlko2R0eXBlZnN0cmluZ2gkY29tbWVudHhTY2lwODg6cmVmOmNlcmFtaWM6Ly9ranpsNmN3ZTFqdzE0ODdpY242OGk5ZTVyZDZ2cWNhYjM4aXo0dHliM3dsNjJmZzM1YmJ0dHQzejZpa2E1djZpbWF4TGVuZ3RoGJZmaGVhZGVyomZ1bmlxdWVwRHhEd2dISGpkYUtDRHZUWmtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa2lBeEpabXNaaW1TNGpYZUt2YXViTll0ckNoZGpoNFJ0SmlHY1Z6WkpGQURC"}],"dependencies":{},"version":"k1dpgaqe3i64kjujbiufq90m6kajxm9a8p9pd1u465ynbnc39cmqd1ppdoefw4mqp1xy8lzue015wex2ovu8jcmoh88ytepp9khunjfxjufdo5hlxb7woerla"},"kjzl6cwe1jw146x1pnq7vg4t0lwea84s2a8u58tt1clfmv7mrju3l2341klxyu6":{"alias":"BasicProfile","commits":[{"jws":{"payload":"AXESIMy4lYCUWSpzFW5jKQ0mYJOQ67EQnv5Exuv3F599h-et","signatures":[{"protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3NOWUU2V3RNWjNXTGJQd2NwOUdtN2RUN0ozRHNOUDhhdVFOblBwUUJ1MzdBI3o2TWtzTllFNld0TVozV0xiUHdjcDlHbTdkVDdKM0RzTlA4YXVRTm5QcFFCdTM3QSJ9","signature":"yeEnzWKALkvTn_X7wjgL3ldLW8I8vWANs5QZmqI6PGbU5AJl12eIuWyID-mRPuGF9flovtGNX1P-qKkc6Y8JBA"}],"link":"bafyreigmxckybfczfjzrk3tdfegsmyetsdv3cee67zcmn27xc6px3b7hvu"},"linkedBlock":"o2RkYXRhpWR0eXBlZm9iamVjdGV0aXRsZWxCYXNpY1Byb2ZpbGVnJHNjaGVtYXgnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjanByb3BlcnRpZXOsY3VybKJkdHlwZWZzdHJpbmdpbWF4TGVuZ3RoGPBkbmFtZaJkdHlwZWZzdHJpbmdpbWF4TGVuZ3RoGJZlZW1vammiZHR5cGVmc3RyaW5naW1heExlbmd0aAJlaW1hZ2WhZCRyZWZ4GiMvZGVmaW5pdGlvbnMvaW1hZ2VTb3VyY2VzZmdlbmRlcqJkdHlwZWZzdHJpbmdpbWF4TGVuZ3RoGCppYmlydGhEYXRlo2R0eXBlZnN0cmluZ2Zmb3JtYXRkZGF0ZWltYXhMZW5ndGgKamJhY2tncm91bmShZCRyZWZ4GiMvZGVmaW5pdGlvbnMvaW1hZ2VTb3VyY2Vza2Rlc2NyaXB0aW9uomR0eXBlZnN0cmluZ2ltYXhMZW5ndGgZAaRsYWZmaWxpYXRpb25zomR0eXBlZWFycmF5ZWl0ZW1zomR0eXBlZnN0cmluZ2ltYXhMZW5ndGgYjGxob21lTG9jYXRpb26iZHR5cGVmc3RyaW5naW1heExlbmd0aBiMbW5hdGlvbmFsaXRpZXOjZHR5cGVlYXJyYXllaXRlbXOjZHR5cGVmc3RyaW5nZ3BhdHRlcm5qXltBLVpdezJ9JGhtYXhJdGVtcwVobWluSXRlbXMBcHJlc2lkZW5jZUNvdW50cnmjZHR5cGVmc3RyaW5nZ3BhdHRlcm5qXltBLVpdezJ9JGltYXhMZW5ndGgCa2RlZmluaXRpb25zpGdJUEZTVXJso2R0eXBlZnN0cmluZ2dwYXR0ZXJual5pcGZzOi8vLitpbWF4TGVuZ3RoGJZsaW1hZ2VTb3VyY2Vzo2R0eXBlZm9iamVjdGhyZXF1aXJlZIFob3JpZ2luYWxqcHJvcGVydGllc6Job3JpZ2luYWyhZCRyZWZ4GyMvZGVmaW5pdGlvbnMvaW1hZ2VNZXRhZGF0YWxhbHRlcm5hdGl2ZXOiZHR5cGVlYXJyYXllaXRlbXOhZCRyZWZ4GyMvZGVmaW5pdGlvbnMvaW1hZ2VNZXRhZGF0YW1pbWFnZU1ldGFkYXRho2R0eXBlZm9iamVjdGhyZXF1aXJlZIRjc3JjaG1pbWVUeXBlZXdpZHRoZmhlaWdodGpwcm9wZXJ0aWVzpWNzcmOhZCRyZWZ1Iy9kZWZpbml0aW9ucy9JUEZTVXJsZHNpemWhZCRyZWZ4HSMvZGVmaW5pdGlvbnMvcG9zaXRpdmVJbnRlZ2VyZXdpZHRooWQkcmVmeB0jL2RlZmluaXRpb25zL3Bvc2l0aXZlSW50ZWdlcmZoZWlnaHShZCRyZWZ4HSMvZGVmaW5pdGlvbnMvcG9zaXRpdmVJbnRlZ2VyaG1pbWVUeXBlomR0eXBlZnN0cmluZ2ltYXhMZW5ndGgYMm9wb3NpdGl2ZUludGVnZXKiZHR5cGVnaW50ZWdlcmdtaW5pbXVtAWZoZWFkZXKiZnNjaGVtYfdrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWtzTllFNld0TVozV0xiUHdjcDlHbTdkVDdKM0RzTlA4YXVRTm5QcFFCdTM3QWdkb2N0eXBlZHRpbGU="}],"dependencies":{},"version":"k3y52l7qbv1frxt706gqfzmq6cbqdkptzk8uudaryhlkf6ly9vx21hqu4r6k1jqio"}},"definitions":{"kjzl6cwe1jw14a0rvhtm5v0tyekkywck8um5oneidd2jpe0kt5422jexlunkpt8":{"alias":"geoWebPinset","commits":[{"jws":{"payload":"AXESIAHSSKT6IjRYtpyvaxP6beNOa9NubJYElRD6zdGEzbXw","signatures":[{"signature":"dkIsgttN1y4PmYfWKMkxAJHEy0fE-UAyyWh_-8FGOqJyx-xkGG_7RyR_21Cz3wyuwr3seHHzoZht7bXFwEuxBg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreiab2jekj6rcgrmlnhfpnmj7u3pdjzv5g3tmsycjkeh2zxiyjtnv6a"},"linkedBlock":"omRkYXRho2RuYW1lbkdlbyBXZWIgUGluc2V0ZnNjaGVtYXhLY2VyYW1pYzovL2szeTUybDdxYnYxZnJ4cnlpbnQyMnpkbzFocmtsNXEwN3ExZHRpdjIzdzk3eWtjZ3BjYnRhYWpteWwwcDV0c2U4a2Rlc2NyaXB0aW9ueDNQaW5zZXQgb2Ygb2JqZWN0cyBhbmNob3JlZCB0byBhIEdlbyBXZWIgbGFuZCBwYXJjZWxmaGVhZGVyo2ZzY2hlbWF4S2NlcmFtaWM6Ly9rM3k1Mmw3cWJ2MWZyeTFmcDRzMG53ZGFyaDB2YWh1c2FycHBvc2dldnkwcGVtaXlreW1kMm9yZDZzd3RoYXJjd2Z1bmlxdWVwZkhaT1U4VCtsY2c0MkYzWmtjb250cm9sbGVyc4F4OGRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlB"}],"schema":"kjzl6cwe1jw146qshz0usllxyk6tz47wl3ki7pqqf81ojqi3kant0cvwzkwsdr2","version":"k3y52l7qbv1fryf9i7yqllolx0nmd461byxpkfaf6n0y44jo3z8cuq226zdznbjsw"},"kjzl6cwe1jw1499ugch52aqexi39ipe0llyl9aia1h97c9kdeopurp2n2svcr9b":{"alias":"mediaGallery","commits":[{"jws":{"payload":"AXESIFXkkLNMfrN4zOWLB6zLg3k_sXEsLX31lT1ed0UbsAIb","signatures":[{"signature":"5ktp0PmLCpHoHHMJqmbvoyBZ-gGcjo-sHVhcoA47x2H44pxPuzZsLNWaQ85oZz_NZqBUzp1H87pXT2cAu7mtCw","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3dleDlua1ZGOVlDZDFOUkM4UkFyR2dRaEZvRWppVjlFdEU4cVZ1MVZyZmlBI3o2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQSJ9"}],"link":"bafyreicv4silgtd6wn4mzzmla6wmxa3zh6yxclbnpx2zkpk6o5crxmacdm"},"linkedBlock":"omRkYXRho2RuYW1lbU1lZGlhIEdhbGxlcnlmc2NoZW1heINjZXJhbWljOi8vazFkcGdhcWUzaTY0a2p1amJpdWZxOTBtNmthanhtOWE4cDlwZDF1NDY1eW5ibmMzOWNtcWQxcHBkb2VmdzRtcXAxeHk4bHp1ZTAxNXdleDJvdnU4amNtb2g4OHl0ZXBwOWtodW5qZnhqdWZkbzVobHhiN3dvZXJsYWtkZXNjcmlwdGlvbngYQSBnYWxsZXJ5IG9mIG1lZGlhIGl0ZW1zZmhlYWRlcqNmc2NoZW1heEtjZXJhbWljOi8vazN5NTJsN3FidjFmcnkxZnA0czBud2RhcmgwdmFodXNhcnBwb3NnZXZ5MHBlbWl5a3ltZDJvcmQ2c3d0aGFyY3dmdW5pcXVlcDVYczNnQjFSL3hNZFFVMUprY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWt3ZXg5bmtWRjlZQ2QxTlJDOFJBckdnUWhGb0VqaVY5RXRFOHFWdTFWcmZpQQ=="}],"schema":"kjzl6cwe1jw1492g6h2ycxghrwyq7kdbnsvs9ur44apyj8rqia5cdxgw3x8d2rp","version":"k3y52l7qbv1fry9y0k8pw0cbu68n7p0jo9o5z62pzeipg780vcfrusyas3xaypu68"},"kjzl6cwe1jw145cjbeko9kil8g9bxszjhyde21ob8epxuxkaon1izyqsu8wgcic":{"alias":"basicProfile","commits":[{"jws":{"payload":"AXESIHQlyxvLYuiHGvjCREWnS0HxQV6z7lfPRe4mRdViHjWU","signatures":[{"protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3NOWUU2V3RNWjNXTGJQd2NwOUdtN2RUN0ozRHNOUDhhdVFOblBwUUJ1MzdBI3o2TWtzTllFNld0TVozV0xiUHdjcDlHbTdkVDdKM0RzTlA4YXVRTm5QcFFCdTM3QSJ9","signature":"619cILy5j-zkYwz0pJ2cYnPnVqmYf6YJcuqxcLoaRqvCL341HOoTm0siEOG_Jmu1alT_UUuah1dlrqubgIe1BA"}],"link":"bafyreiduexfrxs3c5cdrv6gcirc2os2b6fav5m7ok7hul3rgixkwehrvsq"},"linkedBlock":"o2RkYXRho2RuYW1lbUJhc2ljIFByb2ZpbGVmc2NoZW1heEtjZXJhbWljOi8vazN5NTJsN3FidjFmcnh0NzA2Z3Fmem1xNmNicWRrcHR6azh1dWRhcnlobGtmNmx5OXZ4MjFocXU0cjZrMWpxaW9rZGVzY3JpcHRpb254I0Jhc2ljIHByb2ZpbGUgaW5mb3JtYXRpb24gZm9yIGEgRElEZmhlYWRlcqJmc2NoZW1heEtjZXJhbWljOi8vazN5NTJsN3FidjFmcnkxZnA0czBud2RhcmgwdmFodXNhcnBwb3NnZXZ5MHBlbWl5a3ltZDJvcmQ2c3d0aGFyY3drY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWtzTllFNld0TVozV0xiUHdjcDlHbTdkVDdKM0RzTlA4YXVRTm5QcFFCdTM3QWdkb2N0eXBlZHRpbGU="}],"schema":"kjzl6cwe1jw146x1pnq7vg4t0lwea84s2a8u58tt1clfmv7mrju3l2341klxyu6","version":"k3y52l7qbv1frxi15d3n0k1w703mcwe4qnof7yjwvvsogryobz7uv3r2l33as8ydc"}},"tiles":{}}